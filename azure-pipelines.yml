# Formatting, linting, testing, and code release

trigger:
  branches:
    include:
    - main
    - refs/tags/*
  
stages:

- stage: Unit_Tests
  displayName: Unit Tests

  jobs:
    - job: "PyTest"

      pool:
        vmImage: ubuntu-20.04

      variables:
        CONDA_ENV: baybe
        CONDA_HOME: /usr/share/miniconda/envs/$(CONDA_ENV)/
        CONDA_ROOT: /usr/share/miniconda/
        disable.coverage.autogenerate: 'true'

      steps:
      - checkout: self

      - script: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add Conda to PATH

      - task: Cache@2
        displayName: Use Cached Conda Env
        inputs:
          key: conda | environment.yml
          path: $(CONDA_HOME)
          cacheHitVar: CONDA_CACHE_RESTORED

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
        displayName: Install Micromamba

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba create -y --file environment.yml
        displayName: Create Conda Env If Not Cached
        condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          python -m pip install '.[extra]'
        displayName: "Install BayBE Package"

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          python -m pip install unittest-xml-reporting pytest-azurepipelines
        displayName: Install Code Coverage Requirements"

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          cd $(System.DefaultWorkingDirectory)
          touch ./tests/__init__.py
          touch ./tests/serialization/__init__.py
          pytest -v -p no:warnings --cov=baybe --cov-report=xml --junit-xml $(System.DefaultWorkingDirectory)/test-results.xml --cov-report=html ./tests
        displayName: Run PyTest

      - task: PublishCodeCoverageResults@1
        displayName: Publish Coverage Report
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/htmlcov

      # Fail if overall coverage is below 70%
      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          coverage report --fail-under=70
        displayName: Assert Overall Coverage

      # Fail if any individual coverage is below 50%
      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          coverage report | grep -E -o '[0-9]+%' | tr -d '%' | sed '$d' | awk '{if ($1<50) exit 1 }'  
        displayName: Assert Individual Coverage

- stage: Lint
  displayName: Format, Lint, Asserts

  jobs:
    - job: "Lint"

      pool:
        vmImage: ubuntu-20.04

      variables:
        CONDA_ENV: baybe
        CONDA_HOME: /usr/share/miniconda/envs/$(CONDA_ENV)/
        CONDA_ROOT: /usr/share/miniconda/

      steps:
      - checkout: self

      - script: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add Conda to PATH

      - task: Cache@2
        displayName: Use Cached Conda Env
        inputs:
          key: conda | environment.yml
          path: $(CONDA_HOME)
          cacheHitVar: CONDA_CACHE_RESTORED

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
        displayName: Install Micromamba

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba create -y --file environment.yml
        displayName: Create Conda Env If Not Cached
        condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          ufmt check .
        displayName: "Run ufmt Formatter"

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          flake8
        displayName: "Run flake8 Linter"

      - script: |
          export MAMBA_ROOT_PREFIX=$(CONDA_ROOT)
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate $(CONDA_ENV)
          pylint . --recursive=yes
        displayName: "Run PyLint Linter"

    - job: "Changelog"

      pool:
        vmImage: ubuntu-20.04

      steps:
        - script: |
            NUM_ADDED=`git diff --numstat origin/main HEAD CHANGELOG.md | cut -d$'\t' -f1`
            echo "Changelog differences: $NUM_ADDED"
            if [ "$NUM_ADDED" -gt "0" ]; then
              echo "SUCCESS"
              exit 0
            else
              echo "ERROR - Nothing has been added to CHANGELOG.md"
              exit 1
            fi
          continueOnError: false
          condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
          displayName: Assert Changelog Edit

- stage: Release  # taken from foundry-local
  displayName: Publish package
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')

  jobs:
    - job: "Release"

      pool:
        vmImage: ubuntu-20.04

      steps:
        - task: PipAuthenticate@1
          inputs:
            artifactFeeds: 'artifacts' # Reactivate once upstream is up to date
            # Setting this variable to "true" will force pip to get distributions from official python registry first and fallback to feeds mentioned above if distributions are not found there.
            onlyAddExtraIndex: true
          displayName: 'Pip Authenticate'

        - script: |
            pip wheel . --no-deps --wheel-dir dist
            ls -lat dist
          displayName: 'Create Wheel'

        - script: |
            WHL_PATH=$( find dist -name "*.whl")
            echo $WHL_PATH
            echo "##vso[task.setvariable variable=whlName]$WHL_PATH"
          displayName: 'Get whl Filename'

        - publish: $(System.DefaultWorkingDirectory)/$(whlName)
          artifact: baybe_pipeline_snapshot
          displayName: 'Upload Snapshot Artifact'

        # publish on tagged build
        - script: |
            pip install twine
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Install Twine"

        - task: TwineAuthenticate@1
          inputs:
            artifactFeed: artifacts
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Authenticate"

        # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pypi?view=azure-devops&tabs=yaml
        - script: |
            echo Uploading $(whlName)
            cat $(PYPIRC_PATH)
            twine upload -r artifacts --config-file $(PYPIRC_PATH) --verbose $(whlName)
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Upload"