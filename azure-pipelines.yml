# Format and lint code

trigger:
  branches:
    include:
    - main
    - refs/tags/*

stages:

- stage: Lint
  displayName: Format and lint code

  jobs:
    - job: "Lint"

      pool:
        vmImage: ubuntu-20.04

      variables:
        CONDA_ENV: baybe
        CONDA_HOME: /usr/share/miniconda/envs/$(CONDA_ENV)/

      steps:
      - checkout: self

      - script: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH

      - task: Cache@2
        displayName: Use cached conda environment
        inputs:
          key: conda | environment.yml
          path: $(CONDA_HOME)
          cacheHitVar: CONDA_CACHE_RESTORED

      - script: |
          conda install --yes -c conda-forge mamba
          mamba env create --file environment.yml
        displayName: Create conda environment (if not restored from cache)
        condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

      - script: |
          source activate $(CONDA_ENV)
          ufmt check .
        displayName: "Run ufmt code formatter"

      - script: |
          source activate $(CONDA_ENV)
          flake8
        displayName: "Run flake8 code linter"

      - script: |
          source activate $(CONDA_ENV)
          pylint . --recursive=yes
        displayName: "Run pylint code linter"

- stage: Release  # taken from foundry-local
  displayName: Push new package version to Azure

  jobs:
    - job: "Release"

      pool:
        vmImage: ubuntu-20.04

      steps:
        - task: PipAuthenticate@1
          inputs:
            artifactFeeds: 'artifacts' # Reactivate once upstream is up to date
            # Setting this variable to "true" will force pip to get distributions from official python registry first and fallback to feeds mentioned above if distributions are not found there.
            onlyAddExtraIndex: true
          displayName: 'Pip Authenticate'

        - script: |
            pip wheel . --no-deps --wheel-dir dist
            ls -lat dist
          displayName: 'Run pip wheel .'

        - script: |
            WHL_PATH=$( find dist -name "*.whl")
            echo $WHL_PATH
            echo "##vso[task.setvariable variable=whlName]$WHL_PATH"
          displayName: 'Get whl filename'

        - publish: $(System.DefaultWorkingDirectory)/$(whlName)
          artifact: baybe_pipeline_snapshot
          displayName: 'Upload snapshot artifact'

        # publish on tagged build
        - script: |
            pip install twine
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Run pip install twine"

        - task: TwineAuthenticate@1
          inputs:
            artifactFeed: artifacts
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Authenticate"

        # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pypi?view=azure-devops&tabs=yaml
        - script: |
            echo Uploading $(whlName)
            cat $(PYPIRC_PATH)
            twine upload -r artifacts --config-file $(PYPIRC_PATH) --verbose $(whlName)
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Upload"

- stage: Changelog
  displayName: Assert changelog entry exists

  jobs:
    - job: "Changelog"

      pool:
        vmImage: ubuntu-20.04

      steps:
        - script: |
            CURRENT_COMMIT=`git rev-parse HEAD`
            git checkout main
            git checkout $CURRENT_COMMIT
            NUM_ADDED=`git diff --numstat main CHANGELOG.md | cut -d$'\t' -f1`
            echo $NUM_ADDED
            if [ "$NUM_ADDED" -gt "0" ]; then
              echo "$NUM_ADDED lines have been added to CHANGELOG.md"
              exit 0
            else
              echo "Nothing has been added to CHANGELOG.md"
              exit 1
            fi
          continueOnError: false