# Formatting, linting, testing, and code release

trigger:
  branches:
    include:
    - main
    - refs/tags/*

variables:
  coverage_overall_threshold: 70
  coverage_individual_threshold: 50

stages:

- stage: Lint
  displayName: "Format, Lint, Asserts"

  jobs:
    - job: "Lint"

      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.8:
            python.version: '3.8.x'
            tox.env: 'py38'
          Py3.9:
            python.version: '3.9.x'
            tox.env: 'py39'
          Py3.10:
            python.version: '3.10.x'
            tox.env: 'py310'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox
          tox -e lint
        displayName: "Pre-commit linter/formatter stack"

    - job: "Lint_Optional"
      displayName: "Lint (Optional)"
      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.11:
            python.version: '3.11.x'
            tox.env: 'py311'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox
          tox -e lint
        displayName: "Pre-commit linter/formatter stack"
        continueOnError: true

    - job: "Audit"

      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.8:
            python.version: '3.8.x'
            tox.env: 'py38'
          Py3.9:
            python.version: '3.9.x'
            tox.env: 'py39'
          Py3.10:
            python.version: '3.10.x'
            tox.env: 'py310'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox
          tox -e audit
        displayName: "Pip-audit"

    - job: "Audit_Optional"
      displayName: "Audit (Optional)"
      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.11:
            python.version: '3.11.x'
            tox.env: 'py311'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox
          tox -e audit
        displayName: "Pip-audit"
        continueOnError: true

    - job: "Changelog"
      condition: |
        and(
        ne(variables['Build.SourceBranch'], 'refs/heads/main'), 
        not(startsWith(variables['build.sourceBranch'], 'refs/tags/'))
        )
      pool:
        vmImage: ubuntu-20.04

      steps:
        - script: |
            NUM_ADDED=`git diff --numstat origin/main HEAD CHANGELOG.md | cut -d$'\t' -f1`
            echo "Changelog differences: $NUM_ADDED"
            if [ "$NUM_ADDED" -gt "0" ]; then
              echo "SUCCESS"
              exit 0
            else
              echo "ERROR - Nothing has been added to CHANGELOG.md"
              exit 1
            fi
          displayName: "Assert Changelog Edit"


- stage: Unit_Tests
  displayName: "Unit Tests"

  jobs:
    - job: "PyTest_full"
      displayName: "Pytest (full)"
      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.8:
            python.version: '3.8.x'
            tox.env: 'py38'
          Py3.9:
            python.version: '3.9.x'
            tox.env: 'py39'
          Py3.10:
            python.version: '3.10.x'
            tox.env: 'py310'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox unittest-xml-reporting pytest-azurepipelines
          tox -e fulltest-$(tox.env) -- --cov-report=xml --junit-xml $(System.DefaultWorkingDirectory)/junit.xml
        displayName: "PyTest"

      # Fail if overall coverage is too low
      - script: |
          pip install coverage
          coverage report --fail-under=$(coverage_overall_threshold)
        displayName: "Assert Overall Coverage"

      # Fail if any individual coverage is too low
      - script: |
          pip install coverage
          coverage report |
          grep -E -o '[0-9]+%' |
          tr -d '%' |
          sed '$d' |
          awk '{if ($1<$(coverage_individual_threshold)) exit 1 }'
        displayName: "Assert Individual Coverage"

      # Publish code coverage for Python38
      - task: PublishCodeCoverageResults@1
        condition: eq(variables['tox.env'], 'py38')
        displayName: "Publish Coverage Report"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
          #reportDirectory: $(System.DefaultWorkingDirectory)/**/htmlcov

      - task: PublishTestResults@2
        condition: eq(variables['tox.env'], 'py38')
        displayName: "Publish Test Results"
        inputs:
          testResultsFiles: $(System.DefaultWorkingDirectory)/junit.xml
          #testRunTitle: 'Rest results for Python $(python.version)'

    - job: "PyTest_Optional"
      displayName: "Pytest (full, optional)"
      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.11:
            python.version: '3.11.x'
            tox.env: 'py311'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox unittest-xml-reporting pytest-azurepipelines
          tox -e fulltest-$(tox.env) -- --cov-report=xml --junit-xml $(System.DefaultWorkingDirectory)/junit.xml
        displayName: "PyTest"
        continueOnError: true

      # Fail if overall coverage is too low
      - script: |
          pip install coverage
          coverage report --fail-under=$(coverage_overall_threshold)
        displayName: "Assert Overall Coverage"
        continueOnError: true

      # Fail if any individual coverage is too low
      - script: |
          pip install coverage
          coverage report |
          grep -E -o '[0-9]+%' |
          tr -d '%' |
          sed '$d' |
          awk '{if ($1<$(coverage_individual_threshold)) exit 1 }'
        displayName: "Assert Individual Coverage"
        continueOnError: true

    - job: "PyTest_Core"
      displayName: "Pytest (core)"
      pool:
        vmImage: ubuntu-20.04

      strategy:
        matrix:
          Py3.8:
            python.version: '3.8.x'
            tox.env: 'py38'

      steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Use Python $(python.version)'

      - script: |
          pip install tox unittest-xml-reporting pytest-azurepipelines
          tox -e coretest-$(tox.env) -- --cov-report=xml --junit-xml $(System.DefaultWorkingDirectory)/junit.xml
        displayName: "PyTest"


- stage: Release  # taken from foundry-local
  displayName: "Publish package"
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  jobs:
    - job: "Release"

      pool:
        vmImage: ubuntu-20.04

      steps:
        - task: PipAuthenticate@1
          inputs:
            artifactFeeds: "artifacts" # Reactivate once upstream is up to date
            # Setting this variable to "true" will force pip to get distributions from official python registry first and fallback to feeds mentioned above if distributions are not found there.
            onlyAddExtraIndex: true
          displayName: "Pip Authenticate"

        - script: |
            pip wheel . --no-deps --wheel-dir dist
            ls -lat dist
          displayName: "Create Wheel"

        - script: |
            WHL_PATH=$( find dist -name "*.whl")
            echo $WHL_PATH
            echo "##vso[task.setvariable variable=whlName]$WHL_PATH"
          displayName: "Get whl Filename"

        - publish: $(System.DefaultWorkingDirectory)/$(whlName)
          artifact: baybe_pipeline_snapshot
          displayName: "Upload Snapshot Artifact"

        # publish on tagged build
        - script: |
            pip install twine
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Install Twine"

        - task: TwineAuthenticate@1
          inputs:
            artifactFeed: artifacts
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Authenticate"

        # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pypi?view=azure-devops&tabs=yaml
        - script: |
            echo Uploading $(whlName)
            cat $(PYPIRC_PATH)
            twine upload -r artifacts --config-file $(PYPIRC_PATH) --verbose $(whlName)
          condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          displayName: "Twine Upload"