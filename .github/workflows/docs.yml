name: Documentation

on:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:  # Allow manually triggering the workflow


concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-python@v5
        with: {python-version: "3.10"}
      - name: Check for Hotfix
        id: hotfix
        run: |
          pip install packaging
          git fetch --tags
          tags=$(git tag -l)
          echo "Tags: $tags"
          HOTFIX_VERSION=$(python docs/scripts/get_version.py "$tags" "${{github.event.release.tag_name}}")
          echo "HOTFIX_VERSION=${HOTFIX_VERSION}" >> $GITHUB_OUTPUT
      - name: Verify setting of hotfix
        run: |
          echo "The value of HOTFIX_VERSION is ${{ steps.hotfix.outputs.HOTFIX_VERSION }}"
      - name: Install tox
        run: pip install tox-uv
      - name: Build Docs
        run: tox -e docs-py310 -- -r
      - name: Configure sphinx bot for pushing and fetch branches
        run: |
            git config --local user.email "sphinx-upload[bot]@users.noreply.github.com"
            git config --local user.name "sphinx-upload[bot]"
            git fetch origin main:main
            git show main:docs/scripts/add_version.py > add_version.py
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages
      - if: ${{ steps.hotfix.outputs.HOTFIX_VERSION == 'false'}}
        name: Copy latest folder to gh-pages branch and update branch
        run: |
            if [ -d "latest" ]; then
              rm -rf latest
            fi
            mkdir ./latest
            cp -r docs/build/* ./latest
            echo "Successfully copied into latest"
            python add_version.py html latest
            git add -f latest
      - if: ${{ github.event_name == 'release' }}
        name: Create numbered version
        run: |
            FOLDER=${{github.event.release.tag_name}}
            mkdir ./$FOLDER
            cp -r docs/build/* ./$FOLDER
            python add_version.py selector_page $FOLDER
            python add_version.py html $FOLDER
            rm add_version.py
            git add -f $FOLDER
      - if: ${{ (github.event_name == 'release') && (steps.hotfix.outputs.HOTFIX_VERSION == 'false') }}
        name: Copy stable folder to gh-pages branch when releasing
        run: |
            FOLDER=${{github.event.release.tag_name}}
            mkdir ./$FOLDER
            cp -r docs/build/* ./$FOLDER
            if [ -d "stable" ]; then
              rm -rf stable
            fi
            mkdir ./stable
            cp -rv docs/build/* ./stable
            python add_version.py html stable
            git add -f stable
            rm add_version.py
      - name: Create git commit
        run: | 
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            git commit -m "Sphinx documentation for ${git_hash}"
      - name: Push changes to gh-pages branch
        run: git push origin gh-pages
