Search.setIndex({"alltitles": {"Acquisition function": [[283, "acquisition-function"]], "AcquisitionFunction": [[16, "acquisitionfunction"]], "Added": [[315, "added"], [315, "id2"], [315, "id6"], [315, "id13"], [315, "id18"], [315, "id24"], [315, "id30"], [315, "id34"], [315, "id38"], [315, "id42"], [315, "id47"], [315, "id51"], [315, "id54"], [315, "id58"], [315, "id62"], [315, "id66"], [315, "id69"], [315, "id73"], [315, "id77"], [315, "id81"], [315, "id85"], [315, "id91"], [315, "id94"]], "Addendum: Description of transformation functions": [[299, "addendum-description-of-transformation-functions"]], "Adding measurements": [[319, "adding-measurements"]], "Additional Options for Discrete Search Spaces": [[323, null]], "Advanced Example - Chemical Substances": [[313, "advanced-example-chemical-substances"]], "Architecture definition": [[295, "architecture-definition"]], "Authors": [[313, "authors"], [317, "authors"]], "Automatic field conversion": [[325, "automatic-field-conversion"]], "Available models": [[327, "available-models"]], "Available recommenders suitable for initial recommendation": [[283, "available-recommenders-suitable-for-initial-recommendation"]], "Available surrogate models": [[283, "available-surrogate-models"]], "Backtesting": [[273, "backtesting"], [310, "backtesting"]], "Basic creation": [[319, "basic-creation"]], "Basic example for using BayBE": [[282, "basic-example-for-using-baybe"]], "Basic string assembly": [[325, "basic-string-assembly"]], "Basics": [[281, "basics"], [319, "basics"]], "Batch optimization": [[319, null]], "BayBE \u2014 A Bayesian Back End for Design of Experiments": [[313, "baybe-a-bayesian-back-end-for-design-of-experiments"]], "Bayesian Recommenders": [[323, "bayesian-recommenders"]], "BayesianLinearSurrogate": [[190, "bayesianlinearsurrogate"]], "BayesianRecommender": [[128, "bayesianrecommender"]], "Building from the Product of Parameter Values": [[324, "building-from-the-product-of-parameter-values"], [324, "id2"]], "Caching of recommendations": [[319, "caching-of-recommendations"]], "Campaign": [[23, "campaign"]], "Campaigns": [[319, "campaigns"]], "CategoricalEncoding": [[93, "categoricalencoding"]], "CategoricalParameter": [[88, "categoricalparameter"], [322, "categoricalparameter"]], "Changed": [[315, "changed"], [315, "id3"], [315, "id7"], [315, "id10"], [315, "id14"], [315, "id19"], [315, "id25"], [315, "id31"], [315, "id35"], [315, "id39"], [315, "id43"], [315, "id48"], [315, "id52"], [315, "id55"], [315, "id59"], [315, "id63"], [315, "id67"], [315, "id70"], [315, "id74"], [315, "id78"], [315, "id82"], [315, "id86"]], "Changelog": [[315, "changelog"]], "Clustering Recommenders": [[323, "clustering-recommenders"]], "Code Design": [[316, "code-design"]], "Comparing recommendations in both objects": [[306, "comparing-recommendations-in-both-objects"]], "Condition": [[30, "condition"]], "Conditions": [[320, "conditions"]], "Constraint": [[26, "constraint"]], "Constraints": [[320, "constraints"]], "Constraints Continuous": [[284, "constraints-continuous"]], "Constraints Discrete": [[287, "constraints-discrete"]], "Construct the campaign and run some iterations": [[285, "construct-the-campaign-and-run-some-iterations"], [286, "construct-the-campaign-and-run-some-iterations"]], "Constructing Full Search Spaces": [[324, "constructing-full-search-spaces"]], "Constructing a campaign and performing the simulation loop": [[280, "constructing-a-campaign-and-performing-the-simulation-loop"]], "Constructing campaigns": [[274, "constructing-campaigns"]], "Constructing campaigns for the simulation loop": [[275, "constructing-campaigns-for-the-simulation-loop"], [276, "constructing-campaigns-for-the-simulation-loop"], [277, "constructing-campaigns-for-the-simulation-loop"], [278, "constructing-campaigns-for-the-simulation-loop"], [279, "constructing-campaigns-for-the-simulation-loop"]], "Constructing from a Dataframe": [[324, "constructing-from-a-dataframe"], [324, "id1"], [324, "id3"]], "Constructing hybrid recommenders": [[304, "constructing-hybrid-recommenders"]], "Constructing the campaign and performing a recommendation": [[301, "constructing-the-campaign-and-performing-a-recommendation"], [302, "constructing-the-campaign-and-performing-a-recommendation"], [303, "constructing-the-campaign-and-performing-a-recommendation"], [304, "constructing-the-campaign-and-performing-a-recommendation"]], "Constructing the hybrid searchspace": [[278, "constructing-the-hybrid-searchspace"], [304, "constructing-the-hybrid-searchspace"]], "Continuous Constraints": [[320, "continuous-constraints"]], "Continuous Parameters": [[322, "continuous-parameters"]], "Continuous Subspaces": [[324, "continuous-subspaces"]], "ContinuousConstraint": [[27, "continuousconstraint"]], "ContinuousLinearEqualityConstraint": [[34, "continuouslinearequalityconstraint"], [320, "continuouslinearequalityconstraint"]], "ContinuousLinearInequalityConstraint": [[35, "continuouslinearinequalityconstraint"], [320, "continuouslinearinequalityconstraint"]], "ContinuousParameter": [[84, "continuousparameter"]], "Contributing to BayBE": [[316, "contributing-to-baybe"]], "Contributors": [[317, "contributors"], [317, "id1"]], "Convenience construction and implicit conversion": [[321, null]], "Convert model to onnx": [[296, "convert-model-to-onnx"]], "Create a surrogate model with a pretrained model": [[296, "create-a-surrogate-model-with-a-pretrained-model"]], "Create a surrogate model with custom model parameters": [[297, "create-a-surrogate-model-with-custom-model-parameters"]], "Create campaign": [[296, "create-campaign"]], "Creating a Simplex-Bound Discrete Subspace": [[324, "creating-a-simplex-bound-discrete-subspace"]], "Creating a campaign": [[319, "creating-a-campaign"]], "Creating a campaign from the configuration file": [[307, "creating-a-campaign-from-the-configuration-file"]], "Creating and printing the campaign": [[288, "creating-and-printing-the-campaign"], [289, "creating-and-printing-the-campaign"], [291, "creating-and-printing-the-campaign"], [292, "creating-and-printing-the-campaign"], [299, "creating-and-printing-the-campaign"]], "Creating multiple target object": [[280, "creating-multiple-target-object"]], "Creating the Objective": [[277, "creating-the-objective"]], "Creating the Optimization Objective": [[310, "creating-the-optimization-objective"], [311, "creating-the-optimization-objective"]], "Creating the Search Space": [[310, "creating-the-search-space"]], "Creating the Searchspace": [[311, "creating-the-searchspace"]], "Creating the campaign": [[283, "creating-the-campaign"], [297, "creating-the-campaign"], [306, "creating-the-campaign"]], "Creating the constraint": [[288, "creating-the-constraint"], [290, "creating-the-constraint"], [291, "creating-the-constraint"]], "Creating the constraints": [[289, "creating-the-constraints"], [292, "creating-the-constraints"]], "Creating the objective": [[299, "creating-the-objective"]], "Creating the objective object": [[280, "creating-the-objective-object"]], "Creating the recommender object": [[283, "creating-the-recommender-object"]], "Creating the searchspace": [[280, "creating-the-searchspace"]], "Creating the searchspace and the objective": [[274, "creating-the-searchspace-and-the-objective"], [275, "creating-the-searchspace-and-the-objective"], [276, "creating-the-searchspace-and-the-objective"], [279, "creating-the-searchspace-and-the-objective"], [285, "creating-the-searchspace-and-the-objective"], [286, "creating-the-searchspace-and-the-objective"], [288, "creating-the-searchspace-and-the-objective"], [289, "creating-the-searchspace-and-the-objective"], [290, "creating-the-searchspace-and-the-objective"], [291, "creating-the-searchspace-and-the-objective"], [292, "creating-the-searchspace-and-the-objective"], [301, "creating-the-searchspace-and-the-objective"], [302, "creating-the-searchspace-and-the-objective"], [303, "creating-the-searchspace-and-the-objective"]], "Creation from a JSON config": [[319, "creation-from-a-json-config"]], "Custom Surrogates": [[293, "custom-surrogates"]], "CustomDiscreteParameter": [[91, "customdiscreteparameter"], [322, "customdiscreteparameter"]], "CustomEncoding": [[94, "customencoding"]], "CustomONNXSurrogate": [[185, "customonnxsurrogate"]], "Dataframe deserialization": [[325, "dataframe-deserialization"]], "DefaultScaler": [[143, "defaultscaler"]], "Defining config dictionaries": [[308, "defining-config-dictionaries"]], "Defining the Optimization Objective": [[313, "defining-the-optimization-objective"]], "Defining the Search Space": [[313, "defining-the-search-space"]], "Defining the Tasks": [[310, "defining-the-tasks"], [311, "defining-the-tasks"]], "Defining the custom test function": [[302, "defining-the-custom-test-function"]], "Defining the targets": [[299, "defining-the-targets"]], "Defining the test function": [[274, "defining-the-test-function"], [275, "defining-the-test-function"], [280, "defining-the-test-function"], [285, "defining-the-test-function"], [286, "defining-the-test-function"], [301, "defining-the-test-function"], [303, "defining-the-test-function"]], "Defining the test function and the hybrid dimensions": [[304, "defining-the-test-function-and-the-hybrid-dimensions"]], "Defining the test function.": [[278, "defining-the-test-function"]], "Deprecations": [[315, "deprecations"], [315, "id16"], [315, "id22"], [315, "id28"], [315, "id45"]], "Deserialization from configuration strings": [[325, "deserialization-from-configuration-strings"]], "DesirabilityObjective": [[76, "desirabilityobjective"], [321, "desirabilityobjective"]], "Developer Tools": [[316, "developer-tools"]], "Discrete Constraints": [[320, "discrete-constraints"]], "Discrete Parameters": [[322, "discrete-parameters"]], "Discrete Subspaces": [[324, "discrete-subspaces"]], "DiscreteConstraint": [[28, "discreteconstraint"]], "DiscreteCustomConstraint": [[37, "discretecustomconstraint"], [320, "discretecustomconstraint"]], "DiscreteDependenciesConstraint": [[38, "discretedependenciesconstraint"], [320, "discretedependenciesconstraint"]], "DiscreteExcludeConstraint": [[39, "discreteexcludeconstraint"], [320, "discreteexcludeconstraint"]], "DiscreteLinkedParametersConstraint": [[40, "discretelinkedparametersconstraint"], [320, "discretelinkedparametersconstraint"]], "DiscreteNoLabelDuplicatesConstraint": [[41, "discretenolabelduplicatesconstraint"], [320, "discretenolabelduplicatesconstraint"]], "DiscreteParameter": [[85, "discreteparameter"]], "DiscretePermutationInvarianceConstraint": [[42, "discretepermutationinvarianceconstraint"], [320, "discretepermutationinvarianceconstraint"]], "DiscreteProductConstraint": [[43, "discreteproductconstraint"]], "DiscreteSumConstraint": [[44, "discretesumconstraint"]], "DiscreteSumConstraint and DiscreteProductConstraint": [[320, "discretesumconstraint-and-discreteproductconstraint"]], "Dummy": [[223, "dummy"]], "Equivalent copies": [[325, null]], "Example Searchspace and objective parameters": [[283, "example-searchspace-and-objective-parameters"]], "Example for constraints in a hybrid searchspace": [[285, "example-for-constraints-in-a-hybrid-searchspace"]], "Example for creating campaigns from configs": [[307, "example-for-creating-campaigns-from-configs"]], "Example for custom parameter passing in surrogate models": [[297, "example-for-custom-parameter-passing-in-surrogate-models"]], "Example for full simulation loop using a custom analytical test function": [[275, "example-for-full-simulation-loop-using-a-custom-analytical-test-function"]], "Example for full simulation loop using a custom analytical test function in a hybrid": [[278, "example-for-full-simulation-loop-using-a-custom-analytical-test-function-in-a-hybrid"]], "Example for full simulation loop using a table-based lookup mechanism": [[277, "example-for-full-simulation-loop-using-a-table-based-lookup-mechanism"]], "Example for full simulation loop using a table-based lookup mechanism with incomplete": [[279, "example-for-full-simulation-loop-using-a-table-based-lookup-mechanism-with-incomplete"]], "Example for full simulation loop using a table-based lookup mechanism with initial": [[276, "example-for-full-simulation-loop-using-a-table-based-lookup-mechanism-with-initial"]], "Example for full simulation loop using the multi target mode for custom analytic": [[280, "example-for-full-simulation-loop-using-the-multi-target-mode-for-custom-analytic"]], "Example for linear constraints in a continuous searchspace": [[286, "example-for-linear-constraints-in-a-continuous-searchspace"]], "Example for surrogate model with a custom architecture using pytorch": [[295, "example-for-surrogate-model-with-a-custom-architecture-using-pytorch"]], "Example for surrogate model with a custom architecture using sklearn": [[294, "example-for-surrogate-model-with-a-custom-architecture-using-sklearn"]], "Example for surrogate model with a custom pretrained model": [[296, "example-for-surrogate-model-with-a-custom-pretrained-model"]], "Example for the serialization of a campaign": [[306, "example-for-the-serialization-of-a-campaign"]], "Example for using a custom BoTorch test function in a continuous searchspace": [[302, "example-for-using-a-custom-botorch-test-function-in-a-continuous-searchspace"]], "Example for using a mixture use case in a discrete searchspace": [[291, "example-for-using-a-mixture-use-case-in-a-discrete-searchspace"]], "Example for using a synthetic BoTorch test function in a continuous searchspace": [[301, "example-for-using-a-synthetic-botorch-test-function-in-a-continuous-searchspace"]], "Example for using a synthetic BoTorch test function in a discrete searchspace": [[303, "example-for-using-a-synthetic-botorch-test-function-in-a-discrete-searchspace"]], "Example for using custom constraints in discrete searchspaces": [[288, "example-for-using-custom-constraints-in-discrete-searchspaces"]], "Example for using dependency constraints in discrete searchspaces": [[289, "example-for-using-dependency-constraints-in-discrete-searchspaces"]], "Example for using different strategies": [[283, "example-for-using-different-strategies"]], "Example for using exclusion constraints in discrete searchspaces": [[290, "example-for-using-exclusion-constraints-in-discrete-searchspaces"]], "Example for using exclusion constraints incorporating sums and products": [[292, "example-for-using-exclusion-constraints-incorporating-sums-and-products"]], "Example for using synthetic test functions in hybrid spaces": [[304, "example-for-using-synthetic-test-functions-in-hybrid-spaces"]], "Example for using the multi target mode for the objective": [[299, "example-for-using-the-multi-target-mode-for-the-objective"]], "Example for validation of a config file": [[308, "example-for-validation-of-a-config-file"]], "Examples": [[312, "examples"]], "ExpectedImprovement": [[3, "expectedimprovement"]], "Experiment Setup": [[294, "experiment-setup"], [295, "experiment-setup"], [296, "experiment-setup"], [297, "experiment-setup"]], "Experiment setup": [[288, "experiment-setup"], [289, "experiment-setup"], [290, "experiment-setup"], [291, "experiment-setup"], [292, "experiment-setup"], [306, "experiment-setup"]], "Experiment setup and creating the searchspace": [[299, "experiment-setup-and-creating-the-searchspace"]], "Extending BayBE\u2019s Functionality": [[316, "extending-baybe-s-functionality"]], "FPSRecommender": [[140, "fpsrecommender"]], "Fixed": [[315, "fixed"], [315, "id4"], [315, "id8"], [315, "id15"], [315, "id20"], [315, "id26"], [315, "id32"], [315, "id40"], [315, "id44"], [315, "id49"], [315, "id56"], [315, "id60"], [315, "id64"], [315, "id71"], [315, "id75"], [315, "id79"], [315, "id83"], [315, "id87"], [315, "id89"], [315, "id92"]], "From GitHub": [[313, "from-github"]], "From Local Clone": [[313, "from-local-clone"]], "From Package Index": [[313, "from-package-index"]], "From the Default Constructor": [[324, "from-the-default-constructor"]], "Further information": [[319, "further-information"]], "GammaPrior": [[68, "gammaprior"]], "GaussianMixtureClusteringRecommender": [[135, "gaussianmixtureclusteringrecommender"]], "GaussianProcessSurrogate": [[188, "gaussianprocesssurrogate"]], "General Information": [[323, "general-information"]], "General Workflow": [[316, "general-workflow"]], "Generating Lookup Tables": [[310, "generating-lookup-tables"], [311, "generating-lookup-tables"]], "Getting a recommendation and adding measurements": [[282, "getting-a-recommendation-and-adding-measurements"]], "Getting recommendations": [[319, "getting-recommendations"]], "How to avoid": [[314, "how-to-avoid"]], "Hybrid constraints": [[320, null]], "Imports": [[274, "imports"], [310, "imports"], [311, "imports"]], "Inclusion of initial data": [[276, "inclusion-of-initial-data"]], "Indices and Tables": [[313, "indices-and-tables"]], "Installation": [[313, "installation"]], "Interval": [[258, "interval"]], "Invoking alternative constructors": [[325, "invoking-alternative-constructors"]], "Iterate with recommendations and measurements": [[296, "iterate-with-recommendations-and-measurements"], [297, "iterate-with-recommendations-and-measurements"]], "JSON de-/serialization": [[325, "json-de-serialization"]], "KMeansClusteringRecommender": [[136, "kmeansclusteringrecommender"]], "Kernel": [[61, "kernel"]], "Known Issues": [[313, "known-issues"]], "License": [[313, "license"], [318, "license"]], "Limitations": [[328, "limitations"]], "Links for documentation": [[297, "links-for-documentation"]], "LogExpectedImprovement": [[4, "logexpectedimprovement"]], "Lookup functionality and data creation": [[276, "lookup-functionality-and-data-creation"], [277, "lookup-functionality-and-data-creation"], [279, "lookup-functionality-and-data-creation"]], "MATCH mode": [[328, "match-mode"]], "MIN and MAX mode": [[328, "min-and-max-mode"]], "Mandatory target bounds": [[321, null]], "Manual verification of the constraint": [[288, "manual-verification-of-the-constraint"], [291, "manual-verification-of-the-constraint"]], "Manual verification of the constraints": [[289, "manual-verification-of-the-constraints"], [290, "manual-verification-of-the-constraints"], [292, "manual-verification-of-the-constraints"]], "MaternKernel": [[63, "maternkernel"]], "MeanPredictionSurrogate": [[192, "meanpredictionsurrogate"]], "Meta Recommenders": [[323, "meta-recommenders"]], "MetaRecommender": [[116, "metarecommender"]], "Metadata": [[324, "metadata"]], "Model Outputs": [[296, "model-outputs"], [297, "model-outputs"]], "Multi Target": [[298, "multi-target"]], "NGBoostSurrogate": [[194, "ngboostsurrogate"]], "NaiveHybridSpaceRecommender": [[122, "naivehybridspacerecommender"]], "Necessary imports": [[294, "necessary-imports"], [295, "necessary-imports"], [296, "necessary-imports"], [297, "necessary-imports"], [302, "necessary-imports"], [306, "necessary-imports"], [307, "necessary-imports"], [308, "necessary-imports"]], "Necessary imports for this example": [[275, "necessary-imports-for-this-example"], [276, "necessary-imports-for-this-example"], [277, "necessary-imports-for-this-example"], [278, "necessary-imports-for-this-example"], [279, "necessary-imports-for-this-example"], [280, "necessary-imports-for-this-example"], [282, "necessary-imports-for-this-example"], [283, "necessary-imports-for-this-example"], [285, "necessary-imports-for-this-example"], [286, "necessary-imports-for-this-example"], [288, "necessary-imports-for-this-example"], [289, "necessary-imports-for-this-example"], [290, "necessary-imports-for-this-example"], [291, "necessary-imports-for-this-example"], [292, "necessary-imports-for-this-example"], [299, "necessary-imports-for-this-example"], [301, "necessary-imports-for-this-example"], [303, "necessary-imports-for-this-example"], [304, "necessary-imports-for-this-example"]], "Nesting objects": [[325, "nesting-objects"]], "NonPredictiveRecommender": [[133, "nonpredictiverecommender"]], "NumericalContinuousParameter": [[98, "numericalcontinuousparameter"], [322, "numericalcontinuousparameter"]], "NumericalDiscreteParameter": [[99, "numericaldiscreteparameter"], [322, "numericaldiscreteparameter"]], "NumericalTarget": [[211, "numericaltarget"], [328, "numericaltarget"]], "Objective": [[73, "objective"], [321, "objective"]], "Optional Dependencies": [[313, "optional-dependencies"]], "Optional dependency": [[322, null]], "Optional: Defining the Optimization Strategy": [[313, "optional-defining-the-optimization-strategy"]], "Other parameters": [[283, "other-parameters"]], "PAMClusteringRecommender": [[137, "pamclusteringrecommender"]], "Parameter": [[86, "parameter"]], "Parameter encoding": [[322, null]], "Parameter names": [[322, null]], "Parameter tolerances": [[319, null]], "ParameterEncoding": [[95, "parameterencoding"]], "Parameters": [[322, "parameters"]], "Parameters for a full simulation loop": [[274, "parameters-for-a-full-simulation-loop"], [275, "parameters-for-a-full-simulation-loop"], [276, "parameters-for-a-full-simulation-loop"], [277, "parameters-for-a-full-simulation-loop"], [278, "parameters-for-a-full-simulation-loop"], [279, "parameters-for-a-full-simulation-loop"], [280, "parameters-for-a-full-simulation-loop"]], "PartialAcquisitionFunction": [[18, "partialacquisitionfunction"]], "Performing some iterations": [[299, "performing-some-iterations"]], "Performing the simulation loop": [[274, "performing-the-simulation-loop"], [275, "performing-the-simulation-loop"], [276, "performing-the-simulation-loop"]], "PosteriorMean": [[5, "posteriormean"]], "Prior": [[66, "prior"]], "ProbabilityOfImprovement": [[6, "probabilityofimprovement"]], "Pure Recommenders": [[323, "pure-recommenders"]], "PureRecommender": [[125, "purerecommender"]], "PyCharm vs. exceptiongroup": [[314, "pycharm-vs-exceptiongroup"]], "Quick Start": [[313, "quick-start"]], "RandomForestSurrogate": [[196, "randomforestsurrogate"]], "RandomRecommender": [[141, "randomrecommender"]], "RecommenderProtocol": [[111, "recommenderprotocol"]], "Recommenders": [[323, "recommenders"]], "Removed": [[315, "removed"], [315, "id11"], [315, "id21"], [315, "id27"], [315, "id36"]], "Representation of Data within Discrete Subspaces": [[324, "representation-of-data-within-discrete-subspaces"]], "Restricting Search Spaces Using Constraints": [[324, "restricting-search-spaces-using-constraints"]], "Reversing the inequality": [[320, null]], "Run DOE iterations with custom surrogate": [[294, "run-doe-iterations-with-custom-surrogate"], [295, "run-doe-iterations-with-custom-surrogate"]], "SKLearnClusteringRecommender": [[138, "sklearnclusteringrecommender"]], "Sampling Recommenders": [[323, "sampling-recommenders"]], "Scalarizer": [[79, "scalarizer"]], "Scaler": [[144, "scaler"]], "Search Spaces": [[324, "search-spaces"]], "SearchSpace": [[149, "searchspace"]], "SearchSpaceType": [[150, "searchspacetype"]], "Searchspaces": [[300, "searchspaces"]], "Seeing Transfer Learning in Action": [[329, "seeing-transfer-learning-in-action"]], "Sequential vs. parallel experimentation": [[319, null]], "SequentialGreedyRecommender": [[130, "sequentialgreedyrecommender"]], "SequentialMetaRecommender": [[118, "sequentialmetarecommender"]], "SerialMixin": [[168, "serialmixin"]], "Serialization": [[294, "serialization"], [295, "serialization"], [305, "serialization"], [319, "serialization"], [325, "serialization"]], "Serialization and de-serialization": [[306, "serialization-and-de-serialization"]], "Settings": [[310, "settings"], [311, "settings"]], "Setup": [[282, "setup"]], "Simulating Multiple Scenarios": [[326, "simulating-multiple-scenarios"]], "Simulating Transfer Learning": [[326, "simulating-transfer-learning"]], "Simulating a Single Experiment": [[326, "simulating-a-single-experiment"]], "Simulation": [[326, "simulation"]], "Simulation Loop": [[310, "simulation-loop"], [311, "simulation-loop"]], "Simulation loop using a BoTorch test function": [[274, "simulation-loop-using-a-botorch-test-function"]], "SingleTargetObjective": [[81, "singletargetobjective"], [321, "singletargetobjective"]], "StreamingSequentialMetaRecommender": [[119, "streamingsequentialmetarecommender"]], "SubSelectionCondition": [[31, "subselectioncondition"], [320, "subselectioncondition"]], "SubspaceContinuous": [[147, "subspacecontinuous"]], "SubspaceDiscrete": [[153, "subspacediscrete"]], "SubstanceEncoding": [[96, "substanceencoding"]], "SubstanceParameter": [[102, "substanceparameter"], [322, "substanceparameter"]], "Surrogate": [[183, "surrogate"]], "Surrogate Definition with BayBE Registration": [[294, "surrogate-definition-with-baybe-registration"], [295, "surrogate-definition-with-baybe-registration"]], "Surrogates": [[327, "surrogates"]], "Synchronizing Pull Requests": [[316, "synchronizing-pull-requests"]], "Target": [[206, "target"]], "TargetMode": [[208, "targetmode"]], "TargetTransformation": [[209, "targettransformation"]], "Targets": [[328, "targets"]], "TaskParameter": [[89, "taskparameter"], [322, "taskparameter"]], "Telemetry": [[313, "telemetry"]], "Terminology": [[325, null], [329, null]], "Terminology: What do we mean by \u201cSimulation\u201d?": [[326, "terminology-what-do-we-mean-by-simulation"]], "The Lookup Functionality": [[326, "the-lookup-functionality"]], "The Optimization Loop": [[313, "the-optimization-loop"]], "The Problem": [[314, "the-problem"]], "The configuration dictionary as a string": [[307, "the-configuration-dictionary-as-a-string"]], "The role of TaskParameter": [[329, "the-role-of-taskparameter"]], "The type field": [[325, "the-type-field"]], "ThresholdCondition": [[32, "thresholdcondition"], [320, "thresholdcondition"]], "Transfer Learning": [[309, "transfer-learning"], [311, "transfer-learning"], [329, "transfer-learning"]], "TwoPhaseMetaRecommender": [[120, "twophasemetarecommender"]], "Unreleased": [[315, "unreleased"]], "UpperConfidenceBound": [[7, "upperconfidencebound"]], "User guide": [[330, "user-guide"]], "Using Explicit Bounds": [[324, "using-explicit-bounds"]], "Using a Callable": [[326, "using-a-callable"]], "Using a Dataframe": [[326, "using-a-dataframe"]], "Using abbreviations": [[325, "using-abbreviations"]], "Using configuration instead": [[296, "using-configuration-instead"], [297, "using-configuration-instead"]], "Using custom models": [[327, "using-custom-models"]], "Using default values": [[325, "using-default-values"]], "Validation of model parameters": [[297, "validation-of-model-parameters"]], "Verification of the two dictionaries": [[308, "verification-of-the-two-dictionaries"]], "Verify the constraints": [[286, "verify-the-constraints"]], "When to encounter": [[314, "when-to-encounter"]], "Writing Docstrings": [[316, "writing-docstrings"]], "Writing attrs classes": [[316, "writing-attrs-classes"]], "[0.1.0] - 2022-10-01": [[315, "id93"]], "[0.2.0] - 2022-11-10": [[315, "id90"]], "[0.2.1] - 2022-12-01": [[315, "id88"]], "[0.2.2] - 2023-01-13": [[315, "id84"]], "[0.2.3] - 2023-03-14": [[315, "id80"]], "[0.2.4] - 2023-03-24": [[315, "id76"]], "[0.3.0] - 2023-06-27": [[315, "id72"]], "[0.3.1] - 2023-07-17": [[315, "id68"]], "[0.3.2] - 2023-07-24": [[315, "id65"]], "[0.4.0] - 2023-08-16": [[315, "id61"]], "[0.4.1] - 2023-08-23": [[315, "id57"]], "[0.4.2] - 2023-08-29": [[315, "id53"]], "[0.5.0] - 2023-09-15": [[315, "id50"]], "[0.5.1] - 2023-10-19": [[315, "id46"]], "[0.6.0] - 2023-11-17": [[315, "id41"]], "[0.6.1] - 2023-11-27": [[315, "id37"]], "[0.7.0] - 2023-12-04": [[315, "id33"]], "[0.7.1] - 2023-12-07": [[315, "id29"]], "[0.7.2] - 2024-01-24": [[315, "id23"]], "[0.7.3] - 2024-02-09": [[315, "id17"]], "[0.7.4] - 2024-02-28": [[315, "id12"]], "[0.8.0] - 2024-02-29": [[315, "id9"]], "[0.8.1] - 2024-03-11": [[315, "id5"]], "[0.8.2] - 2024-03-27": [[315, "id1"]], "baybe": [[0, "module-baybe"]], "baybe.acquisition": [[1, "module-baybe.acquisition"]], "baybe.acquisition.acqfs": [[2, "module-baybe.acquisition.acqfs"]], "baybe.acquisition.base": [[15, "module-baybe.acquisition.base"]], "baybe.acquisition.partial": [[17, "module-baybe.acquisition.partial"]], "baybe.acquisition.utils": [[19, "module-baybe.acquisition.utils"]], "baybe.acquisition.utils.convert_acqf": [[20, "baybe-acquisition-utils-convert-acqf"]], "baybe.acquisition.utils.str_to_acqf": [[21, "baybe-acquisition-utils-str-to-acqf"]], "baybe.campaign": [[22, "module-baybe.campaign"]], "baybe.constraints": [[24, "module-baybe.constraints"]], "baybe.constraints.base": [[25, "module-baybe.constraints.base"]], "baybe.constraints.conditions": [[29, "module-baybe.constraints.conditions"]], "baybe.constraints.continuous": [[33, "module-baybe.constraints.continuous"]], "baybe.constraints.discrete": [[36, "module-baybe.constraints.discrete"]], "baybe.constraints.validation": [[45, "module-baybe.constraints.validation"]], "baybe.constraints.validation.validate_constraints": [[46, "baybe-constraints-validation-validate-constraints"]], "baybe.exceptions": [[47, "module-baybe.exceptions"]], "baybe.exceptions.DeprecationError": [[48, "baybe-exceptions-deprecationerror"]], "baybe.exceptions.EmptySearchSpaceError": [[49, "baybe-exceptions-emptysearchspaceerror"]], "baybe.exceptions.IncompatibleSearchSpaceError": [[50, "baybe-exceptions-incompatiblesearchspaceerror"]], "baybe.exceptions.NoMCAcquisitionFunctionError": [[51, "baybe-exceptions-nomcacquisitionfunctionerror"]], "baybe.exceptions.NoRecommendersLeftError": [[52, "baybe-exceptions-norecommenderslefterror"]], "baybe.exceptions.NotEnoughPointsLeftError": [[53, "baybe-exceptions-notenoughpointslefterror"]], "baybe.exceptions.NothingToSimulateError": [[54, "baybe-exceptions-nothingtosimulateerror"]], "baybe.exceptions.NumericalUnderflowError": [[55, "baybe-exceptions-numericalunderflowerror"]], "baybe.exceptions.OptionalImportError": [[56, "baybe-exceptions-optionalimporterror"]], "baybe.exceptions.TestException": [[57, "baybe-exceptions-testexception"]], "baybe.exceptions.UnidentifiedSubclassError": [[58, "baybe-exceptions-unidentifiedsubclasserror"]], "baybe.kernels": [[59, "module-baybe.kernels"]], "baybe.kernels.base": [[60, "module-baybe.kernels.base"]], "baybe.kernels.basic": [[62, "module-baybe.kernels.basic"]], "baybe.kernels.priors": [[64, "module-baybe.kernels.priors"]], "baybe.kernels.priors.base": [[65, "module-baybe.kernels.priors.base"]], "baybe.kernels.priors.basic": [[67, "module-baybe.kernels.priors.basic"]], "baybe.objective": [[69, "module-baybe.objective"]], "baybe.objective.Objective": [[70, "baybe-objective-objective"]], "baybe.objectives": [[71, "module-baybe.objectives"]], "baybe.objectives.base": [[72, "module-baybe.objectives.base"]], "baybe.objectives.base.to_objective": [[74, "baybe-objectives-base-to-objective"]], "baybe.objectives.desirability": [[75, "module-baybe.objectives.desirability"]], "baybe.objectives.desirability.scalarize": [[77, "baybe-objectives-desirability-scalarize"]], "baybe.objectives.enum": [[78, "module-baybe.objectives.enum"]], "baybe.objectives.single": [[80, "module-baybe.objectives.single"]], "baybe.parameters": [[82, "module-baybe.parameters"]], "baybe.parameters.base": [[83, "module-baybe.parameters.base"]], "baybe.parameters.categorical": [[87, "module-baybe.parameters.categorical"]], "baybe.parameters.custom": [[90, "module-baybe.parameters.custom"]], "baybe.parameters.enum": [[92, "module-baybe.parameters.enum"]], "baybe.parameters.numerical": [[97, "module-baybe.parameters.numerical"]], "baybe.parameters.substance": [[100, "module-baybe.parameters.substance"]], "baybe.parameters.substance.Smiles": [[101, "baybe-parameters-substance-smiles"]], "baybe.parameters.utils": [[103, "module-baybe.parameters.utils"]], "baybe.parameters.utils.get_parameters_from_dataframe": [[104, "baybe-parameters-utils-get-parameters-from-dataframe"]], "baybe.parameters.validation": [[105, "module-baybe.parameters.validation"]], "baybe.parameters.validation.validate_decorrelation": [[106, "baybe-parameters-validation-validate-decorrelation"]], "baybe.parameters.validation.validate_is_finite": [[107, "baybe-parameters-validation-validate-is-finite"]], "baybe.parameters.validation.validate_unique_values": [[108, "baybe-parameters-validation-validate-unique-values"]], "baybe.recommenders": [[109, "module-baybe.recommenders"]], "baybe.recommenders.base": [[110, "module-baybe.recommenders.base"]], "baybe.recommenders.deprecation": [[112, "module-baybe.recommenders.deprecation"]], "baybe.recommenders.deprecation.structure_recommender_protocol": [[113, "baybe-recommenders-deprecation-structure-recommender-protocol"]], "baybe.recommenders.meta": [[114, "module-baybe.recommenders.meta"]], "baybe.recommenders.meta.base": [[115, "module-baybe.recommenders.meta.base"]], "baybe.recommenders.meta.sequential": [[117, "module-baybe.recommenders.meta.sequential"]], "baybe.recommenders.naive": [[121, "module-baybe.recommenders.naive"]], "baybe.recommenders.pure": [[123, "module-baybe.recommenders.pure"]], "baybe.recommenders.pure.base": [[124, "module-baybe.recommenders.pure.base"]], "baybe.recommenders.pure.bayesian": [[126, "module-baybe.recommenders.pure.bayesian"]], "baybe.recommenders.pure.bayesian.base": [[127, "module-baybe.recommenders.pure.bayesian.base"]], "baybe.recommenders.pure.bayesian.sequential_greedy": [[129, "module-baybe.recommenders.pure.bayesian.sequential_greedy"]], "baybe.recommenders.pure.nonpredictive": [[131, "module-baybe.recommenders.pure.nonpredictive"]], "baybe.recommenders.pure.nonpredictive.base": [[132, "module-baybe.recommenders.pure.nonpredictive.base"]], "baybe.recommenders.pure.nonpredictive.clustering": [[134, "module-baybe.recommenders.pure.nonpredictive.clustering"]], "baybe.recommenders.pure.nonpredictive.sampling": [[139, "module-baybe.recommenders.pure.nonpredictive.sampling"]], "baybe.scaler": [[142, "module-baybe.scaler"]], "baybe.searchspace": [[145, "module-baybe.searchspace"]], "baybe.searchspace.continuous": [[146, "module-baybe.searchspace.continuous"]], "baybe.searchspace.core": [[148, "module-baybe.searchspace.core"]], "baybe.searchspace.core.validate_searchspace_from_config": [[151, "baybe-searchspace-core-validate-searchspace-from-config"]], "baybe.searchspace.discrete": [[152, "module-baybe.searchspace.discrete"]], "baybe.searchspace.discrete.parameter_cartesian_prod_to_df": [[154, "baybe-searchspace-discrete-parameter-cartesian-prod-to-df"]], "baybe.searchspace.discrete.validate_simplex_subspace_from_config": [[155, "baybe-searchspace-discrete-validate-simplex-subspace-from-config"]], "baybe.searchspace.validation": [[156, "module-baybe.searchspace.validation"]], "baybe.searchspace.validation.validate_parameter_names": [[157, "baybe-searchspace-validation-validate-parameter-names"]], "baybe.searchspace.validation.validate_parameters": [[158, "baybe-searchspace-validation-validate-parameters"]], "baybe.serialization": [[159, "module-baybe.serialization"]], "baybe.serialization.core": [[160, "module-baybe.serialization.core"]], "baybe.serialization.core.block_deserialization_hook": [[161, "baybe-serialization-core-block-deserialization-hook"]], "baybe.serialization.core.block_serialization_hook": [[162, "baybe-serialization-core-block-serialization-hook"]], "baybe.serialization.core.converter": [[163, "baybe-serialization-core-converter"]], "baybe.serialization.core.get_base_structure_hook": [[164, "baybe-serialization-core-get-base-structure-hook"]], "baybe.serialization.core.select_constructor_hook": [[165, "baybe-serialization-core-select-constructor-hook"]], "baybe.serialization.core.unstructure_base": [[166, "baybe-serialization-core-unstructure-base"]], "baybe.serialization.mixin": [[167, "module-baybe.serialization.mixin"]], "baybe.serialization.utils": [[169, "module-baybe.serialization.utils"]], "baybe.serialization.utils.deserialize_dataframe": [[170, "baybe-serialization-utils-deserialize-dataframe"]], "baybe.serialization.utils.serialize_dataframe": [[171, "baybe-serialization-utils-serialize-dataframe"]], "baybe.simulation": [[172, "module-baybe.simulation"]], "baybe.simulation.core": [[173, "module-baybe.simulation.core"]], "baybe.simulation.core.simulate_experiment": [[174, "baybe-simulation-core-simulate-experiment"]], "baybe.simulation.lookup": [[175, "module-baybe.simulation.lookup"]], "baybe.simulation.scenarios": [[176, "module-baybe.simulation.scenarios"]], "baybe.simulation.scenarios.simulate_scenarios": [[177, "baybe-simulation-scenarios-simulate-scenarios"]], "baybe.simulation.transfer_learning": [[178, "module-baybe.simulation.transfer_learning"]], "baybe.simulation.transfer_learning.simulate_transfer_learning": [[179, "baybe-simulation-transfer-learning-simulate-transfer-learning"]], "baybe.strategies": [[180, "module-baybe.strategies"]], "baybe.surrogates": [[181, "module-baybe.surrogates"]], "baybe.surrogates.base": [[182, "module-baybe.surrogates.base"]], "baybe.surrogates.custom": [[184, "module-baybe.surrogates.custom"]], "baybe.surrogates.custom.register_custom_architecture": [[186, "baybe-surrogates-custom-register-custom-architecture"]], "baybe.surrogates.gaussian_process": [[187, "module-baybe.surrogates.gaussian_process"]], "baybe.surrogates.linear": [[189, "module-baybe.surrogates.linear"]], "baybe.surrogates.naive": [[191, "module-baybe.surrogates.naive"]], "baybe.surrogates.ngboost": [[193, "module-baybe.surrogates.ngboost"]], "baybe.surrogates.random_forest": [[195, "module-baybe.surrogates.random_forest"]], "baybe.surrogates.utils": [[197, "module-baybe.surrogates.utils"]], "baybe.surrogates.utils.autoscale": [[198, "baybe-surrogates-utils-autoscale"]], "baybe.surrogates.utils.batchify": [[199, "baybe-surrogates-utils-batchify"]], "baybe.surrogates.utils.catch_constant_targets": [[200, "baybe-surrogates-utils-catch-constant-targets"]], "baybe.surrogates.validation": [[201, "module-baybe.surrogates.validation"]], "baybe.surrogates.validation.get_model_params_validator": [[202, "baybe-surrogates-validation-get-model-params-validator"]], "baybe.surrogates.validation.validate_custom_architecture_cls": [[203, "baybe-surrogates-validation-validate-custom-architecture-cls"]], "baybe.targets": [[204, "module-baybe.targets"]], "baybe.targets.base": [[205, "module-baybe.targets.base"]], "baybe.targets.enum": [[207, "module-baybe.targets.enum"]], "baybe.targets.numerical": [[210, "module-baybe.targets.numerical"]], "baybe.targets.transforms": [[212, "module-baybe.targets.transforms"]], "baybe.targets.transforms.bell_transform": [[213, "baybe-targets-transforms-bell-transform"]], "baybe.targets.transforms.linear_transform": [[214, "baybe-targets-transforms-linear-transform"]], "baybe.targets.transforms.triangular_transform": [[215, "baybe-targets-transforms-triangular-transform"]], "baybe.telemetry": [[216, "module-baybe.telemetry"]], "baybe.telemetry.get_user_details": [[217, "baybe-telemetry-get-user-details"]], "baybe.telemetry.is_enabled": [[218, "baybe-telemetry-is-enabled"]], "baybe.telemetry.telemetry_record_recommended_measurement_percentage": [[219, "baybe-telemetry-telemetry-record-recommended-measurement-percentage"]], "baybe.telemetry.telemetry_record_value": [[220, "baybe-telemetry-telemetry-record-value"]], "baybe.utils": [[221, "module-baybe.utils"]], "baybe.utils.basic": [[222, "module-baybe.utils.basic"]], "baybe.utils.basic.filter_attributes": [[225, "baybe-utils-basic-filter-attributes"]], "baybe.utils.basic.find_subclass": [[226, "baybe-utils-basic-find-subclass"]], "baybe.utils.basic.get_subclasses": [[227, "baybe-utils-basic-get-subclasses"]], "baybe.utils.basic.group_duplicate_values": [[228, "baybe-utils-basic-group-duplicate-values"]], "baybe.utils.basic.hilberts_factory": [[229, "baybe-utils-basic-hilberts-factory"]], "baybe.utils.basic.refers_to": [[230, "baybe-utils-basic-refers-to"]], "baybe.utils.basic.set_random_seed": [[231, "baybe-utils-basic-set-random-seed"]], "baybe.utils.basic.to_tuple": [[232, "baybe-utils-basic-to-tuple"]], "baybe.utils.boolean": [[233, "module-baybe.utils.boolean"]], "baybe.utils.boolean.check_if_in": [[234, "baybe-utils-boolean-check-if-in"]], "baybe.utils.boolean.is_abstract": [[235, "baybe-utils-boolean-is-abstract"]], "baybe.utils.boolean.strtobool": [[236, "baybe-utils-boolean-strtobool"]], "baybe.utils.botorch_wrapper": [[237, "module-baybe.utils.botorch_wrapper"]], "baybe.utils.botorch_wrapper.botorch_function_wrapper": [[238, "baybe-utils-botorch-wrapper-botorch-function-wrapper"]], "baybe.utils.chemistry": [[239, "module-baybe.utils.chemistry"]], "baybe.utils.chemistry.get_canonical_smiles": [[240, "baybe-utils-chemistry-get-canonical-smiles"]], "baybe.utils.chemistry.is_valid_smiles": [[241, "baybe-utils-chemistry-is-valid-smiles"]], "baybe.utils.chemistry.name_to_smiles": [[242, "baybe-utils-chemistry-name-to-smiles"]], "baybe.utils.chemistry.smiles_to_fp_features": [[243, "baybe-utils-chemistry-smiles-to-fp-features"]], "baybe.utils.chemistry.smiles_to_molecules": [[244, "baybe-utils-chemistry-smiles-to-molecules"]], "baybe.utils.chemistry.smiles_to_mordred_features": [[245, "baybe-utils-chemistry-smiles-to-mordred-features"]], "baybe.utils.chemistry.smiles_to_rdkit_features": [[246, "baybe-utils-chemistry-smiles-to-rdkit-features"]], "baybe.utils.dataframe": [[247, "module-baybe.utils.dataframe"]], "baybe.utils.dataframe.add_fake_results": [[248, "baybe-utils-dataframe-add-fake-results"]], "baybe.utils.dataframe.add_parameter_noise": [[249, "baybe-utils-dataframe-add-parameter-noise"]], "baybe.utils.dataframe.df_drop_single_value_columns": [[250, "baybe-utils-dataframe-df-drop-single-value-columns"]], "baybe.utils.dataframe.df_drop_string_columns": [[251, "baybe-utils-dataframe-df-drop-string-columns"]], "baybe.utils.dataframe.df_uncorrelated_features": [[252, "baybe-utils-dataframe-df-uncorrelated-features"]], "baybe.utils.dataframe.fuzzy_row_match": [[253, "baybe-utils-dataframe-fuzzy-row-match"]], "baybe.utils.dataframe.pretty_print_df": [[254, "baybe-utils-dataframe-pretty-print-df"]], "baybe.utils.dataframe.to_tensor": [[255, "baybe-utils-dataframe-to-tensor"]], "baybe.utils.interval": [[256, "module-baybe.utils.interval"]], "baybe.utils.interval.InfiniteIntervalError": [[257, "baybe-utils-interval-infiniteintervalerror"]], "baybe.utils.interval.convert_bounds": [[259, "baybe-utils-interval-convert-bounds"]], "baybe.utils.interval.use_fallback_constructor_hook": [[260, "baybe-utils-interval-use-fallback-constructor-hook"]], "baybe.utils.numerical": [[261, "module-baybe.utils.numerical"]], "baybe.utils.numerical.DTypeFloatNumpy": [[262, "baybe-utils-numerical-dtypefloatnumpy"]], "baybe.utils.numerical.DTypeFloatONNX": [[263, "baybe-utils-numerical-dtypefloatonnx"]], "baybe.utils.numerical.closer_element": [[264, "baybe-utils-numerical-closer-element"]], "baybe.utils.numerical.closest_element": [[265, "baybe-utils-numerical-closest-element"]], "baybe.utils.numerical.geom_mean": [[266, "baybe-utils-numerical-geom-mean"]], "baybe.utils.plotting": [[267, "module-baybe.utils.plotting"]], "baybe.utils.plotting.create_example_plots": [[268, "baybe-utils-plotting-create-example-plots"]], "baybe.utils.sampling_algorithms": [[269, "module-baybe.utils.sampling_algorithms"]], "baybe.utils.sampling_algorithms.farthest_point_sampling": [[270, "baybe-utils-sampling-algorithms-farthest-point-sampling"]], "baybe.utils.torch": [[271, "module-baybe.utils.torch"]], "baybe.utils.torch.DTypeFloatTorch": [[272, "baybe-utils-torch-dtypefloattorch"]], "classproperty": [[224, "classproperty"]], "qExpectedImprovement": [[8, "qexpectedimprovement"]], "qLogExpectedImprovement": [[9, "qlogexpectedimprovement"]], "qLogNoisyExpectedImprovement": [[10, "qlognoisyexpectedimprovement"]], "qNoisyExpectedImprovement": [[11, "qnoisyexpectedimprovement"]], "qProbabilityOfImprovement": [[12, "qprobabilityofimprovement"]], "qSimpleRegret": [[13, "qsimpleregret"]], "qUpperConfidenceBound": [[14, "qupperconfidencebound"]], "\u201cPre-training\u201d stage": [[296, "pre-training-stage"]]}, "docnames": ["_autosummary/baybe", "_autosummary/baybe.acquisition", "_autosummary/baybe.acquisition.acqfs", "_autosummary/baybe.acquisition.acqfs.ExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.LogExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.PosteriorMean", "_autosummary/baybe.acquisition.acqfs.ProbabilityOfImprovement", "_autosummary/baybe.acquisition.acqfs.UpperConfidenceBound", "_autosummary/baybe.acquisition.acqfs.qExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qLogExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qLogNoisyExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qNoisyExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qProbabilityOfImprovement", "_autosummary/baybe.acquisition.acqfs.qSimpleRegret", "_autosummary/baybe.acquisition.acqfs.qUpperConfidenceBound", "_autosummary/baybe.acquisition.base", "_autosummary/baybe.acquisition.base.AcquisitionFunction", "_autosummary/baybe.acquisition.partial", "_autosummary/baybe.acquisition.partial.PartialAcquisitionFunction", "_autosummary/baybe.acquisition.utils", "_autosummary/baybe.acquisition.utils.convert_acqf", "_autosummary/baybe.acquisition.utils.str_to_acqf", "_autosummary/baybe.campaign", "_autosummary/baybe.campaign.Campaign", "_autosummary/baybe.constraints", "_autosummary/baybe.constraints.base", "_autosummary/baybe.constraints.base.Constraint", "_autosummary/baybe.constraints.base.ContinuousConstraint", "_autosummary/baybe.constraints.base.DiscreteConstraint", "_autosummary/baybe.constraints.conditions", "_autosummary/baybe.constraints.conditions.Condition", "_autosummary/baybe.constraints.conditions.SubSelectionCondition", "_autosummary/baybe.constraints.conditions.ThresholdCondition", "_autosummary/baybe.constraints.continuous", "_autosummary/baybe.constraints.continuous.ContinuousLinearEqualityConstraint", "_autosummary/baybe.constraints.continuous.ContinuousLinearInequalityConstraint", "_autosummary/baybe.constraints.discrete", "_autosummary/baybe.constraints.discrete.DiscreteCustomConstraint", "_autosummary/baybe.constraints.discrete.DiscreteDependenciesConstraint", "_autosummary/baybe.constraints.discrete.DiscreteExcludeConstraint", "_autosummary/baybe.constraints.discrete.DiscreteLinkedParametersConstraint", "_autosummary/baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint", "_autosummary/baybe.constraints.discrete.DiscretePermutationInvarianceConstraint", "_autosummary/baybe.constraints.discrete.DiscreteProductConstraint", "_autosummary/baybe.constraints.discrete.DiscreteSumConstraint", "_autosummary/baybe.constraints.validation", "_autosummary/baybe.constraints.validation.validate_constraints", "_autosummary/baybe.exceptions", "_autosummary/baybe.exceptions.DeprecationError", "_autosummary/baybe.exceptions.EmptySearchSpaceError", "_autosummary/baybe.exceptions.IncompatibleSearchSpaceError", "_autosummary/baybe.exceptions.NoMCAcquisitionFunctionError", "_autosummary/baybe.exceptions.NoRecommendersLeftError", "_autosummary/baybe.exceptions.NotEnoughPointsLeftError", "_autosummary/baybe.exceptions.NothingToSimulateError", "_autosummary/baybe.exceptions.NumericalUnderflowError", "_autosummary/baybe.exceptions.OptionalImportError", "_autosummary/baybe.exceptions.TestException", "_autosummary/baybe.exceptions.UnidentifiedSubclassError", "_autosummary/baybe.kernels", "_autosummary/baybe.kernels.base", "_autosummary/baybe.kernels.base.Kernel", "_autosummary/baybe.kernels.basic", "_autosummary/baybe.kernels.basic.MaternKernel", "_autosummary/baybe.kernels.priors", "_autosummary/baybe.kernels.priors.base", "_autosummary/baybe.kernels.priors.base.Prior", "_autosummary/baybe.kernels.priors.basic", "_autosummary/baybe.kernels.priors.basic.GammaPrior", "_autosummary/baybe.objective", "_autosummary/baybe.objective.Objective", "_autosummary/baybe.objectives", "_autosummary/baybe.objectives.base", "_autosummary/baybe.objectives.base.Objective", "_autosummary/baybe.objectives.base.to_objective", "_autosummary/baybe.objectives.desirability", "_autosummary/baybe.objectives.desirability.DesirabilityObjective", "_autosummary/baybe.objectives.desirability.scalarize", "_autosummary/baybe.objectives.enum", "_autosummary/baybe.objectives.enum.Scalarizer", "_autosummary/baybe.objectives.single", "_autosummary/baybe.objectives.single.SingleTargetObjective", "_autosummary/baybe.parameters", "_autosummary/baybe.parameters.base", "_autosummary/baybe.parameters.base.ContinuousParameter", "_autosummary/baybe.parameters.base.DiscreteParameter", "_autosummary/baybe.parameters.base.Parameter", "_autosummary/baybe.parameters.categorical", "_autosummary/baybe.parameters.categorical.CategoricalParameter", "_autosummary/baybe.parameters.categorical.TaskParameter", "_autosummary/baybe.parameters.custom", "_autosummary/baybe.parameters.custom.CustomDiscreteParameter", "_autosummary/baybe.parameters.enum", "_autosummary/baybe.parameters.enum.CategoricalEncoding", "_autosummary/baybe.parameters.enum.CustomEncoding", "_autosummary/baybe.parameters.enum.ParameterEncoding", "_autosummary/baybe.parameters.enum.SubstanceEncoding", "_autosummary/baybe.parameters.numerical", "_autosummary/baybe.parameters.numerical.NumericalContinuousParameter", "_autosummary/baybe.parameters.numerical.NumericalDiscreteParameter", "_autosummary/baybe.parameters.substance", "_autosummary/baybe.parameters.substance.Smiles", "_autosummary/baybe.parameters.substance.SubstanceParameter", "_autosummary/baybe.parameters.utils", "_autosummary/baybe.parameters.utils.get_parameters_from_dataframe", "_autosummary/baybe.parameters.validation", "_autosummary/baybe.parameters.validation.validate_decorrelation", "_autosummary/baybe.parameters.validation.validate_is_finite", "_autosummary/baybe.parameters.validation.validate_unique_values", "_autosummary/baybe.recommenders", "_autosummary/baybe.recommenders.base", "_autosummary/baybe.recommenders.base.RecommenderProtocol", "_autosummary/baybe.recommenders.deprecation", "_autosummary/baybe.recommenders.deprecation.structure_recommender_protocol", "_autosummary/baybe.recommenders.meta", "_autosummary/baybe.recommenders.meta.base", "_autosummary/baybe.recommenders.meta.base.MetaRecommender", "_autosummary/baybe.recommenders.meta.sequential", "_autosummary/baybe.recommenders.meta.sequential.SequentialMetaRecommender", "_autosummary/baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender", "_autosummary/baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender", "_autosummary/baybe.recommenders.naive", "_autosummary/baybe.recommenders.naive.NaiveHybridSpaceRecommender", "_autosummary/baybe.recommenders.pure", "_autosummary/baybe.recommenders.pure.base", "_autosummary/baybe.recommenders.pure.base.PureRecommender", "_autosummary/baybe.recommenders.pure.bayesian", "_autosummary/baybe.recommenders.pure.bayesian.base", "_autosummary/baybe.recommenders.pure.bayesian.base.BayesianRecommender", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive", "_autosummary/baybe.recommenders.pure.nonpredictive.base", "_autosummary/baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender", "_autosummary/baybe.scaler", "_autosummary/baybe.scaler.DefaultScaler", "_autosummary/baybe.scaler.Scaler", "_autosummary/baybe.searchspace", "_autosummary/baybe.searchspace.continuous", "_autosummary/baybe.searchspace.continuous.SubspaceContinuous", "_autosummary/baybe.searchspace.core", "_autosummary/baybe.searchspace.core.SearchSpace", "_autosummary/baybe.searchspace.core.SearchSpaceType", "_autosummary/baybe.searchspace.core.validate_searchspace_from_config", "_autosummary/baybe.searchspace.discrete", "_autosummary/baybe.searchspace.discrete.SubspaceDiscrete", "_autosummary/baybe.searchspace.discrete.parameter_cartesian_prod_to_df", "_autosummary/baybe.searchspace.discrete.validate_simplex_subspace_from_config", "_autosummary/baybe.searchspace.validation", "_autosummary/baybe.searchspace.validation.validate_parameter_names", "_autosummary/baybe.searchspace.validation.validate_parameters", "_autosummary/baybe.serialization", "_autosummary/baybe.serialization.core", "_autosummary/baybe.serialization.core.block_deserialization_hook", "_autosummary/baybe.serialization.core.block_serialization_hook", "_autosummary/baybe.serialization.core.converter", "_autosummary/baybe.serialization.core.get_base_structure_hook", "_autosummary/baybe.serialization.core.select_constructor_hook", "_autosummary/baybe.serialization.core.unstructure_base", "_autosummary/baybe.serialization.mixin", "_autosummary/baybe.serialization.mixin.SerialMixin", "_autosummary/baybe.serialization.utils", "_autosummary/baybe.serialization.utils.deserialize_dataframe", "_autosummary/baybe.serialization.utils.serialize_dataframe", "_autosummary/baybe.simulation", "_autosummary/baybe.simulation.core", "_autosummary/baybe.simulation.core.simulate_experiment", "_autosummary/baybe.simulation.lookup", "_autosummary/baybe.simulation.scenarios", "_autosummary/baybe.simulation.scenarios.simulate_scenarios", "_autosummary/baybe.simulation.transfer_learning", "_autosummary/baybe.simulation.transfer_learning.simulate_transfer_learning", "_autosummary/baybe.strategies", "_autosummary/baybe.surrogates", "_autosummary/baybe.surrogates.base", "_autosummary/baybe.surrogates.base.Surrogate", "_autosummary/baybe.surrogates.custom", "_autosummary/baybe.surrogates.custom.CustomONNXSurrogate", "_autosummary/baybe.surrogates.custom.register_custom_architecture", "_autosummary/baybe.surrogates.gaussian_process", "_autosummary/baybe.surrogates.gaussian_process.GaussianProcessSurrogate", "_autosummary/baybe.surrogates.linear", "_autosummary/baybe.surrogates.linear.BayesianLinearSurrogate", "_autosummary/baybe.surrogates.naive", "_autosummary/baybe.surrogates.naive.MeanPredictionSurrogate", "_autosummary/baybe.surrogates.ngboost", "_autosummary/baybe.surrogates.ngboost.NGBoostSurrogate", "_autosummary/baybe.surrogates.random_forest", "_autosummary/baybe.surrogates.random_forest.RandomForestSurrogate", "_autosummary/baybe.surrogates.utils", "_autosummary/baybe.surrogates.utils.autoscale", "_autosummary/baybe.surrogates.utils.batchify", "_autosummary/baybe.surrogates.utils.catch_constant_targets", "_autosummary/baybe.surrogates.validation", "_autosummary/baybe.surrogates.validation.get_model_params_validator", "_autosummary/baybe.surrogates.validation.validate_custom_architecture_cls", "_autosummary/baybe.targets", "_autosummary/baybe.targets.base", "_autosummary/baybe.targets.base.Target", "_autosummary/baybe.targets.enum", "_autosummary/baybe.targets.enum.TargetMode", "_autosummary/baybe.targets.enum.TargetTransformation", "_autosummary/baybe.targets.numerical", "_autosummary/baybe.targets.numerical.NumericalTarget", "_autosummary/baybe.targets.transforms", "_autosummary/baybe.targets.transforms.bell_transform", "_autosummary/baybe.targets.transforms.linear_transform", "_autosummary/baybe.targets.transforms.triangular_transform", "_autosummary/baybe.telemetry", "_autosummary/baybe.telemetry.get_user_details", "_autosummary/baybe.telemetry.is_enabled", "_autosummary/baybe.telemetry.telemetry_record_recommended_measurement_percentage", "_autosummary/baybe.telemetry.telemetry_record_value", "_autosummary/baybe.utils", "_autosummary/baybe.utils.basic", "_autosummary/baybe.utils.basic.Dummy", "_autosummary/baybe.utils.basic.classproperty", "_autosummary/baybe.utils.basic.filter_attributes", "_autosummary/baybe.utils.basic.find_subclass", "_autosummary/baybe.utils.basic.get_subclasses", "_autosummary/baybe.utils.basic.group_duplicate_values", "_autosummary/baybe.utils.basic.hilberts_factory", "_autosummary/baybe.utils.basic.refers_to", "_autosummary/baybe.utils.basic.set_random_seed", "_autosummary/baybe.utils.basic.to_tuple", "_autosummary/baybe.utils.boolean", "_autosummary/baybe.utils.boolean.check_if_in", "_autosummary/baybe.utils.boolean.is_abstract", "_autosummary/baybe.utils.boolean.strtobool", "_autosummary/baybe.utils.botorch_wrapper", "_autosummary/baybe.utils.botorch_wrapper.botorch_function_wrapper", "_autosummary/baybe.utils.chemistry", "_autosummary/baybe.utils.chemistry.get_canonical_smiles", "_autosummary/baybe.utils.chemistry.is_valid_smiles", "_autosummary/baybe.utils.chemistry.name_to_smiles", "_autosummary/baybe.utils.chemistry.smiles_to_fp_features", "_autosummary/baybe.utils.chemistry.smiles_to_molecules", "_autosummary/baybe.utils.chemistry.smiles_to_mordred_features", "_autosummary/baybe.utils.chemistry.smiles_to_rdkit_features", "_autosummary/baybe.utils.dataframe", "_autosummary/baybe.utils.dataframe.add_fake_results", "_autosummary/baybe.utils.dataframe.add_parameter_noise", "_autosummary/baybe.utils.dataframe.df_drop_single_value_columns", "_autosummary/baybe.utils.dataframe.df_drop_string_columns", "_autosummary/baybe.utils.dataframe.df_uncorrelated_features", "_autosummary/baybe.utils.dataframe.fuzzy_row_match", "_autosummary/baybe.utils.dataframe.pretty_print_df", "_autosummary/baybe.utils.dataframe.to_tensor", "_autosummary/baybe.utils.interval", "_autosummary/baybe.utils.interval.InfiniteIntervalError", "_autosummary/baybe.utils.interval.Interval", "_autosummary/baybe.utils.interval.convert_bounds", "_autosummary/baybe.utils.interval.use_fallback_constructor_hook", "_autosummary/baybe.utils.numerical", "_autosummary/baybe.utils.numerical.DTypeFloatNumpy", "_autosummary/baybe.utils.numerical.DTypeFloatONNX", "_autosummary/baybe.utils.numerical.closer_element", "_autosummary/baybe.utils.numerical.closest_element", "_autosummary/baybe.utils.numerical.geom_mean", "_autosummary/baybe.utils.plotting", "_autosummary/baybe.utils.plotting.create_example_plots", "_autosummary/baybe.utils.sampling_algorithms", "_autosummary/baybe.utils.sampling_algorithms.farthest_point_sampling", "_autosummary/baybe.utils.torch", "_autosummary/baybe.utils.torch.DTypeFloatTorch", "examples/Backtesting/Backtesting", "examples/Backtesting/botorch_analytical", "examples/Backtesting/custom_analytical", "examples/Backtesting/full_initial_data", "examples/Backtesting/full_lookup", "examples/Backtesting/hybrid", "examples/Backtesting/impute_mode", "examples/Backtesting/multi_target", "examples/Basics/Basics", "examples/Basics/campaign", "examples/Basics/recommenders", "examples/Constraints_Continuous/Constraints_Continuous", "examples/Constraints_Continuous/hybrid_space", "examples/Constraints_Continuous/linear_constraints", "examples/Constraints_Discrete/Constraints_Discrete", "examples/Constraints_Discrete/custom_constraints", "examples/Constraints_Discrete/dependency_constraints", "examples/Constraints_Discrete/exclusion_constraints", "examples/Constraints_Discrete/mixture_constraints", "examples/Constraints_Discrete/prodsum_constraints", "examples/Custom_Surrogates/Custom_Surrogates", "examples/Custom_Surrogates/custom_architecture_sklearn", "examples/Custom_Surrogates/custom_architecture_torch", "examples/Custom_Surrogates/custom_pretrained", "examples/Custom_Surrogates/surrogate_params", "examples/Multi_Target/Multi_Target", "examples/Multi_Target/desirability", "examples/Searchspaces/Searchspaces", "examples/Searchspaces/continuous_space_botorch_function", "examples/Searchspaces/continuous_space_custom_function", "examples/Searchspaces/discrete_space", "examples/Searchspaces/hybrid_space", "examples/Serialization/Serialization", "examples/Serialization/basic_serialization", "examples/Serialization/create_from_config", "examples/Serialization/validate_config", "examples/Transfer_Learning/Transfer_Learning", "examples/Transfer_Learning/backtesting", "examples/Transfer_Learning/basic_transfer_learning", "examples/examples", "index", "known_issues", "misc/changelog_link", "misc/contributing_link", "misc/contributors_link", "misc/license_link", "userguide/campaigns", "userguide/constraints", "userguide/objective", "userguide/parameters", "userguide/recommenders", "userguide/searchspace", "userguide/serialization", "userguide/simulation", "userguide/surrogates", "userguide/targets", "userguide/transfer_learning", "userguide/userguide"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/baybe.rst", "_autosummary/baybe.acquisition.rst", "_autosummary/baybe.acquisition.acqfs.rst", "_autosummary/baybe.acquisition.acqfs.ExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.LogExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.PosteriorMean.rst", "_autosummary/baybe.acquisition.acqfs.ProbabilityOfImprovement.rst", "_autosummary/baybe.acquisition.acqfs.UpperConfidenceBound.rst", "_autosummary/baybe.acquisition.acqfs.qExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qLogExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qNoisyExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qProbabilityOfImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qSimpleRegret.rst", "_autosummary/baybe.acquisition.acqfs.qUpperConfidenceBound.rst", "_autosummary/baybe.acquisition.base.rst", "_autosummary/baybe.acquisition.base.AcquisitionFunction.rst", "_autosummary/baybe.acquisition.partial.rst", "_autosummary/baybe.acquisition.partial.PartialAcquisitionFunction.rst", "_autosummary/baybe.acquisition.utils.rst", "_autosummary/baybe.acquisition.utils.convert_acqf.rst", "_autosummary/baybe.acquisition.utils.str_to_acqf.rst", "_autosummary/baybe.campaign.rst", "_autosummary/baybe.campaign.Campaign.rst", "_autosummary/baybe.constraints.rst", "_autosummary/baybe.constraints.base.rst", "_autosummary/baybe.constraints.base.Constraint.rst", "_autosummary/baybe.constraints.base.ContinuousConstraint.rst", "_autosummary/baybe.constraints.base.DiscreteConstraint.rst", "_autosummary/baybe.constraints.conditions.rst", "_autosummary/baybe.constraints.conditions.Condition.rst", "_autosummary/baybe.constraints.conditions.SubSelectionCondition.rst", "_autosummary/baybe.constraints.conditions.ThresholdCondition.rst", "_autosummary/baybe.constraints.continuous.rst", "_autosummary/baybe.constraints.continuous.ContinuousLinearEqualityConstraint.rst", "_autosummary/baybe.constraints.continuous.ContinuousLinearInequalityConstraint.rst", "_autosummary/baybe.constraints.discrete.rst", "_autosummary/baybe.constraints.discrete.DiscreteCustomConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteDependenciesConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteExcludeConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteLinkedParametersConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteProductConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteSumConstraint.rst", "_autosummary/baybe.constraints.validation.rst", "_autosummary/baybe.constraints.validation.validate_constraints.rst", "_autosummary/baybe.exceptions.rst", "_autosummary/baybe.exceptions.DeprecationError.rst", "_autosummary/baybe.exceptions.EmptySearchSpaceError.rst", "_autosummary/baybe.exceptions.IncompatibleSearchSpaceError.rst", "_autosummary/baybe.exceptions.NoMCAcquisitionFunctionError.rst", "_autosummary/baybe.exceptions.NoRecommendersLeftError.rst", "_autosummary/baybe.exceptions.NotEnoughPointsLeftError.rst", "_autosummary/baybe.exceptions.NothingToSimulateError.rst", "_autosummary/baybe.exceptions.NumericalUnderflowError.rst", "_autosummary/baybe.exceptions.OptionalImportError.rst", "_autosummary/baybe.exceptions.TestException.rst", "_autosummary/baybe.exceptions.UnidentifiedSubclassError.rst", "_autosummary/baybe.kernels.rst", "_autosummary/baybe.kernels.base.rst", "_autosummary/baybe.kernels.base.Kernel.rst", "_autosummary/baybe.kernels.basic.rst", "_autosummary/baybe.kernels.basic.MaternKernel.rst", "_autosummary/baybe.kernels.priors.rst", "_autosummary/baybe.kernels.priors.base.rst", "_autosummary/baybe.kernels.priors.base.Prior.rst", "_autosummary/baybe.kernels.priors.basic.rst", "_autosummary/baybe.kernels.priors.basic.GammaPrior.rst", "_autosummary/baybe.objective.rst", "_autosummary/baybe.objective.Objective.rst", "_autosummary/baybe.objectives.rst", "_autosummary/baybe.objectives.base.rst", "_autosummary/baybe.objectives.base.Objective.rst", "_autosummary/baybe.objectives.base.to_objective.rst", "_autosummary/baybe.objectives.desirability.rst", "_autosummary/baybe.objectives.desirability.DesirabilityObjective.rst", "_autosummary/baybe.objectives.desirability.scalarize.rst", "_autosummary/baybe.objectives.enum.rst", "_autosummary/baybe.objectives.enum.Scalarizer.rst", "_autosummary/baybe.objectives.single.rst", "_autosummary/baybe.objectives.single.SingleTargetObjective.rst", "_autosummary/baybe.parameters.rst", "_autosummary/baybe.parameters.base.rst", "_autosummary/baybe.parameters.base.ContinuousParameter.rst", "_autosummary/baybe.parameters.base.DiscreteParameter.rst", "_autosummary/baybe.parameters.base.Parameter.rst", "_autosummary/baybe.parameters.categorical.rst", "_autosummary/baybe.parameters.categorical.CategoricalParameter.rst", "_autosummary/baybe.parameters.categorical.TaskParameter.rst", "_autosummary/baybe.parameters.custom.rst", "_autosummary/baybe.parameters.custom.CustomDiscreteParameter.rst", "_autosummary/baybe.parameters.enum.rst", "_autosummary/baybe.parameters.enum.CategoricalEncoding.rst", "_autosummary/baybe.parameters.enum.CustomEncoding.rst", "_autosummary/baybe.parameters.enum.ParameterEncoding.rst", "_autosummary/baybe.parameters.enum.SubstanceEncoding.rst", "_autosummary/baybe.parameters.numerical.rst", "_autosummary/baybe.parameters.numerical.NumericalContinuousParameter.rst", "_autosummary/baybe.parameters.numerical.NumericalDiscreteParameter.rst", "_autosummary/baybe.parameters.substance.rst", "_autosummary/baybe.parameters.substance.Smiles.rst", "_autosummary/baybe.parameters.substance.SubstanceParameter.rst", "_autosummary/baybe.parameters.utils.rst", "_autosummary/baybe.parameters.utils.get_parameters_from_dataframe.rst", "_autosummary/baybe.parameters.validation.rst", "_autosummary/baybe.parameters.validation.validate_decorrelation.rst", "_autosummary/baybe.parameters.validation.validate_is_finite.rst", "_autosummary/baybe.parameters.validation.validate_unique_values.rst", "_autosummary/baybe.recommenders.rst", "_autosummary/baybe.recommenders.base.rst", "_autosummary/baybe.recommenders.base.RecommenderProtocol.rst", "_autosummary/baybe.recommenders.deprecation.rst", "_autosummary/baybe.recommenders.deprecation.structure_recommender_protocol.rst", "_autosummary/baybe.recommenders.meta.rst", "_autosummary/baybe.recommenders.meta.base.rst", "_autosummary/baybe.recommenders.meta.base.MetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.rst", "_autosummary/baybe.recommenders.meta.sequential.SequentialMetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.rst", "_autosummary/baybe.recommenders.naive.rst", "_autosummary/baybe.recommenders.naive.NaiveHybridSpaceRecommender.rst", "_autosummary/baybe.recommenders.pure.rst", "_autosummary/baybe.recommenders.pure.base.rst", "_autosummary/baybe.recommenders.pure.base.PureRecommender.rst", "_autosummary/baybe.recommenders.pure.bayesian.rst", "_autosummary/baybe.recommenders.pure.bayesian.base.rst", "_autosummary/baybe.recommenders.pure.bayesian.base.BayesianRecommender.rst", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.rst", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.base.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.rst", "_autosummary/baybe.scaler.rst", "_autosummary/baybe.scaler.DefaultScaler.rst", "_autosummary/baybe.scaler.Scaler.rst", "_autosummary/baybe.searchspace.rst", "_autosummary/baybe.searchspace.continuous.rst", "_autosummary/baybe.searchspace.continuous.SubspaceContinuous.rst", "_autosummary/baybe.searchspace.core.rst", "_autosummary/baybe.searchspace.core.SearchSpace.rst", "_autosummary/baybe.searchspace.core.SearchSpaceType.rst", "_autosummary/baybe.searchspace.core.validate_searchspace_from_config.rst", "_autosummary/baybe.searchspace.discrete.rst", "_autosummary/baybe.searchspace.discrete.SubspaceDiscrete.rst", "_autosummary/baybe.searchspace.discrete.parameter_cartesian_prod_to_df.rst", "_autosummary/baybe.searchspace.discrete.validate_simplex_subspace_from_config.rst", "_autosummary/baybe.searchspace.validation.rst", "_autosummary/baybe.searchspace.validation.validate_parameter_names.rst", "_autosummary/baybe.searchspace.validation.validate_parameters.rst", "_autosummary/baybe.serialization.rst", "_autosummary/baybe.serialization.core.rst", "_autosummary/baybe.serialization.core.block_deserialization_hook.rst", "_autosummary/baybe.serialization.core.block_serialization_hook.rst", "_autosummary/baybe.serialization.core.converter.rst", "_autosummary/baybe.serialization.core.get_base_structure_hook.rst", "_autosummary/baybe.serialization.core.select_constructor_hook.rst", "_autosummary/baybe.serialization.core.unstructure_base.rst", "_autosummary/baybe.serialization.mixin.rst", "_autosummary/baybe.serialization.mixin.SerialMixin.rst", "_autosummary/baybe.serialization.utils.rst", "_autosummary/baybe.serialization.utils.deserialize_dataframe.rst", "_autosummary/baybe.serialization.utils.serialize_dataframe.rst", "_autosummary/baybe.simulation.rst", "_autosummary/baybe.simulation.core.rst", "_autosummary/baybe.simulation.core.simulate_experiment.rst", "_autosummary/baybe.simulation.lookup.rst", "_autosummary/baybe.simulation.scenarios.rst", "_autosummary/baybe.simulation.scenarios.simulate_scenarios.rst", "_autosummary/baybe.simulation.transfer_learning.rst", "_autosummary/baybe.simulation.transfer_learning.simulate_transfer_learning.rst", "_autosummary/baybe.strategies.rst", "_autosummary/baybe.surrogates.rst", "_autosummary/baybe.surrogates.base.rst", "_autosummary/baybe.surrogates.base.Surrogate.rst", "_autosummary/baybe.surrogates.custom.rst", "_autosummary/baybe.surrogates.custom.CustomONNXSurrogate.rst", "_autosummary/baybe.surrogates.custom.register_custom_architecture.rst", "_autosummary/baybe.surrogates.gaussian_process.rst", "_autosummary/baybe.surrogates.gaussian_process.GaussianProcessSurrogate.rst", "_autosummary/baybe.surrogates.linear.rst", "_autosummary/baybe.surrogates.linear.BayesianLinearSurrogate.rst", "_autosummary/baybe.surrogates.naive.rst", "_autosummary/baybe.surrogates.naive.MeanPredictionSurrogate.rst", "_autosummary/baybe.surrogates.ngboost.rst", "_autosummary/baybe.surrogates.ngboost.NGBoostSurrogate.rst", "_autosummary/baybe.surrogates.random_forest.rst", "_autosummary/baybe.surrogates.random_forest.RandomForestSurrogate.rst", "_autosummary/baybe.surrogates.utils.rst", "_autosummary/baybe.surrogates.utils.autoscale.rst", "_autosummary/baybe.surrogates.utils.batchify.rst", "_autosummary/baybe.surrogates.utils.catch_constant_targets.rst", "_autosummary/baybe.surrogates.validation.rst", "_autosummary/baybe.surrogates.validation.get_model_params_validator.rst", "_autosummary/baybe.surrogates.validation.validate_custom_architecture_cls.rst", "_autosummary/baybe.targets.rst", "_autosummary/baybe.targets.base.rst", "_autosummary/baybe.targets.base.Target.rst", "_autosummary/baybe.targets.enum.rst", "_autosummary/baybe.targets.enum.TargetMode.rst", "_autosummary/baybe.targets.enum.TargetTransformation.rst", "_autosummary/baybe.targets.numerical.rst", "_autosummary/baybe.targets.numerical.NumericalTarget.rst", "_autosummary/baybe.targets.transforms.rst", "_autosummary/baybe.targets.transforms.bell_transform.rst", "_autosummary/baybe.targets.transforms.linear_transform.rst", "_autosummary/baybe.targets.transforms.triangular_transform.rst", "_autosummary/baybe.telemetry.rst", "_autosummary/baybe.telemetry.get_user_details.rst", "_autosummary/baybe.telemetry.is_enabled.rst", "_autosummary/baybe.telemetry.telemetry_record_recommended_measurement_percentage.rst", "_autosummary/baybe.telemetry.telemetry_record_value.rst", "_autosummary/baybe.utils.rst", "_autosummary/baybe.utils.basic.rst", "_autosummary/baybe.utils.basic.Dummy.rst", "_autosummary/baybe.utils.basic.classproperty.rst", "_autosummary/baybe.utils.basic.filter_attributes.rst", "_autosummary/baybe.utils.basic.find_subclass.rst", "_autosummary/baybe.utils.basic.get_subclasses.rst", "_autosummary/baybe.utils.basic.group_duplicate_values.rst", "_autosummary/baybe.utils.basic.hilberts_factory.rst", "_autosummary/baybe.utils.basic.refers_to.rst", "_autosummary/baybe.utils.basic.set_random_seed.rst", "_autosummary/baybe.utils.basic.to_tuple.rst", "_autosummary/baybe.utils.boolean.rst", "_autosummary/baybe.utils.boolean.check_if_in.rst", "_autosummary/baybe.utils.boolean.is_abstract.rst", "_autosummary/baybe.utils.boolean.strtobool.rst", "_autosummary/baybe.utils.botorch_wrapper.rst", "_autosummary/baybe.utils.botorch_wrapper.botorch_function_wrapper.rst", "_autosummary/baybe.utils.chemistry.rst", "_autosummary/baybe.utils.chemistry.get_canonical_smiles.rst", "_autosummary/baybe.utils.chemistry.is_valid_smiles.rst", "_autosummary/baybe.utils.chemistry.name_to_smiles.rst", "_autosummary/baybe.utils.chemistry.smiles_to_fp_features.rst", "_autosummary/baybe.utils.chemistry.smiles_to_molecules.rst", "_autosummary/baybe.utils.chemistry.smiles_to_mordred_features.rst", "_autosummary/baybe.utils.chemistry.smiles_to_rdkit_features.rst", "_autosummary/baybe.utils.dataframe.rst", "_autosummary/baybe.utils.dataframe.add_fake_results.rst", "_autosummary/baybe.utils.dataframe.add_parameter_noise.rst", "_autosummary/baybe.utils.dataframe.df_drop_single_value_columns.rst", "_autosummary/baybe.utils.dataframe.df_drop_string_columns.rst", "_autosummary/baybe.utils.dataframe.df_uncorrelated_features.rst", "_autosummary/baybe.utils.dataframe.fuzzy_row_match.rst", "_autosummary/baybe.utils.dataframe.pretty_print_df.rst", "_autosummary/baybe.utils.dataframe.to_tensor.rst", "_autosummary/baybe.utils.interval.rst", "_autosummary/baybe.utils.interval.InfiniteIntervalError.rst", "_autosummary/baybe.utils.interval.Interval.rst", "_autosummary/baybe.utils.interval.convert_bounds.rst", "_autosummary/baybe.utils.interval.use_fallback_constructor_hook.rst", "_autosummary/baybe.utils.numerical.rst", "_autosummary/baybe.utils.numerical.DTypeFloatNumpy.rst", "_autosummary/baybe.utils.numerical.DTypeFloatONNX.rst", "_autosummary/baybe.utils.numerical.closer_element.rst", "_autosummary/baybe.utils.numerical.closest_element.rst", "_autosummary/baybe.utils.numerical.geom_mean.rst", "_autosummary/baybe.utils.plotting.rst", "_autosummary/baybe.utils.plotting.create_example_plots.rst", "_autosummary/baybe.utils.sampling_algorithms.rst", "_autosummary/baybe.utils.sampling_algorithms.farthest_point_sampling.rst", "_autosummary/baybe.utils.torch.rst", "_autosummary/baybe.utils.torch.DTypeFloatTorch.rst", "examples/Backtesting/Backtesting.md", "examples/Backtesting/botorch_analytical.md", "examples/Backtesting/custom_analytical.md", "examples/Backtesting/full_initial_data.md", "examples/Backtesting/full_lookup.md", "examples/Backtesting/hybrid.md", "examples/Backtesting/impute_mode.md", "examples/Backtesting/multi_target.md", "examples/Basics/Basics.md", "examples/Basics/campaign.md", "examples/Basics/recommenders.md", "examples/Constraints_Continuous/Constraints_Continuous.md", "examples/Constraints_Continuous/hybrid_space.md", "examples/Constraints_Continuous/linear_constraints.md", "examples/Constraints_Discrete/Constraints_Discrete.md", "examples/Constraints_Discrete/custom_constraints.md", "examples/Constraints_Discrete/dependency_constraints.md", "examples/Constraints_Discrete/exclusion_constraints.md", "examples/Constraints_Discrete/mixture_constraints.md", "examples/Constraints_Discrete/prodsum_constraints.md", "examples/Custom_Surrogates/Custom_Surrogates.md", "examples/Custom_Surrogates/custom_architecture_sklearn.md", "examples/Custom_Surrogates/custom_architecture_torch.md", "examples/Custom_Surrogates/custom_pretrained.md", "examples/Custom_Surrogates/surrogate_params.md", "examples/Multi_Target/Multi_Target.md", "examples/Multi_Target/desirability.md", "examples/Searchspaces/Searchspaces.md", "examples/Searchspaces/continuous_space_botorch_function.md", "examples/Searchspaces/continuous_space_custom_function.md", "examples/Searchspaces/discrete_space.md", "examples/Searchspaces/hybrid_space.md", "examples/Serialization/Serialization.md", "examples/Serialization/basic_serialization.md", "examples/Serialization/create_from_config.md", "examples/Serialization/validate_config.md", "examples/Transfer_Learning/Transfer_Learning.md", "examples/Transfer_Learning/backtesting.md", "examples/Transfer_Learning/basic_transfer_learning.md", "examples/examples.md", "index.md", "known_issues.md", "misc/changelog_link.md", "misc/contributing_link.md", "misc/contributors_link.md", "misc/license_link.md", "userguide/campaigns.md", "userguide/constraints.md", "userguide/objective.md", "userguide/parameters.md", "userguide/recommenders.md", "userguide/searchspace.md", "userguide/serialization.md", "userguide/simulation.md", "userguide/surrogates.md", "userguide/targets.md", "userguide/transfer_learning.md", "userguide/userguide.md"], "indexentries": {"__init__() (baybe.exceptions.testexception method)": [[57, "baybe.exceptions.TestException.__init__", false]], "__new__() (baybe.exceptions.testexception method)": [[57, "baybe.exceptions.TestException.__new__", false]], "baybe": [[0, "module-baybe", false]], "baybe.exceptions": [[47, "module-baybe.exceptions", false]], "module": [[0, "module-baybe", false], [47, "module-baybe.exceptions", false]], "testexception": [[57, "baybe.exceptions.TestException", false]]}, "objects": {"": [[0, 0, 0, "-", "baybe"]], "baybe": [[1, 0, 0, "-", "acquisition"], [22, 0, 0, "-", "campaign"], [24, 0, 0, "-", "constraints"], [47, 0, 0, "-", "exceptions"], [59, 0, 0, "-", "kernels"], [69, 0, 0, "-", "objective"], [71, 0, 0, "-", "objectives"], [82, 0, 0, "-", "parameters"], [109, 0, 0, "-", "recommenders"], [142, 0, 0, "-", "scaler"], [145, 0, 0, "-", "searchspace"], [159, 0, 0, "-", "serialization"], [172, 0, 0, "-", "simulation"], [180, 0, 0, "-", "strategies"], [181, 0, 0, "-", "surrogates"], [204, 0, 0, "-", "targets"], [216, 0, 0, "-", "telemetry"], [221, 0, 0, "-", "utils"]], "baybe.acquisition": [[2, 0, 0, "-", "acqfs"], [15, 0, 0, "-", "base"], [17, 0, 0, "-", "partial"], [19, 0, 0, "-", "utils"]], "baybe.acquisition.acqfs": [[3, 1, 1, "", "ExpectedImprovement"], [4, 1, 1, "", "LogExpectedImprovement"], [5, 1, 1, "", "PosteriorMean"], [6, 1, 1, "", "ProbabilityOfImprovement"], [7, 1, 1, "", "UpperConfidenceBound"], [8, 1, 1, "", "qExpectedImprovement"], [9, 1, 1, "", "qLogExpectedImprovement"], [10, 1, 1, "", "qLogNoisyExpectedImprovement"], [11, 1, 1, "", "qNoisyExpectedImprovement"], [12, 1, 1, "", "qProbabilityOfImprovement"], [13, 1, 1, "", "qSimpleRegret"], [14, 1, 1, "", "qUpperConfidenceBound"]], "baybe.acquisition.acqfs.ExpectedImprovement": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "abbreviation"], [3, 2, 1, "", "from_dict"], [3, 2, 1, "", "from_json"], [3, 2, 1, "", "to_botorch"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.LogExpectedImprovement": [[4, 2, 1, "", "__init__"], [4, 3, 1, "", "abbreviation"], [4, 2, 1, "", "from_dict"], [4, 2, 1, "", "from_json"], [4, 2, 1, "", "to_botorch"], [4, 2, 1, "", "to_dict"], [4, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.PosteriorMean": [[5, 2, 1, "", "__init__"], [5, 3, 1, "", "abbreviation"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "from_json"], [5, 2, 1, "", "to_botorch"], [5, 2, 1, "", "to_dict"], [5, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.ProbabilityOfImprovement": [[6, 2, 1, "", "__init__"], [6, 3, 1, "", "abbreviation"], [6, 2, 1, "", "from_dict"], [6, 2, 1, "", "from_json"], [6, 2, 1, "", "to_botorch"], [6, 2, 1, "", "to_dict"], [6, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.UpperConfidenceBound": [[7, 2, 1, "", "__init__"], [7, 3, 1, "", "abbreviation"], [7, 3, 1, "", "beta"], [7, 2, 1, "", "from_dict"], [7, 2, 1, "", "from_json"], [7, 2, 1, "", "to_botorch"], [7, 2, 1, "", "to_dict"], [7, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qExpectedImprovement": [[8, 2, 1, "", "__init__"], [8, 3, 1, "", "abbreviation"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "from_json"], [8, 2, 1, "", "to_botorch"], [8, 2, 1, "", "to_dict"], [8, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qLogExpectedImprovement": [[9, 2, 1, "", "__init__"], [9, 3, 1, "", "abbreviation"], [9, 2, 1, "", "from_dict"], [9, 2, 1, "", "from_json"], [9, 2, 1, "", "to_botorch"], [9, 2, 1, "", "to_dict"], [9, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement": [[10, 2, 1, "", "__init__"], [10, 3, 1, "", "abbreviation"], [10, 2, 1, "", "from_dict"], [10, 2, 1, "", "from_json"], [10, 3, 1, "", "prune_baseline"], [10, 2, 1, "", "to_botorch"], [10, 2, 1, "", "to_dict"], [10, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qNoisyExpectedImprovement": [[11, 2, 1, "", "__init__"], [11, 3, 1, "", "abbreviation"], [11, 2, 1, "", "from_dict"], [11, 2, 1, "", "from_json"], [11, 3, 1, "", "prune_baseline"], [11, 2, 1, "", "to_botorch"], [11, 2, 1, "", "to_dict"], [11, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qProbabilityOfImprovement": [[12, 2, 1, "", "__init__"], [12, 3, 1, "", "abbreviation"], [12, 2, 1, "", "from_dict"], [12, 2, 1, "", "from_json"], [12, 2, 1, "", "to_botorch"], [12, 2, 1, "", "to_dict"], [12, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qSimpleRegret": [[13, 2, 1, "", "__init__"], [13, 3, 1, "", "abbreviation"], [13, 2, 1, "", "from_dict"], [13, 2, 1, "", "from_json"], [13, 2, 1, "", "to_botorch"], [13, 2, 1, "", "to_dict"], [13, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qUpperConfidenceBound": [[14, 2, 1, "", "__init__"], [14, 3, 1, "", "abbreviation"], [14, 3, 1, "", "beta"], [14, 2, 1, "", "from_dict"], [14, 2, 1, "", "from_json"], [14, 2, 1, "", "to_botorch"], [14, 2, 1, "", "to_dict"], [14, 2, 1, "", "to_json"]], "baybe.acquisition.base": [[16, 1, 1, "", "AcquisitionFunction"]], "baybe.acquisition.base.AcquisitionFunction": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "abbreviation"], [16, 2, 1, "", "from_dict"], [16, 2, 1, "", "from_json"], [16, 2, 1, "", "to_botorch"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "to_json"]], "baybe.acquisition.partial": [[18, 1, 1, "", "PartialAcquisitionFunction"]], "baybe.acquisition.partial.PartialAcquisitionFunction": [[18, 2, 1, "", "__init__"], [18, 3, 1, "", "botorch_acqf"], [18, 3, 1, "", "pin_discrete"], [18, 3, 1, "", "pinned_part"], [18, 2, 1, "", "set_X_pending"]], "baybe.acquisition.utils": [[20, 4, 1, "", "convert_acqf"], [21, 4, 1, "", "str_to_acqf"]], "baybe.campaign": [[23, 1, 1, "", "Campaign"]], "baybe.campaign.Campaign": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "add_measurements"], [23, 2, 1, "", "from_config"], [23, 2, 1, "", "from_dict"], [23, 2, 1, "", "from_json"], [23, 5, 1, "", "measurements"], [23, 3, 1, "", "n_batches_done"], [23, 3, 1, "", "n_fits_done"], [23, 3, 1, "", "numerical_measurements_must_be_within_tolerance"], [23, 3, 1, "", "objective"], [23, 5, 1, "", "parameters"], [23, 2, 1, "", "recommend"], [23, 3, 1, "", "recommender"], [23, 3, 1, "", "searchspace"], [23, 3, 1, "", "strategy"], [23, 5, 1, "", "targets"], [23, 2, 1, "", "to_dict"], [23, 2, 1, "", "to_json"], [23, 2, 1, "", "validate_config"]], "baybe.constraints": [[25, 0, 0, "-", "base"], [29, 0, 0, "-", "conditions"], [33, 0, 0, "-", "continuous"], [36, 0, 0, "-", "discrete"], [45, 0, 0, "-", "validation"]], "baybe.constraints.base": [[26, 1, 1, "", "Constraint"], [27, 1, 1, "", "ContinuousConstraint"], [28, 1, 1, "", "DiscreteConstraint"]], "baybe.constraints.base.Constraint": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "eval_during_creation"], [26, 3, 1, "", "eval_during_modeling"], [26, 2, 1, "", "from_dict"], [26, 2, 1, "", "from_json"], [26, 5, 1, "", "is_continuous"], [26, 5, 1, "", "is_discrete"], [26, 3, 1, "", "parameters"], [26, 2, 1, "", "summary"], [26, 2, 1, "", "to_dict"], [26, 2, 1, "", "to_json"]], "baybe.constraints.base.ContinuousConstraint": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "coefficients"], [27, 3, 1, "", "eval_during_creation"], [27, 3, 1, "", "eval_during_modeling"], [27, 2, 1, "", "from_dict"], [27, 2, 1, "", "from_json"], [27, 5, 1, "", "is_continuous"], [27, 5, 1, "", "is_discrete"], [27, 3, 1, "", "parameters"], [27, 3, 1, "", "rhs"], [27, 2, 1, "", "summary"], [27, 2, 1, "", "to_botorch"], [27, 2, 1, "", "to_dict"], [27, 2, 1, "", "to_json"]], "baybe.constraints.base.DiscreteConstraint": [[28, 2, 1, "", "__init__"], [28, 3, 1, "", "eval_during_creation"], [28, 3, 1, "", "eval_during_modeling"], [28, 2, 1, "", "from_dict"], [28, 2, 1, "", "from_json"], [28, 2, 1, "", "get_invalid"], [28, 5, 1, "", "is_continuous"], [28, 5, 1, "", "is_discrete"], [28, 3, 1, "", "parameters"], [28, 2, 1, "", "summary"], [28, 2, 1, "", "to_dict"], [28, 2, 1, "", "to_json"]], "baybe.constraints.conditions": [[30, 1, 1, "", "Condition"], [31, 1, 1, "", "SubSelectionCondition"], [32, 1, 1, "", "ThresholdCondition"]], "baybe.constraints.conditions.Condition": [[30, 2, 1, "", "evaluate"], [30, 2, 1, "", "from_dict"], [30, 2, 1, "", "from_json"], [30, 2, 1, "", "to_dict"], [30, 2, 1, "", "to_json"]], "baybe.constraints.conditions.SubSelectionCondition": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "evaluate"], [31, 2, 1, "", "from_dict"], [31, 2, 1, "", "from_json"], [31, 3, 1, "", "selection"], [31, 2, 1, "", "to_dict"], [31, 2, 1, "", "to_json"]], "baybe.constraints.conditions.ThresholdCondition": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "evaluate"], [32, 2, 1, "", "from_dict"], [32, 2, 1, "", "from_json"], [32, 3, 1, "", "operator"], [32, 3, 1, "", "threshold"], [32, 2, 1, "", "to_dict"], [32, 2, 1, "", "to_json"], [32, 3, 1, "", "tolerance"]], "baybe.constraints.continuous": [[34, 1, 1, "", "ContinuousLinearEqualityConstraint"], [35, 1, 1, "", "ContinuousLinearInequalityConstraint"]], "baybe.constraints.continuous.ContinuousLinearEqualityConstraint": [[34, 2, 1, "", "__init__"], [34, 3, 1, "", "coefficients"], [34, 3, 1, "", "eval_during_creation"], [34, 3, 1, "", "eval_during_modeling"], [34, 2, 1, "", "from_dict"], [34, 2, 1, "", "from_json"], [34, 5, 1, "", "is_continuous"], [34, 5, 1, "", "is_discrete"], [34, 3, 1, "", "parameters"], [34, 3, 1, "", "rhs"], [34, 2, 1, "", "summary"], [34, 2, 1, "", "to_botorch"], [34, 2, 1, "", "to_dict"], [34, 2, 1, "", "to_json"]], "baybe.constraints.continuous.ContinuousLinearInequalityConstraint": [[35, 2, 1, "", "__init__"], [35, 3, 1, "", "coefficients"], [35, 3, 1, "", "eval_during_creation"], [35, 3, 1, "", "eval_during_modeling"], [35, 2, 1, "", "from_dict"], [35, 2, 1, "", "from_json"], [35, 5, 1, "", "is_continuous"], [35, 5, 1, "", "is_discrete"], [35, 3, 1, "", "parameters"], [35, 3, 1, "", "rhs"], [35, 2, 1, "", "summary"], [35, 2, 1, "", "to_botorch"], [35, 2, 1, "", "to_dict"], [35, 2, 1, "", "to_json"]], "baybe.constraints.discrete": [[37, 1, 1, "", "DiscreteCustomConstraint"], [38, 1, 1, "", "DiscreteDependenciesConstraint"], [39, 1, 1, "", "DiscreteExcludeConstraint"], [40, 1, 1, "", "DiscreteLinkedParametersConstraint"], [41, 1, 1, "", "DiscreteNoLabelDuplicatesConstraint"], [42, 1, 1, "", "DiscretePermutationInvarianceConstraint"], [43, 1, 1, "", "DiscreteProductConstraint"], [44, 1, 1, "", "DiscreteSumConstraint"]], "baybe.constraints.discrete.DiscreteCustomConstraint": [[37, 2, 1, "", "__init__"], [37, 3, 1, "", "eval_during_creation"], [37, 3, 1, "", "eval_during_modeling"], [37, 2, 1, "", "from_dict"], [37, 2, 1, "", "from_json"], [37, 2, 1, "", "get_invalid"], [37, 5, 1, "", "is_continuous"], [37, 5, 1, "", "is_discrete"], [37, 3, 1, "", "parameters"], [37, 2, 1, "", "summary"], [37, 2, 1, "", "to_dict"], [37, 2, 1, "", "to_json"], [37, 3, 1, "", "validator"]], "baybe.constraints.discrete.DiscreteDependenciesConstraint": [[38, 2, 1, "", "__init__"], [38, 3, 1, "", "affected_parameters"], [38, 3, 1, "", "conditions"], [38, 3, 1, "", "eval_during_creation"], [38, 3, 1, "", "eval_during_modeling"], [38, 2, 1, "", "from_dict"], [38, 2, 1, "", "from_json"], [38, 2, 1, "", "get_invalid"], [38, 5, 1, "", "is_continuous"], [38, 5, 1, "", "is_discrete"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "permutation_invariant"], [38, 2, 1, "", "summary"], [38, 2, 1, "", "to_dict"], [38, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteExcludeConstraint": [[39, 2, 1, "", "__init__"], [39, 3, 1, "", "combiner"], [39, 3, 1, "", "conditions"], [39, 3, 1, "", "eval_during_creation"], [39, 3, 1, "", "eval_during_modeling"], [39, 2, 1, "", "from_dict"], [39, 2, 1, "", "from_json"], [39, 2, 1, "", "get_invalid"], [39, 5, 1, "", "is_continuous"], [39, 5, 1, "", "is_discrete"], [39, 3, 1, "", "parameters"], [39, 2, 1, "", "summary"], [39, 2, 1, "", "to_dict"], [39, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteLinkedParametersConstraint": [[40, 2, 1, "", "__init__"], [40, 3, 1, "", "eval_during_creation"], [40, 3, 1, "", "eval_during_modeling"], [40, 2, 1, "", "from_dict"], [40, 2, 1, "", "from_json"], [40, 2, 1, "", "get_invalid"], [40, 5, 1, "", "is_continuous"], [40, 5, 1, "", "is_discrete"], [40, 3, 1, "", "parameters"], [40, 2, 1, "", "summary"], [40, 2, 1, "", "to_dict"], [40, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint": [[41, 2, 1, "", "__init__"], [41, 3, 1, "", "eval_during_creation"], [41, 3, 1, "", "eval_during_modeling"], [41, 2, 1, "", "from_dict"], [41, 2, 1, "", "from_json"], [41, 2, 1, "", "get_invalid"], [41, 5, 1, "", "is_continuous"], [41, 5, 1, "", "is_discrete"], [41, 3, 1, "", "parameters"], [41, 2, 1, "", "summary"], [41, 2, 1, "", "to_dict"], [41, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint": [[42, 2, 1, "", "__init__"], [42, 3, 1, "", "dependencies"], [42, 3, 1, "", "eval_during_creation"], [42, 3, 1, "", "eval_during_modeling"], [42, 2, 1, "", "from_dict"], [42, 2, 1, "", "from_json"], [42, 2, 1, "", "get_invalid"], [42, 5, 1, "", "is_continuous"], [42, 5, 1, "", "is_discrete"], [42, 3, 1, "", "parameters"], [42, 2, 1, "", "summary"], [42, 2, 1, "", "to_dict"], [42, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteProductConstraint": [[43, 2, 1, "", "__init__"], [43, 3, 1, "", "condition"], [43, 3, 1, "", "eval_during_creation"], [43, 3, 1, "", "eval_during_modeling"], [43, 2, 1, "", "from_dict"], [43, 2, 1, "", "from_json"], [43, 2, 1, "", "get_invalid"], [43, 5, 1, "", "is_continuous"], [43, 5, 1, "", "is_discrete"], [43, 3, 1, "", "parameters"], [43, 2, 1, "", "summary"], [43, 2, 1, "", "to_dict"], [43, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteSumConstraint": [[44, 2, 1, "", "__init__"], [44, 3, 1, "", "condition"], [44, 3, 1, "", "eval_during_creation"], [44, 3, 1, "", "eval_during_modeling"], [44, 2, 1, "", "from_dict"], [44, 2, 1, "", "from_json"], [44, 2, 1, "", "get_invalid"], [44, 5, 1, "", "is_continuous"], [44, 5, 1, "", "is_discrete"], [44, 3, 1, "", "parameters"], [44, 2, 1, "", "summary"], [44, 2, 1, "", "to_dict"], [44, 2, 1, "", "to_json"]], "baybe.constraints.validation": [[46, 4, 1, "", "validate_constraints"]], "baybe.exceptions": [[48, 6, 1, "", "DeprecationError"], [49, 6, 1, "", "EmptySearchSpaceError"], [50, 6, 1, "", "IncompatibleSearchSpaceError"], [51, 6, 1, "", "NoMCAcquisitionFunctionError"], [52, 6, 1, "", "NoRecommendersLeftError"], [53, 6, 1, "", "NotEnoughPointsLeftError"], [54, 6, 1, "", "NothingToSimulateError"], [55, 6, 1, "", "NumericalUnderflowError"], [56, 6, 1, "", "OptionalImportError"], [57, 6, 1, "", "TestException"], [58, 6, 1, "", "UnidentifiedSubclassError"]], "baybe.exceptions.DeprecationError": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "__new__"]], "baybe.exceptions.EmptySearchSpaceError": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "__new__"]], "baybe.exceptions.IncompatibleSearchSpaceError": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "__new__"]], "baybe.exceptions.NoMCAcquisitionFunctionError": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "__new__"]], "baybe.exceptions.NoRecommendersLeftError": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "__new__"]], "baybe.exceptions.NotEnoughPointsLeftError": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "__new__"]], "baybe.exceptions.NothingToSimulateError": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "__new__"]], "baybe.exceptions.NumericalUnderflowError": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "__new__"]], "baybe.exceptions.OptionalImportError": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "__new__"]], "baybe.exceptions.TestException": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "__new__"]], "baybe.exceptions.UnidentifiedSubclassError": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "__new__"]], "baybe.kernels": [[60, 0, 0, "-", "base"], [62, 0, 0, "-", "basic"], [64, 0, 0, "-", "priors"]], "baybe.kernels.base": [[61, 1, 1, "", "Kernel"]], "baybe.kernels.base.Kernel": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "from_dict"], [61, 2, 1, "", "from_json"], [61, 3, 1, "", "lengthscale_prior"], [61, 2, 1, "", "to_dict"], [61, 2, 1, "", "to_gpytorch"], [61, 2, 1, "", "to_json"]], "baybe.kernels.basic": [[63, 1, 1, "", "MaternKernel"]], "baybe.kernels.basic.MaternKernel": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "from_dict"], [63, 2, 1, "", "from_json"], [63, 3, 1, "", "lengthscale_prior"], [63, 3, 1, "", "nu"], [63, 2, 1, "", "to_dict"], [63, 2, 1, "", "to_gpytorch"], [63, 2, 1, "", "to_json"]], "baybe.kernels.priors": [[65, 0, 0, "-", "base"], [67, 0, 0, "-", "basic"]], "baybe.kernels.priors.base": [[66, 1, 1, "", "Prior"]], "baybe.kernels.priors.base.Prior": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "from_dict"], [66, 2, 1, "", "from_json"], [66, 2, 1, "", "to_dict"], [66, 2, 1, "", "to_gpytorch"], [66, 2, 1, "", "to_json"]], "baybe.kernels.priors.basic": [[68, 1, 1, "", "GammaPrior"]], "baybe.kernels.priors.basic.GammaPrior": [[68, 2, 1, "", "__init__"], [68, 3, 1, "", "concentration"], [68, 2, 1, "", "from_dict"], [68, 2, 1, "", "from_json"], [68, 3, 1, "", "rate"], [68, 2, 1, "", "to_dict"], [68, 2, 1, "", "to_gpytorch"], [68, 2, 1, "", "to_json"]], "baybe.objective": [[70, 4, 1, "", "Objective"]], "baybe.objectives": [[72, 0, 0, "-", "base"], [75, 0, 0, "-", "desirability"], [78, 0, 0, "-", "enum"], [80, 0, 0, "-", "single"]], "baybe.objectives.base": [[73, 1, 1, "", "Objective"], [74, 4, 1, "", "to_objective"]], "baybe.objectives.base.Objective": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "from_dict"], [73, 2, 1, "", "from_json"], [73, 5, 1, "", "targets"], [73, 2, 1, "", "to_dict"], [73, 2, 1, "", "to_json"], [73, 2, 1, "", "transform"]], "baybe.objectives.desirability": [[76, 1, 1, "", "DesirabilityObjective"], [77, 4, 1, "", "scalarize"]], "baybe.objectives.desirability.DesirabilityObjective": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "from_dict"], [76, 2, 1, "", "from_json"], [76, 3, 1, "", "scalarizer"], [76, 5, 1, "", "targets"], [76, 2, 1, "", "to_dict"], [76, 2, 1, "", "to_json"], [76, 2, 1, "", "transform"], [76, 3, 1, "", "weights"]], "baybe.objectives.enum": [[79, 1, 1, "", "Scalarizer"]], "baybe.objectives.enum.Scalarizer": [[79, 3, 1, "", "GEOM_MEAN"], [79, 3, 1, "", "MEAN"]], "baybe.objectives.single": [[81, 1, 1, "", "SingleTargetObjective"]], "baybe.objectives.single.SingleTargetObjective": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "from_dict"], [81, 2, 1, "", "from_json"], [81, 5, 1, "", "targets"], [81, 2, 1, "", "to_dict"], [81, 2, 1, "", "to_json"], [81, 2, 1, "", "transform"]], "baybe.parameters": [[83, 0, 0, "-", "base"], [87, 0, 0, "-", "categorical"], [90, 0, 0, "-", "custom"], [92, 0, 0, "-", "enum"], [97, 0, 0, "-", "numerical"], [100, 0, 0, "-", "substance"], [103, 0, 0, "-", "utils"], [105, 0, 0, "-", "validation"]], "baybe.parameters.base": [[84, 1, 1, "", "ContinuousParameter"], [85, 1, 1, "", "DiscreteParameter"], [86, 1, 1, "", "Parameter"]], "baybe.parameters.base.ContinuousParameter": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "from_dict"], [84, 2, 1, "", "from_json"], [84, 2, 1, "", "is_in_range"], [84, 3, 1, "", "is_numeric"], [84, 3, 1, "", "name"], [84, 2, 1, "", "summary"], [84, 2, 1, "", "to_dict"], [84, 2, 1, "", "to_json"]], "baybe.parameters.base.DiscreteParameter": [[85, 2, 1, "", "__init__"], [85, 5, 1, "", "comp_df"], [85, 3, 1, "", "encoding"], [85, 2, 1, "", "from_dict"], [85, 2, 1, "", "from_json"], [85, 2, 1, "", "is_in_range"], [85, 3, 1, "", "is_numeric"], [85, 3, 1, "", "name"], [85, 2, 1, "", "summary"], [85, 2, 1, "", "to_dict"], [85, 2, 1, "", "to_json"], [85, 2, 1, "", "transform_rep_exp2comp"], [85, 5, 1, "", "values"]], "baybe.parameters.base.Parameter": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "from_dict"], [86, 2, 1, "", "from_json"], [86, 2, 1, "", "is_in_range"], [86, 3, 1, "", "is_numeric"], [86, 3, 1, "", "name"], [86, 2, 1, "", "summary"], [86, 2, 1, "", "to_dict"], [86, 2, 1, "", "to_json"]], "baybe.parameters.categorical": [[88, 1, 1, "", "CategoricalParameter"], [89, 1, 1, "", "TaskParameter"]], "baybe.parameters.categorical.CategoricalParameter": [[88, 2, 1, "", "__init__"], [88, 5, 1, "", "comp_df"], [88, 3, 1, "", "encoding"], [88, 2, 1, "", "from_dict"], [88, 2, 1, "", "from_json"], [88, 2, 1, "", "is_in_range"], [88, 3, 1, "", "is_numeric"], [88, 3, 1, "", "name"], [88, 2, 1, "", "summary"], [88, 2, 1, "", "to_dict"], [88, 2, 1, "", "to_json"], [88, 2, 1, "", "transform_rep_exp2comp"], [88, 5, 1, "", "values"]], "baybe.parameters.categorical.TaskParameter": [[89, 2, 1, "", "__init__"], [89, 3, 1, "", "active_values"], [89, 5, 1, "", "comp_df"], [89, 3, 1, "", "encoding"], [89, 2, 1, "", "from_dict"], [89, 2, 1, "", "from_json"], [89, 2, 1, "", "is_in_range"], [89, 3, 1, "", "is_numeric"], [89, 3, 1, "", "name"], [89, 2, 1, "", "summary"], [89, 2, 1, "", "to_dict"], [89, 2, 1, "", "to_json"], [89, 2, 1, "", "transform_rep_exp2comp"], [89, 5, 1, "", "values"]], "baybe.parameters.custom": [[91, 1, 1, "", "CustomDiscreteParameter"]], "baybe.parameters.custom.CustomDiscreteParameter": [[91, 2, 1, "", "__init__"], [91, 5, 1, "", "comp_df"], [91, 3, 1, "", "data"], [91, 3, 1, "", "decorrelate"], [91, 3, 1, "", "encoding"], [91, 2, 1, "", "from_dict"], [91, 2, 1, "", "from_json"], [91, 2, 1, "", "is_in_range"], [91, 3, 1, "", "is_numeric"], [91, 3, 1, "", "name"], [91, 2, 1, "", "summary"], [91, 2, 1, "", "to_dict"], [91, 2, 1, "", "to_json"], [91, 2, 1, "", "transform_rep_exp2comp"], [91, 5, 1, "", "values"]], "baybe.parameters.enum": [[93, 1, 1, "", "CategoricalEncoding"], [94, 1, 1, "", "CustomEncoding"], [95, 1, 1, "", "ParameterEncoding"], [96, 1, 1, "", "SubstanceEncoding"]], "baybe.parameters.enum.CategoricalEncoding": [[93, 3, 1, "", "INT"], [93, 3, 1, "", "OHE"], [93, 2, 1, "", "__new__"]], "baybe.parameters.enum.CustomEncoding": [[94, 3, 1, "", "CUSTOM"], [94, 2, 1, "", "__new__"]], "baybe.parameters.enum.SubstanceEncoding": [[96, 3, 1, "", "MORDRED"], [96, 3, 1, "", "MORGAN_FP"], [96, 3, 1, "", "RDKIT"], [96, 2, 1, "", "__new__"]], "baybe.parameters.numerical": [[98, 1, 1, "", "NumericalContinuousParameter"], [99, 1, 1, "", "NumericalDiscreteParameter"]], "baybe.parameters.numerical.NumericalContinuousParameter": [[98, 2, 1, "", "__init__"], [98, 3, 1, "", "bounds"], [98, 2, 1, "", "from_dict"], [98, 2, 1, "", "from_json"], [98, 2, 1, "", "is_in_range"], [98, 3, 1, "", "is_numeric"], [98, 3, 1, "", "name"], [98, 2, 1, "", "summary"], [98, 2, 1, "", "to_dict"], [98, 2, 1, "", "to_json"]], "baybe.parameters.numerical.NumericalDiscreteParameter": [[99, 2, 1, "", "__init__"], [99, 5, 1, "", "comp_df"], [99, 3, 1, "", "encoding"], [99, 2, 1, "", "from_dict"], [99, 2, 1, "", "from_json"], [99, 2, 1, "", "is_in_range"], [99, 3, 1, "", "is_numeric"], [99, 3, 1, "", "name"], [99, 2, 1, "", "summary"], [99, 2, 1, "", "to_dict"], [99, 2, 1, "", "to_json"], [99, 3, 1, "", "tolerance"], [99, 2, 1, "", "transform_rep_exp2comp"], [99, 5, 1, "", "values"]], "baybe.parameters.substance": [[101, 3, 1, "", "Smiles"], [102, 1, 1, "", "SubstanceParameter"]], "baybe.parameters.substance.SubstanceParameter": [[102, 2, 1, "", "__init__"], [102, 5, 1, "", "comp_df"], [102, 3, 1, "", "data"], [102, 3, 1, "", "decorrelate"], [102, 3, 1, "", "encoding"], [102, 2, 1, "", "from_dict"], [102, 2, 1, "", "from_json"], [102, 2, 1, "", "is_in_range"], [102, 3, 1, "", "is_numeric"], [102, 3, 1, "", "name"], [102, 2, 1, "", "summary"], [102, 2, 1, "", "to_dict"], [102, 2, 1, "", "to_json"], [102, 2, 1, "", "transform_rep_exp2comp"], [102, 5, 1, "", "values"]], "baybe.parameters.utils": [[104, 4, 1, "", "get_parameters_from_dataframe"]], "baybe.parameters.validation": [[106, 4, 1, "", "validate_decorrelation"], [107, 4, 1, "", "validate_is_finite"], [108, 4, 1, "", "validate_unique_values"]], "baybe.recommenders": [[110, 0, 0, "-", "base"], [112, 0, 0, "-", "deprecation"], [114, 0, 0, "-", "meta"], [121, 0, 0, "-", "naive"], [123, 0, 0, "-", "pure"]], "baybe.recommenders.base": [[111, 1, 1, "", "RecommenderProtocol"]], "baybe.recommenders.base.RecommenderProtocol": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "recommend"]], "baybe.recommenders.deprecation": [[113, 4, 1, "", "structure_recommender_protocol"]], "baybe.recommenders.meta": [[115, 0, 0, "-", "base"], [117, 0, 0, "-", "sequential"]], "baybe.recommenders.meta.base": [[116, 1, 1, "", "MetaRecommender"]], "baybe.recommenders.meta.base.MetaRecommender": [[116, 2, 1, "", "__init__"], [116, 3, 1, "", "allow_recommending_already_measured"], [116, 3, 1, "", "allow_repeated_recommendations"], [116, 2, 1, "", "from_dict"], [116, 2, 1, "", "from_json"], [116, 2, 1, "", "recommend"], [116, 2, 1, "", "select_recommender"], [116, 2, 1, "", "to_dict"], [116, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential": [[118, 1, 1, "", "SequentialMetaRecommender"], [119, 1, 1, "", "StreamingSequentialMetaRecommender"], [120, 1, 1, "", "TwoPhaseMetaRecommender"]], "baybe.recommenders.meta.sequential.SequentialMetaRecommender": [[118, 2, 1, "", "__init__"], [118, 3, 1, "", "allow_recommending_already_measured"], [118, 3, 1, "", "allow_repeated_recommendations"], [118, 2, 1, "", "from_dict"], [118, 2, 1, "", "from_json"], [118, 3, 1, "", "mode"], [118, 2, 1, "", "recommend"], [118, 3, 1, "", "recommenders"], [118, 2, 1, "", "select_recommender"], [118, 2, 1, "", "to_dict"], [118, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender": [[119, 2, 1, "", "__init__"], [119, 3, 1, "", "allow_recommending_already_measured"], [119, 3, 1, "", "allow_repeated_recommendations"], [119, 2, 1, "", "default_iterator"], [119, 2, 1, "", "from_dict"], [119, 2, 1, "", "from_json"], [119, 2, 1, "", "recommend"], [119, 3, 1, "", "recommenders"], [119, 2, 1, "", "select_recommender"], [119, 2, 1, "", "to_dict"], [119, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender": [[120, 2, 1, "", "__init__"], [120, 3, 1, "", "allow_recommending_already_measured"], [120, 3, 1, "", "allow_repeated_recommendations"], [120, 2, 1, "", "from_dict"], [120, 2, 1, "", "from_json"], [120, 3, 1, "", "initial_recommender"], [120, 2, 1, "", "recommend"], [120, 3, 1, "", "recommender"], [120, 2, 1, "", "select_recommender"], [120, 3, 1, "", "switch_after"], [120, 2, 1, "", "to_dict"], [120, 2, 1, "", "to_json"]], "baybe.recommenders.naive": [[122, 1, 1, "", "NaiveHybridSpaceRecommender"]], "baybe.recommenders.naive.NaiveHybridSpaceRecommender": [[122, 2, 1, "", "__init__"], [122, 3, 1, "", "allow_recommending_already_measured"], [122, 3, 1, "", "allow_repeated_recommendations"], [122, 3, 1, "", "compatibility"], [122, 3, 1, "", "cont_recommender"], [122, 3, 1, "", "disc_recommender"], [122, 2, 1, "", "recommend"]], "baybe.recommenders.pure": [[124, 0, 0, "-", "base"], [126, 0, 0, "-", "bayesian"], [131, 0, 0, "-", "nonpredictive"]], "baybe.recommenders.pure.base": [[125, 1, 1, "", "PureRecommender"]], "baybe.recommenders.pure.base.PureRecommender": [[125, 2, 1, "", "__init__"], [125, 3, 1, "", "allow_recommending_already_measured"], [125, 3, 1, "", "allow_repeated_recommendations"], [125, 3, 1, "", "compatibility"], [125, 2, 1, "", "recommend"]], "baybe.recommenders.pure.bayesian": [[127, 0, 0, "-", "base"], [129, 0, 0, "-", "sequential_greedy"]], "baybe.recommenders.pure.bayesian.base": [[128, 1, 1, "", "BayesianRecommender"]], "baybe.recommenders.pure.bayesian.base.BayesianRecommender": [[128, 2, 1, "", "__init__"], [128, 3, 1, "", "acquisition_function"], [128, 3, 1, "", "acquisition_function_cls"], [128, 3, 1, "", "allow_recommending_already_measured"], [128, 3, 1, "", "allow_repeated_recommendations"], [128, 3, 1, "", "compatibility"], [128, 2, 1, "", "recommend"], [128, 3, 1, "", "surrogate_model"]], "baybe.recommenders.pure.bayesian.sequential_greedy": [[130, 1, 1, "", "SequentialGreedyRecommender"]], "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender": [[130, 2, 1, "", "__init__"], [130, 3, 1, "", "acquisition_function"], [130, 3, 1, "", "acquisition_function_cls"], [130, 3, 1, "", "allow_recommending_already_measured"], [130, 3, 1, "", "allow_repeated_recommendations"], [130, 3, 1, "", "compatibility"], [130, 3, 1, "", "hybrid_sampler"], [130, 2, 1, "", "recommend"], [130, 3, 1, "", "sampling_percentage"], [130, 3, 1, "", "surrogate_model"]], "baybe.recommenders.pure.nonpredictive": [[132, 0, 0, "-", "base"], [134, 0, 0, "-", "clustering"], [139, 0, 0, "-", "sampling"]], "baybe.recommenders.pure.nonpredictive.base": [[133, 1, 1, "", "NonPredictiveRecommender"]], "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender": [[133, 2, 1, "", "__init__"], [133, 3, 1, "", "allow_recommending_already_measured"], [133, 3, 1, "", "allow_repeated_recommendations"], [133, 3, 1, "", "compatibility"], [133, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering": [[135, 1, 1, "", "GaussianMixtureClusteringRecommender"], [136, 1, 1, "", "KMeansClusteringRecommender"], [137, 1, 1, "", "PAMClusteringRecommender"], [138, 1, 1, "", "SKLearnClusteringRecommender"]], "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender": [[135, 2, 1, "", "__init__"], [135, 3, 1, "", "allow_recommending_already_measured"], [135, 3, 1, "", "allow_repeated_recommendations"], [135, 3, 1, "", "compatibility"], [135, 3, 1, "", "model_class"], [135, 3, 1, "", "model_cluster_num_parameter_name"], [135, 3, 1, "", "model_params"], [135, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender": [[136, 2, 1, "", "__init__"], [136, 3, 1, "", "allow_recommending_already_measured"], [136, 3, 1, "", "allow_repeated_recommendations"], [136, 3, 1, "", "compatibility"], [136, 3, 1, "", "model_class"], [136, 3, 1, "", "model_cluster_num_parameter_name"], [136, 3, 1, "", "model_params"], [136, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender": [[137, 2, 1, "", "__init__"], [137, 3, 1, "", "allow_recommending_already_measured"], [137, 3, 1, "", "allow_repeated_recommendations"], [137, 3, 1, "", "compatibility"], [137, 3, 1, "", "model_class"], [137, 3, 1, "", "model_cluster_num_parameter_name"], [137, 3, 1, "", "model_params"], [137, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender": [[138, 2, 1, "", "__init__"], [138, 3, 1, "", "allow_recommending_already_measured"], [138, 3, 1, "", "allow_repeated_recommendations"], [138, 3, 1, "", "compatibility"], [138, 3, 1, "", "model_class"], [138, 3, 1, "", "model_cluster_num_parameter_name"], [138, 3, 1, "", "model_params"], [138, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.sampling": [[140, 1, 1, "", "FPSRecommender"], [141, 1, 1, "", "RandomRecommender"]], "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender": [[140, 2, 1, "", "__init__"], [140, 3, 1, "", "allow_recommending_already_measured"], [140, 3, 1, "", "allow_repeated_recommendations"], [140, 3, 1, "", "compatibility"], [140, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender": [[141, 2, 1, "", "__init__"], [141, 3, 1, "", "allow_recommending_already_measured"], [141, 3, 1, "", "allow_repeated_recommendations"], [141, 3, 1, "", "compatibility"], [141, 2, 1, "", "recommend"]], "baybe.scaler": [[143, 1, 1, "", "DefaultScaler"], [144, 1, 1, "", "Scaler"]], "baybe.scaler.DefaultScaler": [[143, 3, 1, "", "SUBCLASSES"], [143, 2, 1, "", "__init__"], [143, 2, 1, "", "fit_transform"], [143, 2, 1, "", "transform"], [143, 3, 1, "", "type"], [143, 2, 1, "", "untransform"]], "baybe.scaler.Scaler": [[144, 3, 1, "", "SUBCLASSES"], [144, 2, 1, "", "__init__"], [144, 2, 1, "", "fit_transform"], [144, 2, 1, "", "transform"], [144, 3, 1, "", "type"], [144, 2, 1, "", "untransform"]], "baybe.searchspace": [[146, 0, 0, "-", "continuous"], [148, 0, 0, "-", "core"], [152, 0, 0, "-", "discrete"], [156, 0, 0, "-", "validation"]], "baybe.searchspace.continuous": [[147, 1, 1, "", "SubspaceContinuous"]], "baybe.searchspace.continuous.SubspaceContinuous": [[147, 2, 1, "", "__init__"], [147, 3, 1, "", "constraints_lin_eq"], [147, 3, 1, "", "constraints_lin_ineq"], [147, 2, 1, "", "empty"], [147, 2, 1, "", "from_bounds"], [147, 2, 1, "", "from_dataframe"], [147, 2, 1, "", "from_dict"], [147, 2, 1, "", "from_json"], [147, 5, 1, "", "full_factorial"], [147, 5, 1, "", "is_empty"], [147, 5, 1, "", "param_bounds_comp"], [147, 5, 1, "", "param_names"], [147, 3, 1, "", "parameters"], [147, 2, 1, "", "samples_full_factorial"], [147, 2, 1, "", "samples_random"], [147, 2, 1, "", "to_dict"], [147, 2, 1, "", "to_json"], [147, 2, 1, "", "transform"]], "baybe.searchspace.core": [[149, 1, 1, "", "SearchSpace"], [150, 1, 1, "", "SearchSpaceType"], [151, 4, 1, "", "validate_searchspace_from_config"]], "baybe.searchspace.core.SearchSpace": [[149, 2, 1, "", "__init__"], [149, 5, 1, "", "constraints"], [149, 5, 1, "", "contains_mordred"], [149, 5, 1, "", "contains_rdkit"], [149, 3, 1, "", "continuous"], [149, 3, 1, "", "discrete"], [149, 2, 1, "", "from_dataframe"], [149, 2, 1, "", "from_dict"], [149, 2, 1, "", "from_json"], [149, 2, 1, "", "from_product"], [149, 5, 1, "", "n_tasks"], [149, 5, 1, "", "param_bounds_comp"], [149, 5, 1, "", "parameters"], [149, 5, 1, "", "task_idx"], [149, 2, 1, "", "to_dict"], [149, 2, 1, "", "to_json"], [149, 2, 1, "", "transform"], [149, 5, 1, "", "type"]], "baybe.searchspace.core.SearchSpaceType": [[150, 3, 1, "", "CONTINUOUS"], [150, 3, 1, "", "DISCRETE"], [150, 3, 1, "", "EITHER"], [150, 3, 1, "", "HYBRID"]], "baybe.searchspace.discrete": [[153, 1, 1, "", "SubspaceDiscrete"], [154, 4, 1, "", "parameter_cartesian_prod_to_df"], [155, 4, 1, "", "validate_simplex_subspace_from_config"]], "baybe.searchspace.discrete.SubspaceDiscrete": [[153, 2, 1, "", "__init__"], [153, 3, 1, "", "comp_rep"], [153, 3, 1, "", "constraints"], [153, 2, 1, "", "empty"], [153, 3, 1, "", "empty_encoding"], [153, 3, 1, "", "exp_rep"], [153, 2, 1, "", "from_dataframe"], [153, 2, 1, "", "from_dict"], [153, 2, 1, "", "from_json"], [153, 2, 1, "", "from_product"], [153, 2, 1, "", "from_simplex"], [153, 2, 1, "", "get_candidates"], [153, 5, 1, "", "is_empty"], [153, 2, 1, "", "mark_as_measured"], [153, 3, 1, "", "metadata"], [153, 5, 1, "", "param_bounds_comp"], [153, 3, 1, "", "parameters"], [153, 2, 1, "", "to_dict"], [153, 2, 1, "", "to_json"], [153, 2, 1, "", "transform"]], "baybe.searchspace.validation": [[157, 4, 1, "", "validate_parameter_names"], [158, 4, 1, "", "validate_parameters"]], "baybe.serialization": [[160, 0, 0, "-", "core"], [167, 0, 0, "-", "mixin"], [169, 0, 0, "-", "utils"]], "baybe.serialization.core": [[161, 4, 1, "", "block_deserialization_hook"], [162, 4, 1, "", "block_serialization_hook"], [163, 7, 1, "", "converter"], [164, 4, 1, "", "get_base_structure_hook"], [165, 4, 1, "", "select_constructor_hook"], [166, 4, 1, "", "unstructure_base"]], "baybe.serialization.mixin": [[168, 1, 1, "", "SerialMixin"]], "baybe.serialization.mixin.SerialMixin": [[168, 2, 1, "", "from_dict"], [168, 2, 1, "", "from_json"], [168, 2, 1, "", "to_dict"], [168, 2, 1, "", "to_json"]], "baybe.serialization.utils": [[170, 4, 1, "", "deserialize_dataframe"], [171, 4, 1, "", "serialize_dataframe"]], "baybe.simulation": [[173, 0, 0, "-", "core"], [175, 0, 0, "-", "lookup"], [176, 0, 0, "-", "scenarios"], [178, 0, 0, "-", "transfer_learning"]], "baybe.simulation.core": [[174, 4, 1, "", "simulate_experiment"]], "baybe.simulation.scenarios": [[177, 4, 1, "", "simulate_scenarios"]], "baybe.simulation.transfer_learning": [[179, 4, 1, "", "simulate_transfer_learning"]], "baybe.surrogates": [[182, 0, 0, "-", "base"], [184, 0, 0, "-", "custom"], [187, 0, 0, "-", "gaussian_process"], [189, 0, 0, "-", "linear"], [191, 0, 0, "-", "naive"], [193, 0, 0, "-", "ngboost"], [195, 0, 0, "-", "random_forest"], [197, 0, 0, "-", "utils"], [201, 0, 0, "-", "validation"]], "baybe.surrogates.base": [[183, 1, 1, "", "Surrogate"]], "baybe.surrogates.base.Surrogate": [[183, 2, 1, "", "__init__"], [183, 2, 1, "", "fit"], [183, 2, 1, "", "from_dict"], [183, 2, 1, "", "from_json"], [183, 3, 1, "", "joint_posterior"], [183, 2, 1, "", "posterior"], [183, 3, 1, "", "supports_transfer_learning"], [183, 2, 1, "", "to_dict"], [183, 2, 1, "", "to_json"]], "baybe.surrogates.custom": [[185, 1, 1, "", "CustomONNXSurrogate"], [186, 4, 1, "", "register_custom_architecture"]], "baybe.surrogates.custom.CustomONNXSurrogate": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "default_model"], [185, 2, 1, "", "fit"], [185, 2, 1, "", "from_dict"], [185, 2, 1, "", "from_json"], [185, 3, 1, "", "joint_posterior"], [185, 3, 1, "", "onnx_input_name"], [185, 3, 1, "", "onnx_str"], [185, 2, 1, "", "posterior"], [185, 3, 1, "", "supports_transfer_learning"], [185, 2, 1, "", "to_dict"], [185, 2, 1, "", "to_json"], [185, 2, 1, "", "validate_compatibility"]], "baybe.surrogates.gaussian_process": [[188, 1, 1, "", "GaussianProcessSurrogate"]], "baybe.surrogates.gaussian_process.GaussianProcessSurrogate": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "fit"], [188, 2, 1, "", "from_dict"], [188, 2, 1, "", "from_json"], [188, 3, 1, "", "joint_posterior"], [188, 3, 1, "", "kernel"], [188, 2, 1, "", "posterior"], [188, 3, 1, "", "supports_transfer_learning"], [188, 2, 1, "", "to_dict"], [188, 2, 1, "", "to_json"]], "baybe.surrogates.linear": [[190, 1, 1, "", "BayesianLinearSurrogate"]], "baybe.surrogates.linear.BayesianLinearSurrogate": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "fit"], [190, 2, 1, "", "from_dict"], [190, 2, 1, "", "from_json"], [190, 3, 1, "", "joint_posterior"], [190, 3, 1, "", "model_params"], [190, 2, 1, "", "posterior"], [190, 3, 1, "", "supports_transfer_learning"], [190, 2, 1, "", "to_dict"], [190, 2, 1, "", "to_json"]], "baybe.surrogates.naive": [[192, 1, 1, "", "MeanPredictionSurrogate"]], "baybe.surrogates.naive.MeanPredictionSurrogate": [[192, 2, 1, "", "__init__"], [192, 2, 1, "", "fit"], [192, 2, 1, "", "from_dict"], [192, 2, 1, "", "from_json"], [192, 3, 1, "", "joint_posterior"], [192, 2, 1, "", "posterior"], [192, 3, 1, "", "supports_transfer_learning"], [192, 2, 1, "", "to_dict"], [192, 2, 1, "", "to_json"]], "baybe.surrogates.ngboost": [[194, 1, 1, "", "NGBoostSurrogate"]], "baybe.surrogates.ngboost.NGBoostSurrogate": [[194, 2, 1, "", "__init__"], [194, 2, 1, "", "fit"], [194, 2, 1, "", "from_dict"], [194, 2, 1, "", "from_json"], [194, 3, 1, "", "joint_posterior"], [194, 3, 1, "", "model_params"], [194, 2, 1, "", "posterior"], [194, 3, 1, "", "supports_transfer_learning"], [194, 2, 1, "", "to_dict"], [194, 2, 1, "", "to_json"]], "baybe.surrogates.random_forest": [[196, 1, 1, "", "RandomForestSurrogate"]], "baybe.surrogates.random_forest.RandomForestSurrogate": [[196, 2, 1, "", "__init__"], [196, 2, 1, "", "fit"], [196, 2, 1, "", "from_dict"], [196, 2, 1, "", "from_json"], [196, 3, 1, "", "joint_posterior"], [196, 3, 1, "", "model_params"], [196, 2, 1, "", "posterior"], [196, 3, 1, "", "supports_transfer_learning"], [196, 2, 1, "", "to_dict"], [196, 2, 1, "", "to_json"]], "baybe.surrogates.utils": [[198, 4, 1, "", "autoscale"], [199, 4, 1, "", "batchify"], [200, 4, 1, "", "catch_constant_targets"]], "baybe.surrogates.validation": [[202, 4, 1, "", "get_model_params_validator"], [203, 4, 1, "", "validate_custom_architecture_cls"]], "baybe.targets": [[205, 0, 0, "-", "base"], [207, 0, 0, "-", "enum"], [210, 0, 0, "-", "numerical"], [212, 0, 0, "-", "transforms"]], "baybe.targets.base": [[206, 1, 1, "", "Target"]], "baybe.targets.base.Target": [[206, 2, 1, "", "__init__"], [206, 2, 1, "", "from_dict"], [206, 2, 1, "", "from_json"], [206, 3, 1, "", "name"], [206, 2, 1, "", "summary"], [206, 2, 1, "", "to_dict"], [206, 2, 1, "", "to_json"], [206, 2, 1, "", "to_objective"], [206, 2, 1, "", "transform"]], "baybe.targets.enum": [[208, 1, 1, "", "TargetMode"], [209, 1, 1, "", "TargetTransformation"]], "baybe.targets.enum.TargetMode": [[208, 3, 1, "", "MATCH"], [208, 3, 1, "", "MAX"], [208, 3, 1, "", "MIN"]], "baybe.targets.enum.TargetTransformation": [[209, 3, 1, "", "BELL"], [209, 3, 1, "", "LINEAR"], [209, 3, 1, "", "TRIANGULAR"]], "baybe.targets.numerical": [[211, 1, 1, "", "NumericalTarget"]], "baybe.targets.numerical.NumericalTarget": [[211, 2, 1, "", "__init__"], [211, 3, 1, "", "bounds"], [211, 2, 1, "", "from_dict"], [211, 2, 1, "", "from_json"], [211, 3, 1, "", "mode"], [211, 3, 1, "", "name"], [211, 2, 1, "", "summary"], [211, 2, 1, "", "to_dict"], [211, 2, 1, "", "to_json"], [211, 2, 1, "", "to_objective"], [211, 2, 1, "", "transform"], [211, 3, 1, "", "transformation"]], "baybe.targets.transforms": [[213, 4, 1, "", "bell_transform"], [214, 4, 1, "", "linear_transform"], [215, 4, 1, "", "triangular_transform"]], "baybe.telemetry": [[217, 4, 1, "", "get_user_details"], [218, 4, 1, "", "is_enabled"], [219, 4, 1, "", "telemetry_record_recommended_measurement_percentage"], [220, 4, 1, "", "telemetry_record_value"]], "baybe.utils": [[222, 0, 0, "-", "basic"], [233, 0, 0, "-", "boolean"], [237, 0, 0, "-", "botorch_wrapper"], [239, 0, 0, "-", "chemistry"], [247, 0, 0, "-", "dataframe"], [256, 0, 0, "-", "interval"], [261, 0, 0, "-", "numerical"], [267, 0, 0, "-", "plotting"], [269, 0, 0, "-", "sampling_algorithms"], [271, 0, 0, "-", "torch"]], "baybe.utils.basic": [[223, 1, 1, "", "Dummy"], [224, 1, 1, "", "classproperty"], [225, 4, 1, "", "filter_attributes"], [226, 4, 1, "", "find_subclass"], [227, 4, 1, "", "get_subclasses"], [228, 4, 1, "", "group_duplicate_values"], [229, 4, 1, "", "hilberts_factory"], [230, 4, 1, "", "refers_to"], [231, 4, 1, "", "set_random_seed"], [232, 4, 1, "", "to_tuple"]], "baybe.utils.basic.Dummy": [[223, 2, 1, "", "__init__"]], "baybe.utils.basic.classproperty": [[224, 2, 1, "", "__init__"]], "baybe.utils.boolean": [[234, 4, 1, "", "check_if_in"], [235, 4, 1, "", "is_abstract"], [236, 4, 1, "", "strtobool"]], "baybe.utils.botorch_wrapper": [[238, 4, 1, "", "botorch_function_wrapper"]], "baybe.utils.chemistry": [[240, 4, 1, "", "get_canonical_smiles"], [241, 4, 1, "", "is_valid_smiles"], [242, 4, 1, "", "name_to_smiles"], [243, 4, 1, "", "smiles_to_fp_features"], [244, 4, 1, "", "smiles_to_molecules"], [245, 4, 1, "", "smiles_to_mordred_features"], [246, 4, 1, "", "smiles_to_rdkit_features"]], "baybe.utils.dataframe": [[248, 4, 1, "", "add_fake_results"], [249, 4, 1, "", "add_parameter_noise"], [250, 4, 1, "", "df_drop_single_value_columns"], [251, 4, 1, "", "df_drop_string_columns"], [252, 4, 1, "", "df_uncorrelated_features"], [253, 4, 1, "", "fuzzy_row_match"], [254, 4, 1, "", "pretty_print_df"], [255, 4, 1, "", "to_tensor"]], "baybe.utils.interval": [[257, 6, 1, "", "InfiniteIntervalError"], [258, 1, 1, "", "Interval"], [259, 4, 1, "", "convert_bounds"], [260, 4, 1, "", "use_fallback_constructor_hook"]], "baybe.utils.interval.InfiniteIntervalError": [[257, 2, 1, "", "__init__"], [257, 2, 1, "", "__new__"]], "baybe.utils.interval.Interval": [[258, 2, 1, "", "__init__"], [258, 5, 1, "", "center"], [258, 2, 1, "", "contains"], [258, 2, 1, "", "create"], [258, 2, 1, "", "from_dict"], [258, 2, 1, "", "from_json"], [258, 5, 1, "", "is_bounded"], [258, 5, 1, "", "is_finite"], [258, 5, 1, "", "is_fully_unbounded"], [258, 5, 1, "", "is_half_bounded"], [258, 5, 1, "", "is_left_bounded"], [258, 5, 1, "", "is_right_bounded"], [258, 3, 1, "", "lower"], [258, 2, 1, "", "to_dict"], [258, 2, 1, "", "to_json"], [258, 2, 1, "", "to_ndarray"], [258, 2, 1, "", "to_tensor"], [258, 2, 1, "", "to_tuple"], [258, 3, 1, "", "upper"]], "baybe.utils.numerical": [[262, 3, 1, "", "DTypeFloatNumpy"], [263, 3, 1, "", "DTypeFloatONNX"], [264, 4, 1, "", "closer_element"], [265, 4, 1, "", "closest_element"], [266, 4, 1, "", "geom_mean"]], "baybe.utils.plotting": [[268, 4, 1, "", "create_example_plots"]], "baybe.utils.sampling_algorithms": [[270, 4, 1, "", "farthest_point_sampling"]], "baybe.utils.torch": [[272, 7, 1, "", "DTypeFloatTorch"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property", "6": "py:exception", "7": "py:data"}, "terms": {"": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 229, 255, 258, 273, 277, 286, 294, 295, 296, 297, 298, 301, 305, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329], "0": [7, 14, 27, 34, 35, 63, 91, 99, 102, 130, 153, 174, 213, 214, 215, 236, 249, 252, 263, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 318, 320, 321, 322, 324, 325, 328], "00": [304, 324], "0000": 297, "000000": [288, 290, 295, 306], "001": 320, "002179": 299, "004435": [], "005": [276, 277, 279, 282, 283], "01": [274, 275, 278, 280, 285, 286, 292, 303, 304, 311], "02": 311, "020386": 291, "021": 252, "028691": 301, "03213": 252, "032882": [], "05": 311, "053253": 303, "053579": [288, 290], "057": [276, 277, 279, 282, 283], "06": [153, 200], "062290": 301, "068262": 292, "069169": [], "0724": 297, "072975": [], "08": 311, "082262": [], "085885": 299, "090929": [], "0m": [288, 289, 290, 291, 292, 299, 306], "0mdesirabilityobject": 299, "0mdiscret": [288, 289, 290, 291, 292, 299, 306], "0mmean": 299, "0msingletargetobject": [288, 289, 290, 291, 292, 306], "1": [18, 23, 35, 63, 77, 91, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 174, 177, 179, 213, 214, 215, 220, 228, 236, 249, 263, 266, 270, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 318, 319, 320, 321, 322, 324, 325, 326, 328], "10": [252, 274, 275, 277, 280, 288, 289, 290, 294, 295, 296, 297, 299, 306, 307, 308, 310, 311, 313, 322], "100": [280, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 311, 321, 322, 328], "101467": [], "102": 303, "1024": [243, 322], "1038": 252, "105": [276, 277, 279, 282, 283, 299, 324], "108": [], "11": [224, 299, 314], "111": [296, 306], "111111": [296, 306], "113": [], "1147": 290, "1148": 290, "1149": 290, "1150": 290, "117": [], "117458": 302, "11750": [189, 193, 195], "119": [], "12": [280, 291, 299, 303, 304, 316, 324], "120": [276, 277, 279, 282, 283, 288, 290, 322], "120000": 303, "121": [], "121567": [], "122": [296, 304, 306], "123": 294, "125": 304, "1268824": [276, 277, 279], "127": 280, "128": 295, "13": [310, 324], "1337": [174, 280], "1338": 280, "14": [283, 289, 324], "144": 295, "1454": 315, "148588": 299, "15": [274, 290, 304, 310, 311, 313, 319, 324], "150": [288, 292, 320], "1500": 322, "151": 290, "152312": [], "153": [276, 277, 279, 282, 283], "155": 297, "158697": [], "16": [263, 280], "160": [], "160379": [], "160602": 304, "164886": 299, "166": 297, "166643": 301, "170303": 301, "173": 299, "173908": 301, "177": [295, 306], "179": 299, "18": [283, 291, 307, 308, 319], "180": 288, "183184": 299, "185": [290, 304], "186412": 301, "188": 306, "19": 303, "192": 290, "198": 303, "199708": 302, "1e": [153, 200, 295], "1mcampaign": [288, 289, 290, 291, 292, 299, 306], "1mcomput": [288, 289, 290, 291, 292, 299, 306], "1mconstraint": [288, 289, 290, 291, 292, 299, 306], "1mdiscret": [288, 289, 290, 291, 292, 299, 306], "1mexperiment": [288, 289, 290, 291, 292, 299, 306], "1mmeta": [288, 289, 290, 291, 292, 299, 306], "1mmetadata": [288, 289, 290, 291, 292, 299, 306], "1mobject": [288, 289, 290, 291, 292, 299, 306], "1mscalar": 299, "1msearch": [288, 289, 290, 291, 292, 299, 306], "1mtarget": [288, 289, 290, 291, 292, 299, 306], "1mtype": [288, 289, 290, 291, 292, 299, 306], "2": [7, 14, 63, 77, 228, 248, 266, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 318, 319, 320, 321, 322, 324, 325, 326, 328], "20": [102, 276, 277, 279, 280, 299, 315, 322], "200": [277, 288, 290, 294, 295, 296, 297, 306], "2004": 318, "2021": 277, "2022": 313, "2024": 313, "203": [], "21": 307, "210246": [], "217234": 299, "22": 299, "221211": [], "222222": [296, 306], "223": 297, "227": 297, "23": [], "230": 303, "231806": [288, 290], "237227": [], "237844": [], "238": 295, "239": [294, 295, 297, 299], "24": [275, 278, 289, 324], "241": 322, "243": [294, 299], "244873": 299, "247": 283, "248389": [], "25": [291, 310, 324], "254042": [], "26": [304, 324], "265826": 301, "27": 324, "272041": [], "276513": 299, "276679": [], "277": 299, "278": 299, "279": 299, "28": [], "280": 299, "285160": [], "285187": [], "287": 280, "29": [296, 313], "294565": 304, "294892": 304, "2d": [270, 322], "3": [224, 228, 274, 275, 276, 277, 278, 279, 280, 283, 286, 288, 289, 290, 291, 292, 295, 297, 299, 301, 302, 303, 304, 306, 307, 310, 311, 313, 314, 316, 318, 319, 320, 322, 324, 325, 328, 329], "30": [274, 280, 292, 322], "302238": 304, "305165": 302, "306142": [], "31": [291, 307], "312": [], "319532": 299, "32": [289, 291, 295, 299, 322], "324056": 302, "328": [], "33": [289, 291, 299], "333063": [], "34": [289, 291], "340103": 299, "341": [], "343226": 299, "344806": 299, "346": 283, "348873": [], "35": 289, "351177": 299, "36": [291, 299], "369782": [], "37": 299, "372": 283, "375414": 304, "376076": 303, "384306": [], "385423": [], "388041": [], "39": 322, "390820": [], "4": [243, 254, 274, 275, 278, 280, 282, 285, 286, 288, 289, 290, 291, 292, 299, 301, 302, 303, 304, 313, 318, 319, 320, 322, 324], "40": [321, 322], "407333": 299, "407604": [], "41": [], "410034": [], "410831": [], "411510": [288, 290, 292], "411586": 302, "420079": 302, "423177": 299, "425494": [], "429305": [], "43": 299, "430606": 282, "433859": 301, "433920": 299, "434065": [], "443677": [], "444444": 295, "447": 288, "448": 288, "449": 288, "45": [299, 328], "450": 288, "450457": [], "451041": [], "457348": 299, "463199": 301, "464438": [], "469173": 299, "47": [], "48": 299, "490943": 301, "493062": [], "498604": [], "5": [23, 63, 102, 275, 276, 278, 279, 280, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 303, 304, 306, 307, 308, 310, 311, 313, 318, 319, 320, 322, 324, 329], "50": [291, 292, 297, 310, 311, 318, 322, 324, 328], "500": 322, "502480": 304, "507706": [], "508565": 302, "51": 299, "511": 280, "514018": 299, "514473": 304, "52": 299, "521261": 299, "53": 299, "531233": [], "5313": 232, "536874": [], "54": [299, 313], "540696": 299, "543041": 299, "543836": 291, "547533": 299, "55": [299, 328], "551341": 302, "551509": [], "552206": [], "555556": 297, "56": [289, 299], "567299": 299, "57": [307, 308], "572776": [], "576548": [], "577683": 302, "586127": [], "587182": [], "59": [301, 306, 313], "590": 277, "591053": 299, "591843": 301, "593805": [], "598403": [], "599790": 302, "6": [254, 276, 277, 278, 279, 289, 291, 292, 299, 304, 318, 320, 324], "60": [299, 321], "606856": 302, "607285": [], "609667": [], "619121": 304, "62": [], "623439": 301, "627914": [], "628269": [], "631225": [], "634288": [], "64": [], "643994": 302, "645665": [], "648386": [], "649365": [], "65": [], "652840": 299, "657111": 301, "661909": [], "664999": 299, "665740": 301, "666667": 297, "667167": [], "67": 282, "670170": [], "676804": 299, "69": [276, 277, 279, 299], "690887": [], "7": [102, 252, 289, 292, 299, 302, 310, 318, 322, 324], "70": [], "702894": [], "706639": [], "706667": 303, "706856": [], "7071": 297, "707618": 302, "71": 322, "714286": 290, "715399": [], "716255": [], "726234": 299, "730431": 303, "731626": 302, "734986": 299, "74": [], "742065": [], "746832": 299, "748084": 283, "75": [291, 299, 303, 324], "750659": [], "750814": 299, "753185": 299, "77": 301, "777778": 306, "780658": [], "783241": [], "783805": 299, "786926": 304, "79": [299, 301, 313], "792595": [], "795713": [], "7gz": 322, "7hf": 322, "8": [275, 276, 278, 279, 280, 288, 290, 292, 295, 299, 302, 313, 318, 320], "80": 320, "811233": [], "82": [], "825870": 283, "8389": 232, "840063": 304, "8417": 232, "843315": 302, "845177": [], "85": [], "857143": 290, "859033": [], "861": 292, "862": 292, "863": 292, "864": 292, "869008": 283, "87": 306, "873977": [], "88": 306, "8859": 296, "888889": 306, "89": [277, 303, 306], "892526": 299, "8jq": 322, "9": [292, 299, 315, 318, 319, 324, 325], "90": [276, 277, 279, 282, 283, 306, 324], "902399": [], "904388": [], "91": [], "913211": [], "925887": 304, "933319": 304, "934292": [], "94": 299, "940828": 299, "95": 299, "96": 277, "960907": 282, "97": [], "978867": 301, "98": [], "99": [], "999": 320, "A": [0, 7, 14, 18, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 55, 57, 58, 63, 68, 73, 76, 77, 81, 91, 99, 102, 104, 111, 113, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 147, 149, 153, 154, 168, 169, 174, 177, 179, 185, 186, 188, 190, 192, 194, 196, 202, 206, 211, 213, 214, 215, 224, 225, 227, 228, 237, 238, 248, 252, 255, 266, 269, 270, 289, 294, 295, 297, 299, 307, 308, 314, 315, 316, 318, 320, 322, 323, 324, 325, 326, 328], "AND": [39, 290, 318, 320], "AS": [313, 318], "And": 296, "As": [275, 276, 277, 279, 299, 310, 311, 313, 320, 323, 324, 326], "At": 328, "But": 328, "By": [76, 89, 104, 153, 235, 316, 323, 324], "FOR": 318, "For": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 179, 183, 185, 188, 190, 192, 194, 196, 206, 211, 253, 258, 268, 274, 275, 276, 277, 278, 279, 280, 282, 283, 289, 299, 302, 304, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "If": [23, 35, 46, 77, 104, 107, 108, 118, 119, 122, 143, 144, 147, 149, 153, 157, 158, 174, 179, 183, 185, 188, 190, 192, 194, 196, 198, 200, 214, 216, 219, 227, 234, 236, 244, 245, 246, 248, 249, 252, 253, 268, 270, 283, 285, 303, 304, 307, 313, 314, 316, 318, 319, 320, 321, 322, 328, 329], "In": [23, 27, 34, 35, 42, 130, 149, 172, 216, 254, 275, 276, 277, 279, 280, 282, 296, 299, 302, 303, 304, 307, 313, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "It": [18, 130, 172, 184, 192, 248, 276, 280, 282, 283, 289, 297, 299, 302, 303, 304, 306, 307, 308, 310, 313, 319, 320, 322, 323, 324, 326], "Its": 296, "No": [291, 294, 315], "Not": [318, 320], "OF": [313, 318], "OR": [313, 318], "Of": [283, 325], "On": 296, "One": [93, 276, 279, 313], "Such": [283, 320, 326], "That": [149, 214, 275, 283, 288, 302, 316, 324, 326], "The": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 49, 61, 63, 66, 68, 73, 76, 77, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 153, 163, 164, 166, 168, 172, 174, 177, 183, 185, 188, 190, 192, 194, 196, 198, 199, 200, 202, 203, 206, 208, 211, 213, 214, 215, 216, 217, 219, 220, 224, 225, 227, 228, 231, 234, 235, 236, 238, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 264, 265, 266, 268, 270, 275, 276, 277, 278, 279, 280, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 302, 303, 304, 308, 310, 311, 315, 316, 318, 319, 320, 321, 322, 323, 324, 327, 328, 330], "Their": 283, "There": [54, 174, 200, 263, 313, 316, 324], "These": [217, 273, 275, 277, 278, 279, 280, 281, 284, 287, 293, 298, 300, 302, 305, 309, 316, 320, 322, 324], "To": [216, 275, 276, 283, 306, 310, 311, 313, 314, 316, 319, 322, 326], "With": [248, 310, 311, 313, 320, 322, 325], "_": [107, 108, 113, 151, 155, 161, 268, 295, 311], "__excepthook__": 314, "__init__": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 153, 183, 185, 188, 190, 192, 194, 196, 206, 211, 223, 224, 257, 258, 294, 295, 324, 325], "__new__": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 93, 94, 96, 257], "__str__": 315, "__version__": 315, "_botorch_acqf": [283, 288, 289, 290, 291, 292, 299, 306], "_c": 227, "_create_hidden_lay": 295, "_create_linear_block": 295, "_cumbest": 174, "_default_my_attribut": 316, "_fit": [203, 294, 295], "_iterbest": 174, "_measur": 174, "_measurements_targets_comp": 299, "_model": [283, 288, 289, 290, 291, 292, 299, 306], "_n_last_measur": 118, "_nbase": [243, 245, 246], "_nestedsequ": [77, 213, 214, 215, 265], "_no_tl": 310, "_posterior": [203, 294, 295], "_step": 118, "_supportsarrai": [77, 213, 214, 215, 265], "_t": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 164, 165, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 228, 229, 258], "_target": 315, "_tparamet": 104, "_u": 228, "_validate_my_attribut": 316, "ab": [291, 292], "abbrevi": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 226, 230, 315, 330], "abc": [16, 26, 27, 28, 30, 61, 66, 73, 85, 86, 116, 125, 128, 133, 138, 144, 183, 206, 235], "abl": [199, 320, 322, 325], "about": [18, 23, 86, 102, 183, 185, 188, 190, 192, 194, 196, 206, 220, 276, 277, 279, 301, 302, 303, 304, 313, 315, 316, 322, 324], "abov": [200, 215, 235, 252, 283, 290, 292, 313, 316, 318, 319, 320, 322, 325, 329], "absenc": 321, "absolut": [99, 249], "abstract": [16, 26, 27, 28, 30, 61, 66, 73, 84, 85, 86, 116, 125, 128, 133, 144, 183, 206, 227, 235, 320, 329], "acceler": [313, 315, 317, 329], "accept": [23, 118, 174, 238, 253, 302, 318, 321, 322, 326, 328], "access": [147, 153, 276, 277, 279, 288, 311, 315, 320, 325], "accord": [114, 216, 241, 270, 320, 323], "accordingli": [319, 325], "accur": 319, "acet": [276, 277, 279, 282, 283], "achiev": [153, 313, 316, 319, 320], "acq_funct": 283, "acqf": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21], "acqf1": 325, "acqf2": 325, "acquisit": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 51, 128, 130, 315, 323, 325], "acquisition_funct": [128, 130, 275, 283, 288, 289, 290, 291, 292, 299, 306, 307, 308, 315], "acquisition_function_cl": [128, 130, 283, 288, 289, 290, 291, 292, 299, 306, 315], "acquisitionfunct": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 20, 21, 128, 130, 325], "across": [186, 310, 323], "act": [318, 320, 329], "action": [315, 330], "activ": [89, 120, 295, 313, 315, 316, 320, 321], "active_valu": [89, 310, 311, 329], "actual": [118, 149, 172, 278, 291, 302, 303, 315, 324, 326], "ad": [23, 153, 198, 200, 216, 219, 270, 316, 321, 322, 328, 330], "adam": 295, "adapt": [236, 252], "add": [23, 166, 248, 283, 294, 295, 296, 297, 299, 301, 302, 303, 304, 310, 313, 318, 319, 320, 324], "add_fake_result": [282, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 315], "add_measur": [23, 216, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 313, 315, 319], "addendum": 318, "addit": [23, 73, 76, 81, 118, 130, 153, 166, 177, 198, 200, 249, 275, 276, 277, 278, 279, 280, 283, 301, 302, 303, 304, 311, 313, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 329], "addition": 313, "adher": [315, 316], "adjust": [275, 277, 283, 303, 315], "adopt": 283, "adrian": [313, 317], "advanc": [315, 325], "advantag": 316, "advic": 316, "advis": [318, 324, 326], "affect": [38, 216, 306, 320], "affected_paramet": [38, 288, 289, 290, 291, 292, 320], "affili": [216, 313], "afford": 319, "aforement": 149, "after": [120, 153, 282, 313, 319, 325], "afterward": 325, "again": [320, 323], "against": [219, 225, 318], "agraw": 317, "agre": [278, 313, 318], "agreement": 318, "ai": 263, "aim": 319, "al": [277, 313, 322], "aldrich": 317, "alex": [313, 317], "alexand": [313, 317], "algorithm": [123, 130, 248, 269, 270, 299, 313, 323], "alia": [101, 135, 136, 137], "alias": 315, "align": [147, 324], "all": [15, 16, 25, 26, 30, 38, 40, 60, 61, 65, 66, 72, 73, 76, 81, 83, 86, 89, 91, 95, 102, 110, 115, 116, 118, 124, 125, 127, 130, 132, 133, 143, 144, 149, 153, 154, 182, 183, 205, 206, 216, 248, 255, 276, 277, 279, 283, 285, 286, 288, 289, 295, 299, 301, 303, 310, 311, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "allclos": [285, 286], "alleg": 318, "allow": [40, 99, 104, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 177, 216, 220, 234, 253, 276, 277, 279, 283, 310, 311, 313, 315, 319, 320, 321, 323, 324, 325, 326, 327, 328], "allow_recommending_already_measur": [116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 283, 288, 289, 290, 291, 292, 299, 306, 307, 308, 315, 323], "allow_repeated_recommend": [116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 283, 288, 289, 290, 291, 292, 299, 306, 307, 308, 315, 323], "almost": 277, "alon": [315, 318], "along": [266, 318, 322], "alongsid": 318, "alreadi": [23, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 198, 200, 283, 304, 313, 323, 324], "also": [42, 104, 220, 275, 276, 285, 286, 291, 296, 297, 299, 301, 303, 304, 306, 310, 311, 313, 315, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329], "alter": 319, "altern": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 200, 266, 313, 315, 330], "although": [304, 307, 324, 326], "alwai": [30, 161, 162, 296, 313, 319, 320, 326], "ambigu": [99, 324], "amend": 320, "amount": [302, 310, 311, 322], "an": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 56, 61, 63, 66, 68, 73, 74, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 164, 166, 168, 172, 174, 183, 185, 188, 190, 192, 194, 196, 198, 200, 206, 211, 216, 225, 229, 234, 242, 252, 253, 257, 258, 259, 265, 268, 270, 276, 279, 281, 283, 290, 291, 292, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "analog": [149, 248, 324, 325], "analogi": [114, 323], "analyt": [3, 4, 6, 7, 51, 273, 302, 312, 326, 329], "analyz": 316, "ani": [31, 46, 77, 84, 85, 86, 88, 89, 91, 102, 104, 106, 107, 108, 149, 153, 161, 162, 166, 170, 171, 177, 190, 194, 196, 213, 214, 215, 216, 220, 225, 232, 234, 235, 253, 258, 260, 265, 310, 311, 313, 314, 315, 316, 318, 319, 322, 325, 326, 329], "annot": 318, "anonym": [216, 313], "anoth": [38, 259, 277, 289, 290, 294, 295, 296, 297, 304, 316, 320], "ansatz": 315, "answer": 319, "anyth": 236, "anywher": 285, "apach": [313, 318], "apart": [316, 319], "api": [27, 34, 35, 238, 313, 314, 325], "appar": 325, "appear": [225, 314, 315, 318, 325], "append": [285, 286, 301, 302, 303, 304, 311], "appendix": 318, "appli": [42, 130, 149, 172, 174, 242, 249, 283, 284, 287, 288, 290, 291, 292, 310, 311, 314, 315, 318, 320, 321, 323, 324, 325, 326, 328], "applic": [313, 316, 318, 322, 323, 326], "approach": [153, 313, 319, 323, 325], "appropri": [70, 153, 316, 318], "ar": [10, 11, 23, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 52, 53, 54, 76, 77, 89, 102, 104, 108, 118, 119, 120, 147, 149, 153, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 199, 215, 216, 217, 219, 220, 225, 227, 228, 235, 236, 248, 250, 253, 268, 270, 275, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 297, 299, 301, 303, 306, 307, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "arang": [285, 322], "arbitrari": [119, 149, 174, 260, 302, 315, 320, 322, 323, 326], "arbitrarili": [321, 325], "architectur": [186, 203, 293, 312, 315, 327, 329], "arg": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 68, 111, 225, 257, 316], "argument": [104, 147, 153, 283, 297, 299, 315, 320, 324, 325, 326, 329], "aris": [41, 318, 320, 325], "arithmet": [79, 321], "arizona": [313, 317], "around": [137, 177, 179, 186, 299, 315, 323, 325], "arr": [213, 214, 215, 266], "arrai": [77, 147, 213, 214, 215, 223, 262, 265, 266, 270, 315, 323, 327], "arriv": 313, "aryl": [276, 277, 279, 282, 313, 322], "ascend": 299, "ask": [313, 316, 319], "aspect": [281, 285, 286, 301, 304], "assembl": 325, "assembli": 330, "assert": [46, 288, 289, 290, 291, 292, 296, 297, 306, 315, 318, 319, 320, 325], "assess": 326, "assign": [248, 322], "associ": [216, 318, 319, 321], "assum": [18, 174, 184, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 313, 318, 320, 322, 325, 328], "assumpt": 326, "assur": 320, "atol": [285, 286], "attach": [18, 318], "attempt": [56, 184, 268, 314, 320, 323], "attent": 120, "attr": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 183, 185, 188, 190, 192, 194, 196, 206, 211, 232, 258, 315], "attribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 102, 104, 106, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 153, 160, 164, 166, 183, 185, 188, 190, 192, 194, 196, 198, 200, 203, 206, 208, 209, 211, 225, 258, 261, 268, 271, 315, 316, 318, 323, 325, 327, 328], "audit": [313, 315, 316], "augment": [198, 200, 319], "author": 318, "authorship": 318, "auto": [10, 11, 317], "auto_tutori": 263, "autodoc": 315, "automat": [23, 198, 253, 303, 315, 316, 321, 324, 330], "avail": [2, 64, 79, 91, 93, 94, 96, 102, 118, 119, 153, 174, 189, 193, 195, 208, 209, 220, 270, 278, 279, 282, 285, 286, 299, 301, 303, 304, 313, 315, 316, 318, 319, 322, 323, 324, 325, 326, 329, 330], "available_acq_funct": 283, "averag": [192, 311, 322, 326], "avoid": [149, 232, 266, 315, 316, 319, 322, 324], "awai": 328, "awar": [310, 311, 325], "ax": [268, 274, 277, 310, 311], "axi": [147, 174, 266, 291, 292, 294, 310, 311, 324], "azur": 315, "b": [41, 228, 252, 277, 289, 294, 295, 297, 307, 308, 313, 316, 318, 319, 322, 325], "back": [0, 143, 144, 306, 316], "backend": 220, "backport": 314, "backtest": [172, 173, 178, 276, 277, 279, 283, 309, 312, 313, 315, 323, 326], "backtick": 316, "backward": [69, 112, 295, 315], "bad": [299, 319, 328], "bad_interv": 248, "badg": 315, "baird": 317, "balanc": [76, 313], "banana": 316, "banner": 315, "bar": [294, 295, 296, 297, 306, 307, 308, 313, 315], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 102, 111, 116, 117, 118, 119, 120, 122, 125, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 150, 153, 164, 166, 168, 183, 184, 185, 186, 188, 190, 192, 194, 196, 198, 200, 202, 206, 208, 209, 211, 223, 224, 226, 227, 258, 268, 282, 283, 294, 296, 313, 315, 318, 322, 323, 325, 327], "base_nam": [268, 274, 277, 310, 311], "baseestim": 294, "baselin": [277, 310, 313, 322], "basi": [313, 318], "basic": [63, 68, 174, 223, 224, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 309, 312, 315, 316, 321, 322, 326, 330], "basic_transfer_learn": 311, "batch": [23, 111, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 176, 183, 185, 186, 188, 190, 192, 194, 196, 199, 283, 288, 289, 290, 291, 292, 299, 301, 302, 303, 304, 306, 310, 311, 315, 323, 326], "batch_quant": [23, 315], "batch_siz": [23, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 174, 177, 179, 216, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 310, 311, 313, 315, 319, 326], "batchifi": 186, "batchify_posterior": [186, 294, 295], "bayb": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 102, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 208, 209, 211, 223, 224, 258, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 288, 289, 290, 291, 292, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "baybe_cache_dir": 315, "baybe_debug_fake_hosthash": 315, "baybe_debug_fake_userhash": 315, "baybe_dev": [307, 308], "baybe_telemetry_en": [216, 313], "baybe_telemetry_endpoint": [216, 315], "baybe_telemetry_host": 315, "baybe_telemetry_hostnam": [216, 315], "baybe_telemetry_usernam": [216, 315], "baybe_telemetry_vpn_check": [216, 315], "baybe_telemetry_vpn_check_timeout": [216, 315], "bayesian": [0, 122, 128, 130, 172, 174, 177, 179, 184, 190, 315, 319, 330], "bayesianlinearmodel": 297, "bayesianlinearsurrog": [283, 327], "bayesianrecommend": [122, 130, 184, 315, 323], "bayesianridg": 296, "becaus": [54, 99, 153, 179, 235, 311, 316, 319, 320, 321, 322, 325], "becom": [116, 118, 119, 120, 149, 199, 319, 320, 325, 328], "been": [18, 51, 118, 153, 253, 276, 277, 283, 307, 308, 313, 314, 315, 318, 323, 326], "befor": [120, 174, 198, 216, 279, 283, 289, 313, 316, 322, 324, 326], "begin": [118, 288, 290, 306, 323], "behalf": 318, "behav": [306, 325], "behavior": [130, 216, 278, 307, 308, 315, 321, 323, 324, 326, 329], "behind": [321, 325, 328], "being": [248, 268, 314, 320, 322, 324], "bell": [209, 213, 299, 328], "belong": [153, 325], "below": [200, 215, 290, 316, 318, 319, 320, 321, 325, 328], "benchmark": 313, "benefici": 318, "benefit": 320, "benzo": 329, "besid": [313, 321, 328], "best": [10, 11, 174, 177, 279, 313, 323, 326], "bet": 319, "beta": [7, 14, 283, 315], "better": [248, 277, 315, 319, 320, 322], "between": [38, 99, 119, 147, 153, 278, 299, 304, 310, 311, 313, 315, 319, 320, 322, 323, 324, 325, 328], "beyond": 313, "bias": 322, "binar": 315, "binari": [306, 315, 325], "bind": 318, "bit": [243, 322], "black": [172, 326], "blank": 316, "block": [216, 295, 313, 314, 315, 325], "bool": [10, 11, 18, 23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 77, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 183, 185, 186, 188, 190, 192, 194, 196, 213, 214, 215, 218, 219, 227, 230, 235, 236, 241, 245, 246, 253, 258, 265], "boolean": [26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 186, 283], "boost": [194, 311], "both": [104, 153, 179, 215, 289, 296, 299, 310, 311, 313, 320, 322, 324, 325, 328], "botorch": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 27, 34, 35, 130, 183, 185, 188, 190, 192, 194, 196, 237, 238, 273, 275, 285, 286, 300, 304, 310, 311, 312, 315, 323], "botorch_acqf": 18, "botorch_analyt": 274, "botorch_function_wrapp": [274, 285, 286, 301, 303, 304, 310, 311], "botorch_wrapp": [274, 285, 286, 301, 303, 304, 310, 311], "bottom": 319, "bound": [7, 14, 98, 104, 147, 149, 153, 211, 212, 227, 258, 259, 274, 275, 278, 280, 283, 285, 286, 299, 301, 302, 303, 304, 310, 311, 315, 322, 325, 328, 330], "boundari": [153, 213, 214, 299], "boundary_onli": 153, "bounded": 315, "bounds_transform_func": 315, "box": [172, 326], "brain": [326, 329], "branch": [313, 316], "break": [184, 325], "brettpho": [276, 277, 279, 282, 283], "briefli": [326, 329], "bring": [313, 315], "broad": 325, "brute": [130, 323], "bu": [276, 277, 279, 282, 283], "budget": 319, "bug": [189, 193, 195, 315, 316], "build": [147, 153, 184, 314, 315, 316, 320, 325, 330], "built": [153, 296, 313, 316, 319, 323], "builtin": 224, "bump": 315, "button": 315, "butyl": [276, 277, 279, 282, 283], "butylphenylphosphin": [276, 277, 279, 282, 283], "butyornitril": [276, 277, 279, 282, 283], "bypass": 104, "byte": [77, 185, 213, 214, 215, 265], "c": [41, 228, 276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 294, 295, 297, 307, 308, 313, 318, 319, 322, 325], "c1": [276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 322], "c1c2": [276, 277, 279, 282, 283], "c1ccccc1": [276, 277, 279, 288, 290], "c1ccoc1": 320, "c2": [276, 277, 279, 282, 283, 288, 290, 291, 292], "c2ccccc2": [276, 277, 279], "c2oc": [276, 277, 279, 282, 283], "c2p": [276, 277, 279, 282, 283], "c3": [276, 277, 279, 282, 283, 288, 290, 291], "c3c": [276, 277, 279], "c3ccccc3": [276, 277, 279, 282, 283], "c4": [276, 277, 279, 288, 290], "c4ccccc4": [276, 277, 279, 282, 283], "c5": [288, 290], "c6": [288, 290], "c_i": [34, 35, 320], "cach": [219, 315, 325, 330], "cached_recommend": 219, "calcul": [183, 185, 188, 190, 192, 194, 196, 216, 219, 266, 275, 278, 280, 285, 291, 301, 302, 303, 304, 310, 322, 324], "call": [27, 34, 35, 216, 219, 220, 275, 276, 277, 278, 279, 297, 307, 308, 313, 314, 315, 319, 320, 322, 325, 326, 329], "callabl": [37, 104, 164, 172, 174, 177, 179, 186, 199, 202, 203, 224, 225, 229, 330], "callable_": 225, "callback": 326, "campaign": [174, 176, 177, 179, 248, 249, 281, 282, 290, 294, 295, 308, 310, 311, 312, 313, 315, 320, 321, 322, 324, 325, 326, 327, 329, 330], "campaign1": 326, "campaign2": 326, "campaign_json": 319, "campaign_oh": 277, "campaign_rand": [276, 277, 279], "campaign_recr": 306, "can": [18, 30, 41, 67, 73, 76, 81, 85, 91, 99, 102, 122, 123, 130, 138, 147, 149, 153, 172, 174, 184, 200, 216, 218, 220, 235, 248, 249, 253, 263, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 295, 296, 297, 299, 301, 302, 303, 304, 307, 310, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "canada": 317, "candid": [10, 11, 138, 140, 147, 153, 183, 185, 186, 188, 190, 192, 194, 196, 294, 295, 311, 319, 323, 324], "cannot": [58, 184, 185, 186, 200, 236, 268, 315, 318, 320, 322, 323, 325, 327], "canon": [240, 325], "capabl": [273, 298, 305, 309, 311, 315, 319, 329], "captur": 322, "care": [316, 320, 321], "carlo": [8, 9, 10, 11, 12, 13, 14, 51, 177, 274, 275, 277, 278, 279, 280, 295, 310, 311, 326], "carri": 318, "cartesian": [149, 153, 154, 313, 324], "case": [179, 200, 216, 248, 254, 275, 303, 304, 307, 313, 316, 319, 320, 322, 325, 326, 328], "cast": [27, 34, 35], "cat": 295, "cat_1": 299, "cat_1_22": 299, "cat_1_33": 299, "cat_2": 299, "catch_constant_target": 186, "categor": [23, 88, 89, 93, 153, 158, 253, 313, 315, 322, 324, 328], "categori": [277, 313, 325, 328], "categorial_1": 319, "categorical_1": [299, 319], "categorical_2": [299, 319], "categorical_paramet": 325, "categorical_parameter_json": 325, "categorical_parameter_reconstruct": 325, "categoricalencod": [88, 89, 288, 289, 290, 292, 299, 306], "categoricalparamet": [89, 153, 277, 288, 289, 290, 292, 294, 295, 297, 299, 306, 307, 308, 313, 324, 325, 330], "cattr": [163, 164, 166, 308, 314, 315, 316], "caus": [99, 224, 315, 318], "cc": [276, 277, 279, 282, 283, 288, 290, 291, 292, 322], "cc1": [276, 277, 279, 282, 283, 322], "ccc": [288, 290, 291, 294, 295, 297, 313], "cccc": [276, 277, 279, 282, 283, 288, 290], "ccccc": [288, 290, 307, 308], "cccccc": [288, 290], "cccccccco": [320, 322], "ccccoc": [276, 277, 279, 282, 283], "ccoccoccn": [307, 308], "cdot": [320, 321], "cell": [296, 322, 326, 329], "cell_lin": 329, "center": [213, 215, 258, 299, 319], "central": [315, 319], "certain": [38, 120, 164, 166, 172, 220, 248, 289, 313, 316, 320, 323, 324, 325], "cesium": [276, 277, 279, 282, 283], "chain": [26, 28, 224, 320], "challeng": [316, 325], "chanc": 314, "chang": [38, 118, 248, 283, 303, 313, 314, 316, 318, 319, 324, 329], "charact": 318, "characterist": 224, "charg": 318, "check": [23, 84, 85, 86, 88, 89, 91, 98, 99, 102, 216, 219, 230, 233, 234, 235, 236, 253, 258, 264, 303, 304, 306, 313, 315, 316, 324, 325], "checkout": 316, "chem": [313, 315, 322], "chemic": [96, 242, 244, 245, 246, 277, 282, 315, 317, 320, 322, 329], "cheminformat": [102, 313, 315], "chemistri": 91, "child": [135, 136, 137, 138], "chocol": 316, "choic": [294, 304, 315, 320, 321, 322, 323, 324, 325, 326, 328], "choos": [114, 274, 299, 301, 303, 304, 313, 318, 319, 323, 326, 327, 328], "chose": [303, 325], "chosen": [122, 174, 179, 231, 270, 283, 291, 315, 320, 322, 324], "ci": [286, 310, 311, 315, 316], "circumv": [314, 325], "cl": [161, 165, 198, 200, 227, 230, 235, 260], "claim": 318, "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 164, 166, 167, 168, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 222, 223, 224, 226, 227, 230, 235, 237, 243, 256, 258, 283, 294, 295, 296, 307, 308, 315, 319, 320, 321, 323, 324, 325, 327], "classic": 321, "classifi": 322, "classmethod": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 224, 258, 315], "classvalidationerror": [308, 314], "classvar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 183, 185, 188, 190, 192, 194, 196], "clean": [250, 251, 252, 315, 316], "clear": 263, "clone": 316, "close": [174, 179, 208, 310, 311, 326], "closer": [264, 322], "closest": [219, 253, 265], "closest_el": 315, "closur": [172, 326], "cluster": [135, 136, 137, 138, 283, 315, 317, 330], "clustering_x": 315, "clustermixin": 138, "cn": [276, 277, 279, 282, 283], "co1": [276, 277, 279], "co2": [276, 277, 279], "co3": [276, 277, 279], "coars": [294, 295, 297, 306, 307, 308, 313], "coc": [294, 295, 297, 307, 308, 313], "cococ": [307, 308], "code": [184, 189, 193, 195, 216, 277, 278, 297, 303, 307, 308, 313, 314, 315, 318, 320, 322], "coeffici": [27, 34, 35, 285, 286, 320], "collect": [23, 46, 62, 104, 118, 120, 157, 158, 169, 216, 221, 222, 225, 269, 270, 280, 283, 310, 311, 313, 315, 319], "column": [73, 76, 77, 81, 104, 147, 149, 153, 174, 177, 179, 245, 246, 250, 251, 252, 254, 277, 282, 288, 289, 290, 291, 292, 299, 301, 302, 303, 304, 306, 310, 311, 315, 319, 324, 325, 326], "com": [189, 193, 195, 232, 252, 313, 315], "comb": 291, "combin": [28, 37, 38, 39, 40, 41, 42, 43, 44, 104, 149, 153, 154, 224, 242, 276, 277, 279, 288, 290, 291, 299, 313, 318, 320, 321, 323, 324, 326, 329], "combine_func": 70, "come": [313, 319, 325], "comment": 315, "commerci": 318, "commit": [313, 315, 316], "common": [275, 296, 315, 316, 318, 319, 320, 322, 325], "commonli": 321, "commun": [318, 321, 322], "comp_df": [85, 88, 89, 91, 99, 102, 315], "comp_rep": [153, 296, 315, 324], "compar": [104, 278, 310, 313, 315, 316, 322, 328], "comparison": [310, 311, 323, 325], "compat": [69, 104, 112, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 150, 185, 290, 315, 323], "compil": 318, "complaint": 316, "complet": [320, 321, 325], "complex": [77, 213, 214, 215, 265, 306, 310, 311, 316, 320], "compli": 318, "complianc": 313, "compon": [316, 319, 320, 325], "compos": 325, "compound": 242, "comprehens": [313, 327], "compress": 325, "compris": 295, "comput": [18, 55, 73, 76, 81, 85, 88, 89, 91, 99, 102, 149, 153, 200, 206, 211, 243, 245, 246, 266, 295, 299, 315, 318, 319, 324, 325], "computation": 130, "concat": [310, 311], "concaten": 278, "concentr": [68, 276, 277, 279, 282, 283, 288, 320], "concept": [321, 322, 325], "concis": 315, "concret": [315, 325], "conda": 315, "condit": [26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 248, 277, 285, 289, 290, 291, 292, 313, 315, 318, 329, 330], "conduct": [23, 177, 183, 185, 188, 190, 192, 194, 196, 274, 275, 276, 277, 278, 279, 280, 313, 316, 319, 329], "confid": [7, 14, 283], "config": [296, 297, 305, 312, 315, 330], "config_json": 23, "configur": [23, 53, 54, 149, 153, 172, 174, 179, 248, 268, 281, 282, 295, 300, 304, 308, 313, 314, 315, 318, 319, 320, 321, 322, 324, 326, 328, 330], "conflict": [313, 316, 321], "confront": 313, "connect": [42, 216, 248, 315, 328], "consequ": [119, 279, 320, 323, 324, 326], "consequenti": 318, "consid": [7, 14, 23, 31, 76, 89, 118, 153, 177, 219, 248, 253, 299, 310, 311, 313, 315, 316, 320, 321, 322, 325], "consist": [114, 316, 318], "consol": 314, "consolid": 323, "consortium": 317, "conspicu": 318, "constant": [186, 192, 200, 214, 299, 315, 316, 322, 324], "constant_target_catch": [186, 294, 295], "constitut": 318, "constrain": [315, 320, 328], "constraint": [27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 86, 147, 149, 153, 216, 223, 294, 295, 296, 297, 306, 307, 308, 312, 313, 315, 322, 330], "constraint_1": 290, "constraint_2": 290, "constraint_3": 290, "constraints_lin_eq": 147, "constraints_lin_ineq": 147, "constru": 318, "construct": [23, 147, 149, 153, 185, 202, 310, 311, 313, 325, 330], "constructor": [135, 136, 137, 138, 149, 165, 190, 194, 196, 307, 308, 315, 319, 321, 330], "consult": 313, "consum": 118, "cont_ind": [278, 304], "cont_indic": [278, 301, 303, 304], "cont_paramet": [278, 304], "cont_recommend": [122, 304], "contact": [313, 317], "contain": [23, 30, 31, 32, 46, 49, 50, 73, 76, 77, 81, 104, 107, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 154, 157, 172, 174, 177, 183, 185, 188, 190, 192, 194, 196, 198, 200, 206, 211, 213, 214, 215, 243, 245, 246, 248, 249, 258, 266, 268, 270, 277, 278, 279, 304, 310, 311, 315, 316, 318, 319, 320, 323, 324, 325, 326], "contains_mordr": 149, "contains_rdkit": 149, "content": [34, 35, 104, 118, 149, 315, 318, 325], "context": [116, 118, 119, 120, 172, 310, 311, 319, 322, 325, 326, 329], "contextu": 329, "continu": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 84, 98, 122, 130, 147, 149, 150, 153, 154, 179, 183, 185, 188, 190, 192, 194, 196, 278, 285, 300, 304, 312, 313, 315, 319, 323, 325, 330], "continuous_subspac": 324, "continuousconstraint": [34, 35, 320], "continuouslinearequalityconstraint": [147, 285, 286, 330], "continuouslinearinequalityconstraint": [147, 286, 330], "continuousparamet": [98, 147, 315], "contract": 318, "contrast": [153, 235], "contribut": [313, 315, 318], "contributor": [313, 318], "contributori": 318, "control": [104, 130, 147, 153, 216, 275, 278, 299, 303, 313, 315, 318, 321, 322, 323, 328], "convei": 325, "conveni": [315, 324, 325], "convent": [149, 316], "convers": [119, 296, 315, 318, 330], "convert": [20, 74, 160, 232, 236, 242, 244, 254, 255, 259, 263, 295, 297, 307, 308, 315, 319, 325], "convert_sklearn": 296, "convert_sklearn_bayesian_ridg": 296, "cooki": 316, "copi": [313, 315, 318], "copyright": [313, 318], "core": [149, 150, 153, 177, 179, 315, 328], "coretest": 315, "corpu": 322, "correct": [203, 294, 295, 313, 315, 316, 325], "correctli": [304, 315], "correl": [91, 102, 252, 322], "correspond": [18, 122, 147, 149, 153, 164, 172, 174, 213, 216, 219, 234, 236, 242, 244, 248, 254, 270, 282, 283, 304, 307, 308, 310, 311, 313, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "corrupt": 249, "cost": 277, "costli": [149, 151, 155, 319], "could": [99, 283, 311, 315, 320, 322, 326, 328], "count": [220, 320], "counterclaim": 318, "counterpart": 324, "cours": [310, 311, 316, 325], "cov": [315, 316], "covari": [183, 185, 188, 190, 192, 194, 196], "cover": [235, 248], "coverag": [315, 316], "cp": [276, 277, 279], "crash": 315, "creat": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 49, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 147, 149, 153, 154, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 216, 258, 268, 270, 278, 282, 294, 295, 304, 305, 312, 313, 314, 315, 316, 320, 325, 326, 328, 330], "create_example_plot": [274, 277, 310, 311], "create_from_config": [296, 297], "creation": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 104, 151, 153, 155, 278, 289, 291, 292, 296, 297, 302, 324, 325, 330], "criterion": 295, "critic": 315, "cross": [310, 318], "crucial": 328, "cube": [143, 320], "cultur": 322, "current": [179, 184, 189, 193, 195, 218, 263, 319, 320, 322, 326, 328, 329], "curv": [213, 299, 320, 328], "custom": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 84, 85, 86, 88, 89, 91, 94, 98, 99, 102, 104, 185, 203, 206, 211, 254, 273, 283, 287, 300, 304, 312, 313, 315, 320, 322, 323, 330], "custom_analyt": [278, 280], "custom_conversion_funct": 296, "custom_filt": 320, "custom_funct": 288, "customarchitecturesurrog": [294, 295], "customari": 318, "customconstraint": 288, "customdiscreteparamet": [315, 330], "customencod": 91, "customonnxsurrog": [283, 296, 315], "customparamet": 322, "cv": 294, "cycl": [118, 313], "cyclic": 118, "d": [18, 41, 77, 183, 185, 188, 190, 192, 194, 196, 228, 266, 294, 295, 297, 307, 308, 310, 311, 313, 318, 329], "d102": 316, "d401": 288, "damag": 318, "daniel": 317, "darmstadt": [216, 313, 317], "dashboard": 315, "data": [23, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 73, 76, 81, 85, 88, 89, 91, 99, 102, 120, 142, 143, 144, 147, 149, 153, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 206, 211, 216, 220, 223, 242, 243, 248, 249, 253, 262, 263, 272, 273, 274, 275, 278, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 297, 299, 301, 303, 306, 307, 308, 310, 311, 312, 313, 315, 319, 320, 322, 323, 325, 326, 329, 330], "data_typ": 296, "databas": [23, 313, 325], "datafram": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 73, 76, 81, 85, 88, 89, 91, 99, 102, 104, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 153, 154, 170, 171, 174, 177, 179, 206, 211, 219, 243, 245, 246, 276, 282, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 310, 311, 315, 319, 320, 322, 330], "datapoint": 315, "dataset": [118, 172, 326], "date": 318, "de": [163, 305, 313, 314, 315, 316, 319, 320, 323, 330], "deactiv": [313, 315], "deal": [279, 322], "debug": 315, "decid": [99, 253, 304], "declar": [38, 42, 46, 138, 289, 316, 320], "decod": 296, "decor": [186, 224, 315], "decorrel": [91, 102, 106, 307, 308, 322], "decreas": [214, 299, 325], "deduc": [285, 286, 301, 303], "dedupl": 315, "def": [275, 278, 280, 288, 294, 295, 302, 310, 316, 320], "default": [32, 76, 89, 91, 102, 104, 122, 135, 136, 137, 138, 143, 144, 147, 153, 163, 216, 276, 279, 283, 297, 299, 304, 313, 316, 319, 321, 322, 330], "default_iter": 119, "default_model": 185, "defaultscal": 144, "defend": 318, "defin": [18, 23, 27, 31, 34, 35, 37, 94, 118, 153, 172, 174, 203, 249, 252, 268, 276, 277, 279, 282, 283, 288, 289, 290, 292, 294, 295, 296, 297, 307, 316, 318, 319, 322, 323, 324, 325, 326, 328], "definit": [147, 153, 235, 313, 315, 318, 321], "degre": 325, "degree_c": [294, 295, 296, 297, 306], "deliber": 318, "delici": 316, "deliveri": 322, "demand": 311, "demo": 315, "demonstr": [273, 276, 278, 281, 284, 287, 292, 293, 294, 295, 296, 298, 300, 305, 306, 309, 310, 311, 321, 324, 325, 329], "denot": [18, 183, 185, 188, 190, 192, 194, 196, 278, 291], "depend": [38, 42, 56, 70, 149, 153, 172, 206, 211, 214, 277, 283, 287, 291, 312, 315, 316, 320, 324, 326, 328, 329], "dependenciesconstraint": 315, "deprec": [23, 48, 116, 118, 119, 120, 128, 130, 224, 307, 308], "deprecationwarn": [307, 308], "depth": 324, "deriv": [135, 136, 137, 138, 153, 235, 318, 320, 324], "descend": 214, "describ": [89, 135, 136, 137, 138, 283, 288, 299, 316, 318, 319, 320, 321, 322, 325, 326], "descript": 316, "descriptor": [96, 102, 243, 245, 246, 315, 322], "deseri": [161, 165, 170, 306, 314, 315, 319, 330], "deserialize_datafram": 325, "design": [0, 18, 174, 294, 295, 296, 318, 321, 323, 325], "desir": [70, 76, 79, 280, 298, 299, 312, 313, 315, 319, 321, 323, 325, 328], "desirabilityobject": [280, 299, 313, 315, 325, 330], "desktop": 315, "despit": 315, "detail": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 174, 177, 183, 185, 188, 190, 192, 194, 196, 206, 211, 216, 217, 238, 258, 274, 275, 276, 278, 279, 280, 283, 285, 286, 294, 295, 299, 301, 304, 313, 314, 315, 319, 320, 322, 323, 324, 325, 326, 327], "detect": [223, 253, 316], "determin": [23, 153, 235, 264, 270, 276, 318, 323], "detriment": 322, "dev": [313, 315, 316], "develop": [313, 315, 322], "deviat": [200, 296], "df": [104, 147, 149, 153, 171, 242, 250, 251, 252, 254, 255, 288, 313, 320, 324, 325], "di": [276, 277, 279, 282, 283], "dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 113, 116, 118, 119, 120, 135, 136, 137, 138, 143, 144, 147, 149, 151, 153, 155, 164, 165, 166, 168, 177, 183, 185, 188, 190, 192, 194, 196, 206, 211, 217, 225, 228, 248, 258, 296, 310, 311, 315], "dict_bas": [276, 277, 279, 282, 283], "dict_ligand": [276, 277, 279, 282, 283], "dict_solv": [276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 320], "dictat": [310, 311], "dictionari": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 164, 166, 168, 177, 183, 185, 188, 190, 192, 194, 196, 206, 211, 225, 228, 248, 258, 275, 276, 277, 278, 279, 282, 322, 326], "diff": 316, "differ": [40, 76, 147, 149, 150, 153, 172, 174, 179, 219, 248, 249, 277, 278, 280, 288, 294, 299, 303, 304, 310, 311, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "differenti": 326, "dim": [18, 274, 285, 286, 295, 296, 301, 303, 304, 310, 311], "dimens": [18, 183, 185, 188, 190, 192, 194, 196, 270, 274, 275, 278, 280, 285, 286, 296, 301, 302, 303, 310, 311, 315, 322, 324], "dimension": [77, 278, 302, 310, 311, 315], "dimethylisoxazol": 329, "direct": [276, 277, 279, 282, 313, 318, 322], "directli": [189, 193, 195, 235, 311, 313, 315, 320, 321, 325], "directori": [268, 304, 315], "disabl": [216, 218, 307, 308, 315, 316, 319], "disadvantag": 325, "disappear": 315, "disc_ind": [278, 304], "disc_indic": [278, 301, 303, 304], "disc_paramet": [278, 304], "disc_recommend": [122, 304], "discard": 153, "disclaim": 318, "discourag": 319, "discret": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 85, 99, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 150, 153, 179, 274, 275, 278, 280, 282, 285, 292, 296, 300, 304, 311, 312, 313, 315, 319, 325, 326, 330], "discrete_param": [310, 311], "discrete_spac": [274, 285, 286, 301, 304], "discrete_subspac": 324, "discreteconstraint": [37, 38, 39, 40, 41, 42, 43, 44, 153, 320], "discretecustomconstraint": [288, 315, 330], "discretedependenciesconstraint": [42, 46, 289, 291, 330], "discreteexcludeconstraint": [290, 330], "discretelinkedparametersconstraint": 330, "discretenolabelduplicatesconstraint": [42, 291, 330], "discreteparamet": [88, 91, 99, 102, 153], "discretepermutationinvarianceconstraint": [291, 330], "discreteproductconstraint": [292, 330], "discretesumconstraint": [285, 291, 292, 330], "discuss": [299, 318, 320, 324, 326, 329], "disk": 315, "dispatch": 69, "displai": [254, 275, 318], "distanc": [99, 219, 253, 270], "distinct": [319, 323], "distinguish": [34, 35, 315, 320, 322], "distribut": [186, 299, 304, 313, 315, 318], "distutil": 236, "div": 296, "divers": 327, "divis": 266, "dmac": [276, 277, 279, 282, 283], "dmf": 320, "do": [149, 153, 184, 216, 278, 291, 294, 295, 296, 297, 304, 306, 307, 308, 310, 313, 318, 320, 322, 323, 325, 329, 330], "doc": [183, 185, 188, 189, 190, 192, 193, 194, 195, 196, 224, 307, 308, 313, 315], "doc101": 316, "doc103": 316, "docstr": 315, "document": [189, 193, 195, 263, 296, 313, 315, 316, 317, 318, 319, 326], "doe": [22, 42, 172, 174, 177, 183, 184, 185, 188, 190, 192, 194, 196, 203, 242, 244, 248, 263, 279, 283, 296, 297, 302, 307, 308, 310, 311, 315, 318, 320, 321, 326, 327], "doi": 252, "domain": [143, 144, 198, 313, 324], "done": [23, 279, 282, 288, 289, 290, 291, 292, 296, 297, 299, 303, 306, 315, 320, 329], "dont_recommend": [288, 289, 290, 291, 292, 299, 306, 324], "doubl": [263, 295, 316], "down": 325, "downsid": 119, "draft": 315, "drastic": 322, "driven": 248, "drop": [245, 246, 250, 251, 252, 255, 315, 320], "dropna": [245, 246], "dropout": 295, "dtype": [77, 213, 214, 215, 243, 265], "due": [189, 193, 195, 216, 220, 291, 311, 313, 315, 320, 322, 323, 324, 325, 328], "duplic": [42, 108, 223, 228, 291, 315, 320], "dure": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 153, 172, 270, 280, 310, 311, 313, 316, 317, 319, 320, 324, 325, 326], "dynam": 325, "e": [18, 23, 38, 40, 41, 50, 91, 104, 120, 149, 153, 172, 206, 211, 220, 223, 227, 243, 245, 246, 248, 253, 276, 277, 279, 294, 295, 297, 313, 314, 315, 316, 320, 322, 323, 324, 325, 326], "each": [23, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 104, 120, 122, 149, 174, 177, 179, 184, 216, 243, 245, 246, 248, 268, 277, 278, 279, 283, 299, 304, 310, 311, 316, 318, 319, 320, 321, 322, 323, 324, 326, 328], "eagerli": 315, "earli": 315, "earlier": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 314], "easi": [242, 316, 325], "easier": 316, "easiest": [313, 316], "easili": [316, 319, 322, 324, 325, 329], "ecosystem": 325, "edbo": [252, 315], "edit": [313, 316], "editori": 318, "effect": [40, 179, 311, 320, 322, 323, 326, 329], "effici": [153, 315, 324], "ei": [3, 274, 275, 283], "either": [18, 150, 174, 179, 200, 277, 278, 290, 299, 302, 304, 313, 318, 321, 323, 324, 326], "elabor": 318, "electron": [313, 317, 318], "eleg": [310, 325], "element": [30, 31, 32, 37, 153, 179, 219, 223, 234, 253, 264, 265, 310, 311, 320], "elif": [301, 303, 304], "els": [235, 236, 241, 274, 275, 276, 277, 278, 279, 280, 285, 286, 288, 289, 291, 292, 301, 303, 304, 310, 311], "elsewher": 296, "emd": [313, 317], "emdgroup": 313, "emelin": 317, "emerg": 319, "emploi": [23, 323], "employe": [216, 313], "empow": 327, "empti": [147, 149, 153, 158, 242, 254, 278, 299, 304, 306, 315, 324], "empty_encod": [149, 153], "emptysearchspaceerror": 158, "emul": [314, 315], "enabl": [199, 216, 218, 219, 275, 276, 277, 278, 279, 310, 313, 314, 315, 319, 320, 321, 323, 325, 326, 328], "encod": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 102, 143, 144, 149, 153, 183, 185, 188, 190, 192, 194, 196, 276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 294, 295, 297, 299, 306, 307, 308, 310, 311, 313, 315, 320, 324, 325], "encompass": 319, "encount": [270, 316, 321], "end": [0, 215, 258, 297, 299, 306, 318, 320, 325], "endpoint": [216, 315], "enforc": 316, "engin": [314, 325], "enhanc": 18, "enlarg": 322, "enough": [147, 325], "ensembl": 294, "ensur": [104, 276, 277, 279, 313, 320, 325], "enter": [153, 324], "entir": [216, 219, 258, 315, 316], "entiti": 318, "entri": [23, 26, 27, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 166, 219, 248, 253, 279, 288, 289, 290, 291, 292, 315, 320, 328], "enum": [79, 93, 94, 95, 96, 150, 208, 209, 315, 325], "enumer": [78, 92, 207, 310, 311, 321], "env": [315, 316], "environ": [216, 218, 274, 275, 276, 277, 278, 279, 280, 286, 288, 289, 291, 292, 296, 310, 311, 313, 315, 316], "epoch": 295, "eq": [288, 291], "equal": [27, 34, 35, 76, 120, 147, 299, 306, 315, 321, 324, 325, 328], "equat": [320, 326], "equidist": 322, "equip": 320, "equival": [42, 286, 320], "error": [23, 118, 128, 130, 174, 177, 266, 279, 294, 295, 297, 315, 320, 321, 322, 323, 326], "especi": 316, "essenti": [319, 323], "establish": [310, 311], "ester": [276, 277, 279, 282, 283], "estim": [294, 327], "et": [277, 313, 322], "etc": [86, 149, 206, 211, 248, 329], "ethanol": 320, "euclidean": 270, "eval_during_cr": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "eval_during_model": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "evalu": [18, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 183, 185, 188, 190, 192, 194, 196, 236, 301, 302, 303, 304, 315, 319, 329], "even": [200, 251, 310, 311, 318, 319, 322, 326, 327, 329], "event": [23, 219, 318], "everyth": [316, 320], "evolv": 316, "exact": [23, 253, 320, 322], "exactli": [315, 319, 324, 325], "exampl": [104, 228, 235, 273, 274, 281, 284, 287, 293, 298, 300, 305, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "example_input_nam": 296, "except": [242, 256, 257, 276, 277, 279, 294, 295, 297, 307, 308, 313, 314, 315, 316, 318], "excepthook": 314, "exceptiongroup": 315, "exclud": [41, 250, 290, 318, 320], "exclude_list": 252, "exclus": [39, 287, 312, 318, 320, 326], "execut": [23, 48, 174, 216, 277, 314, 315, 316, 318, 325, 326], "exemplari": 319, "exercis": 318, "exhaust": [118, 323], "exist": [219, 224, 315, 316, 319, 320, 325], "exp": 291, "exp_rep": [153, 288, 289, 290, 291, 292, 324], "expect": [3, 4, 8, 9, 10, 11, 37, 275, 283, 289, 296, 308, 315, 316, 319, 320, 321, 322, 325, 326, 328], "expens": [130, 285], "experi": [0, 23, 120, 141, 172, 174, 183, 185, 188, 190, 192, 194, 196, 274, 275, 276, 277, 278, 279, 280, 282, 283, 301, 302, 303, 304, 319, 320, 321, 322, 323, 328, 329, 330], "experiment": [23, 73, 76, 81, 85, 88, 89, 91, 99, 102, 116, 117, 118, 119, 120, 149, 153, 172, 174, 249, 313, 315, 320, 321, 322, 324, 325, 326, 328], "explain": [283, 315], "explan": [319, 327], "explicit": [104, 119, 291, 297, 307, 308, 315, 325, 330], "explicitli": [147, 153, 304, 311, 318, 323], "exploit": [7, 14], "explor": [7, 14, 23, 278, 323, 324], "exponenti": 153, "export": 216, "exposur": 315, "express": [30, 313, 318, 320], "extend": 295, "extens": [315, 323], "extra": [277, 315], "extract": [294, 295, 310], "f": [236, 274, 275, 276, 277, 278, 279, 280, 285, 286, 288, 289, 290, 291, 292, 294, 295, 299, 301, 302, 303, 304, 310, 311], "f1": 326, "f2": 326, "facilit": 323, "fact": [320, 321], "factor": [104, 319], "factori": [104, 147, 229], "fail": [304, 308, 315], "failur": 318, "fairli": 321, "fake": [174, 248, 282, 283, 294, 295, 296, 297, 299, 315, 326], "fall": [319, 328], "fallback": [113, 153, 260, 268, 296, 307, 308, 315, 324], "fals": [27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 153, 185, 186, 190, 192, 194, 196, 214, 216, 219, 227, 235, 236, 241, 253, 283, 288, 289, 290, 291, 292, 294, 295, 299, 306, 307, 308, 313], "famili": 320, "familiar": [274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306], "fang": 317, "farthest": [140, 270, 278, 283, 313, 315, 317, 323], "fashion": [213, 215], "fast": [288, 290, 292, 324, 328], "faster": 153, "favicon": 315, "fc": [276, 277, 279], "feasibl": 319, "featur": [102, 252, 314, 316, 320], "fed": 313, "fee": 318, "feed": [295, 313], "feedback": 317, "few": [315, 316, 325], "field": [165, 315, 324, 329, 330], "fifti": 318, "figur": 268, "file": [268, 276, 277, 279, 296, 297, 304, 313, 315, 318, 325], "filenotfounderror": [276, 277, 279], "fill": 23, "filler": 320, "filter": [26, 28, 149, 153, 250, 288, 320, 324], "final": [174, 277, 282, 294, 311], "final_estim": 294, "find": [225, 265, 268, 313, 319, 320], "fine": [294, 295, 297, 306, 307, 308, 313], "finer": [104, 313], "fingerprint": [96, 243, 322], "finit": [118, 172, 179, 257, 258, 322, 326], "first": [143, 144, 149, 174, 264, 270, 277, 280, 282, 283, 288, 294, 295, 296, 297, 299, 304, 308, 310, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324], "fit": [23, 138, 143, 144, 183, 185, 188, 190, 192, 194, 196, 198, 276, 277, 279, 288, 289, 290, 291, 292, 294, 296, 299, 306, 315, 318, 320, 322], "fit_gpytorch_ml": 315, "fit_gpytorch_mll_torch": 315, "fit_transform": [143, 144], "fitzner": [313, 317], "fix": [172, 301, 302, 303, 304, 316, 319, 322, 326], "flag": [18, 23, 38, 116, 118, 119, 120, 150, 153, 216, 253, 315, 319], "flake8": 315, "flexibl": [315, 325], "flexibli": 323, "float": [7, 14, 27, 32, 34, 35, 63, 68, 70, 76, 77, 91, 98, 99, 102, 106, 107, 130, 153, 174, 177, 200, 213, 214, 215, 220, 243, 248, 249, 252, 258, 262, 263, 264, 265, 266, 272, 275, 278, 280, 295, 296, 299, 302, 310, 316, 326], "float64": 272, "floattensortyp": 296, "fly": 325, "fn": 224, "focu": [7, 14, 295, 319], "focus": [81, 304, 313], "folder": [277, 313, 316, 327], "follow": [149, 174, 177, 216, 275, 276, 277, 278, 279, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 297, 299, 304, 307, 308, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "forc": [130, 315, 323], "forest": [195, 196], "forgiv": 328, "fork": 316, "form": [35, 153, 172, 174, 248, 313, 318, 319, 321, 322, 323, 324, 325, 326], "format": [27, 34, 35, 217, 238, 254, 259, 296, 297, 306, 307, 313, 314, 315, 316, 319, 325], "format_except": 314, "former": 315, "formul": 329, "forrest": 315, "forward": 295, "found": [58, 104, 147, 153, 263, 265, 268, 275, 295, 299, 313, 316, 319, 320, 323, 329], "foundat": 323, "fourth": 320, "fp": 315, "fpsrecommend": [283, 294, 295, 296, 297, 306, 307, 308, 313, 323], "frac": [311, 321], "frac1": [289, 291], "frac2": 291, "frac3": 291, "frac_resolut": 289, "fraction": [63, 216, 291, 320], "fraction1": [289, 291], "fraction2": 291, "fraction3": 291, "fraction_1": 320, "fraction_2": 320, "fraction_3": 320, "frame": [147, 242, 249], "frame1": 289, "frame2": 289, "frame_1": 320, "frame_2": 320, "framea": 289, "frameb": 289, "frameb_a": 289, "frameb_b": 289, "framework": [319, 322], "free": [316, 318], "freedom": 325, "frictionless": 325, "friendli": 315, "from": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 168, 177, 179, 183, 185, 188, 190, 192, 194, 196, 200, 206, 211, 214, 215, 235, 236, 238, 242, 249, 250, 252, 258, 266, 268, 270, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 314, 315, 316, 318, 320, 321, 322, 323, 326, 328, 329, 330], "from_bound": [147, 315, 324], "from_config": [23, 307, 308, 319], "from_datafram": [147, 149, 153, 315, 324, 325], "from_dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 258, 296], "from_json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 258, 296, 297, 306, 319, 325], "from_product": [149, 153, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 315, 320, 324, 325, 326], "from_record": 325, "from_simplex": [153, 315, 324], "frozenset": 291, "fsspec": 315, "fulfil": [34, 35], "full": [18, 147, 263, 273, 312, 315, 319, 329, 330], "full_factori": 147, "full_lookup": [276, 277, 279], "fulli": [313, 315, 316, 326], "fulltest": 316, "func": 316, "func_nam": 310, "function": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 29, 34, 35, 37, 45, 51, 69, 72, 75, 80, 103, 105, 112, 128, 130, 142, 148, 149, 152, 156, 159, 160, 168, 169, 172, 173, 176, 177, 178, 182, 184, 186, 197, 199, 201, 202, 205, 209, 212, 213, 214, 215, 216, 219, 220, 222, 233, 237, 238, 239, 247, 248, 249, 254, 256, 261, 267, 268, 269, 282, 288, 294, 295, 300, 310, 311, 312, 313, 314, 315, 319, 320, 321, 323, 324, 327, 328, 329, 330], "function_nam": [310, 311], "fundament": [322, 325], "furo": 315, "further": [275, 278, 280, 306, 313, 324, 326, 327, 329, 330], "furthermor": [299, 301, 302, 303, 304], "furyl": [276, 277, 279], "futur": [42, 184, 189, 193, 195, 307, 308, 310, 328], "fuzzi": 219, "fuzzy_row_match": [153, 219], "g": [38, 40, 41, 50, 91, 104, 149, 153, 206, 211, 223, 243, 245, 246, 253, 313, 315, 316, 320, 322, 323, 324, 326], "gain": [153, 319], "gamma": 68, "gammaprior": 315, "gather": [120, 310, 311], "gaussian": [59, 135, 187, 188, 213, 283, 299, 315, 320, 323, 329], "gaussian_process": [188, 283], "gaussianmixtur": 135, "gaussianmixtureclusteringrecommend": 323, "gaussianprocesssurrog": [283, 288, 289, 290, 291, 292, 299, 306, 307, 308, 315, 327], "gb": 294, "gcf": [275, 276, 278, 279], "ge": 286, "gener": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 95, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 183, 185, 188, 190, 192, 194, 196, 206, 211, 217, 235, 258, 280, 283, 313, 315, 317, 318, 319, 320, 322, 325, 326, 327, 328, 330], "geom_mean": [70, 76, 79, 299, 321], "geometr": [79, 266, 299, 321], "germani": [216, 313, 317], "get": [23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 147, 248, 283, 301, 302, 303, 304, 313, 315, 330], "get_candid": 153, "get_invalid": [28, 37, 38, 39, 40, 41, 42, 43, 44], "get_parameters_from_datafram": [147, 153], "get_subclass": 283, "git": [313, 316], "github": [189, 193, 195, 232, 252, 296, 315, 316, 317], "give": [296, 297, 311, 318, 319, 321, 325], "given": [21, 23, 30, 31, 32, 46, 58, 89, 102, 104, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 153, 157, 172, 174, 183, 185, 186, 188, 190, 192, 194, 196, 200, 208, 220, 225, 227, 230, 234, 235, 240, 244, 248, 255, 258, 259, 264, 266, 288, 289, 290, 291, 292, 299, 304, 310, 311, 319, 324, 326], "glass_transition_tempc": 322, "global": [231, 315], "gmean": 266, "gmm": 135, "go": 313, "goal": [278, 321], "goe": 327, "good": [248, 299, 319, 328], "good_interv": 248, "good_reference_valu": 248, "goodwil": 318, "googl": [315, 316], "govern": 313, "gp": [183, 185, 188, 190, 192, 194, 196, 315], "gpytorch": [61, 63, 66, 68, 315], "gradient": 194, "gradientboostingregressor": 294, "grant": 318, "granular": [294, 295, 297, 306, 307, 308, 313], "granularity_coars": 306, "granularity_medium": 306, "great": 325, "greater": 120, "greatli": 316, "greedi": [129, 130, 274, 275, 278, 315, 323], "grid": [310, 311], "grid_d": [310, 311], "grossli": 318, "group": [228, 313, 315, 319], "groupbi": [177, 179], "gt": [291, 292], "gu16": 322, "guarante": [320, 323], "guid": [282, 295, 313, 315, 316, 319, 321, 324, 326, 329], "guidelin": [315, 316], "ha": [23, 34, 35, 38, 51, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 153, 235, 253, 277, 283, 289, 299, 304, 307, 308, 313, 315, 316, 318, 319, 320, 322, 324, 325, 326, 328, 329], "had": [172, 320, 322, 326], "half": [99, 258, 304], "hamster": 329, "hand": [27, 34, 35, 102, 310, 311, 313, 319, 325], "handl": [86, 174, 186, 200, 256, 280, 288, 289, 299, 315, 319, 321, 326], "happen": [118, 299, 304, 311, 314, 315, 316, 324, 325], "happili": 321, "hard": 315, "harmless": 318, "hartman": 310, "hartmann": [310, 311, 329], "hasattr": [274, 285, 286, 301, 303, 304], "hash": [216, 217], "hashabledict": 315, "have": [18, 23, 30, 42, 102, 138, 153, 172, 184, 189, 193, 195, 203, 225, 228, 243, 248, 253, 263, 275, 276, 277, 282, 283, 288, 289, 291, 299, 303, 304, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326], "he": 283, "head": 315, "heart": 329, "help": 325, "helper": [295, 296, 325], "henc": [242, 306, 320, 322], "here": [41, 263, 275, 276, 278, 279, 280, 282, 285, 286, 291, 294, 297, 301, 302, 303, 304, 306, 310, 311, 313, 320, 321, 322, 323, 324, 325, 326, 328, 329], "herebi": 318, "herein": [318, 319], "heurist": 270, "hidden": 295, "hierarch": 325, "hierarchi": [58, 315, 316, 319, 325], "high": [316, 319, 320, 322, 325], "higher": [7, 14, 102, 314, 320, 323], "highest": 325, "highlight": [313, 329], "hint": 316, "histogram": 220, "histori": 316, "hold": [228, 318, 325], "homepag": [313, 315], "hood": 322, "hook": [113, 153, 160, 164, 314, 315, 316], "hopp": [313, 317], "host": [216, 313, 315], "hostnam": [216, 217], "hot": [93, 277, 313, 315, 322], "how": [39, 174, 216, 270, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 293, 294, 295, 296, 297, 302, 304, 306, 307, 308, 311, 313, 319, 320, 321, 326, 328], "howev": [104, 153, 184, 216, 274, 291, 301, 303, 304, 307, 308, 314, 316, 318, 319, 320, 322, 324, 325, 326, 327], "html": [27, 34, 35, 224, 238, 263, 296, 315], "http": [27, 34, 35, 183, 185, 188, 189, 190, 192, 193, 194, 195, 196, 224, 232, 238, 252, 263, 313, 315, 318], "hue": [274, 275, 276, 277, 278, 279, 310, 311], "human": [306, 315, 317, 325], "hybrid": [17, 18, 50, 121, 122, 130, 141, 149, 150, 273, 283, 284, 300, 312, 313, 315, 323, 324], "hybrid_recommend": 304, "hybrid_sampl": [130, 278, 283, 288, 289, 290, 291, 292, 299, 306, 323], "hyperparam": 295, "hyperparamet": [283, 295], "hyperrectangl": [147, 324], "hypothesi": [313, 315, 316], "i": [18, 23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 51, 52, 54, 77, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 118, 119, 120, 122, 130, 135, 136, 137, 138, 143, 144, 147, 149, 153, 158, 172, 174, 177, 179, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 203, 208, 213, 214, 215, 216, 218, 219, 220, 224, 227, 232, 234, 235, 236, 241, 242, 248, 249, 253, 254, 257, 258, 263, 264, 265, 268, 270, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 291, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "ideal": 320, "ident": [104, 322, 325], "identifi": [177, 228, 242, 253, 315, 320, 322, 325, 326], "idx_offset": [27, 34, 35], "ignor": [118, 130, 153, 154, 174, 177, 225, 252, 279, 304, 315, 320, 325, 326], "ignore_exampl": 315, "ignore_list": 251, "ii": 318, "iii": 318, "imag": 315, "immedi": [268, 319], "immut": 315, "impact": [277, 311], "imperfect": 249, "implement": [35, 42, 77, 111, 123, 130, 179, 233, 288, 295, 302, 310, 315, 316, 317, 323, 324, 329], "impli": [313, 318, 320, 322], "implicitli": 325, "import": [56, 76, 130, 216, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329], "importantli": 278, "impos": [291, 320, 326], "imposs": [216, 313, 325], "improv": [3, 4, 6, 8, 9, 10, 11, 12, 283, 286, 313, 315, 318], "imput": [174, 273, 279, 312, 313, 326], "impute_mod": [174, 177, 279, 326], "in_featur": 295, "inabl": 318, "inaccuraci": 313, "incident": 318, "includ": [46, 73, 76, 81, 120, 149, 174, 227, 251, 276, 289, 291, 294, 295, 297, 307, 308, 311, 313, 315, 316, 318, 320], "inclus": 318, "incom": 325, "incompat": [50, 185, 186, 199, 290, 320], "inconsist": 315, "incorpor": [318, 327], "increas": [118, 214, 215, 299, 310, 311, 315, 322], "increment": 153, "incur": 318, "indefinit": [118, 174], "indemn": 318, "indemnifi": 318, "independ": [122, 192, 296, 323, 326], "index": [28, 37, 38, 39, 40, 41, 42, 43, 44, 149, 177, 253, 270, 285, 286, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 322, 324], "indic": [23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 149, 186, 255, 270, 278, 304, 315, 318, 323, 327], "indirect": [227, 318], "individu": [38, 39, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 174, 186, 318, 319, 321, 323, 329], "ineffici": 153, "inequ": [35, 147, 324], "inf": [288, 289, 290, 291, 292, 306], "infer": [104, 185, 310, 311, 315, 324], "inferencesess": 185, "infin": 107, "infinit": [118, 119, 229, 257, 315, 322], "influenc": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 324], "info": [220, 315], "inform": [18, 86, 206, 216, 276, 277, 279, 301, 302, 303, 304, 311, 313, 315, 316, 318, 322, 324, 330], "infring": 318, "ingest": [153, 174, 322, 323], "ingredi": 320, "inherit": 316, "init": 202, "initi": [119, 120, 122, 135, 136, 137, 138, 140, 153, 174, 177, 216, 219, 270, 273, 278, 288, 295, 311, 312, 315, 317, 319, 322, 323, 325, 326, 329], "initial_data": [174, 177, 276, 311, 326], "initial_recommend": [120, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 307, 308, 313, 323], "initial_recommender_cl": 315, "initial_strategi": 315, "initial_typ": 296, "inject": 325, "inner": [114, 323, 325], "inplac": [277, 310, 311], "input": [77, 99, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 174, 183, 185, 188, 190, 192, 194, 196, 198, 199, 213, 228, 249, 253, 258, 260, 264, 295, 296, 299, 302, 310, 311, 315, 325, 326], "input_dim": [295, 296], "insid": [296, 297, 314, 325], "inspect": 235, "instabl": 320, "instal": [314, 315, 316, 322], "instanc": [38, 41, 120, 149, 153, 289, 313, 316, 319, 320, 322, 324, 325, 326], "instanti": [185, 319], "instead": [23, 118, 219, 242, 307, 308, 313, 314, 315, 319, 320, 321, 322, 325, 326, 328], "institut": [317, 318], "instruct": [313, 315, 328], "instrument_nam": 220, "int": [23, 27, 34, 35, 77, 93, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 174, 177, 179, 213, 214, 215, 220, 231, 243, 254, 265, 270, 288, 290, 292, 295, 299, 311, 316, 322], "integ": [93, 304, 315, 316, 322], "integr": [316, 319], "intend": [282, 291, 310, 323, 324], "intens": 322, "intention": 318, "interact": [22, 23, 282, 313, 314, 319, 325], "interconnect": 319, "interest": 321, "interfac": [111, 294, 315, 318, 319], "intermedi": [138, 270], "intern": [23, 42, 118, 299, 315, 320, 322, 323, 324, 325], "internship": 317, "interpol": 63, "interpret": [149, 172, 297, 301, 302, 303, 304, 307, 308, 311, 324, 326], "interrupt": 48, "intersect": [278, 304], "interv": [98, 211, 213, 214, 215, 299, 315, 319, 322, 325, 328], "introduc": [314, 315, 320, 322, 323, 326], "intuit": 319, "invalid": [28, 37, 38, 39, 40, 41, 42, 43, 44, 46, 153, 242, 253, 297, 307, 314, 319, 320, 324], "invalid_config": 308, "invalid_surrogate_model": 297, "invalid_typ": 308, "invari": [38, 41, 42, 291, 320], "invers": [164, 325], "investig": [172, 326], "invok": 330, "involv": [23, 153, 216, 313, 320, 321, 322, 324, 325], "irrelev": 320, "irrespect": [219, 253], "irrevers": 216, "irreversibli": [216, 313], "irrevoc": 318, "is_bound": [258, 315], "is_continu": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "is_discret": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "is_empti": [147, 153, 315], "is_finit": [258, 315], "is_fully_unbound": 258, "is_half_bound": 258, "is_in_rang": [84, 85, 86, 88, 89, 91, 98, 99, 102], "is_left_bound": 258, "is_numer": [84, 85, 86, 88, 89, 91, 98, 99, 102], "is_right_bound": 258, "iso": 296, "isoxazol": 329, "issu": [184, 189, 193, 195, 224, 232, 315, 318], "item": [31, 84, 85, 86, 88, 89, 91, 98, 99, 102, 310, 311, 322], "iter": [23, 98, 118, 119, 153, 154, 174, 184, 211, 229, 249, 255, 259, 275, 276, 280, 288, 289, 290, 291, 292, 301, 302, 303, 304, 310, 311, 313, 315, 319, 322, 323, 326], "iterrow": [285, 286, 301, 302, 303, 304], "its": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 122, 147, 149, 153, 168, 179, 183, 185, 186, 188, 190, 192, 194, 196, 198, 200, 206, 211, 216, 220, 226, 235, 248, 258, 283, 311, 313, 314, 316, 318, 320, 321, 324, 325, 326], "itself": [310, 314], "j": [277, 313, 322], "jackiepho": [276, 277, 279], "januari": 318, "javadi": 317, "join": [291, 314], "joint": [183, 185, 188, 190, 192, 194, 196, 319], "joint_posterior": [183, 185, 188, 190, 192, 194, 196], "joint_posterior_attr": [186, 294, 295], "jointli": [186, 319], "json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 258, 268, 296, 297, 306, 307, 315, 330], "json_str": 325, "juli": 317, "jupyt": 296, "just": [316, 325], "k": [99, 136, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 301, 302, 303, 304, 315, 323], "keep": [37, 102, 147, 153, 278, 295, 315, 316, 324], "kei": [228, 248, 277, 316], "kept": 322, "kernel": [63, 66, 68, 188, 283, 288, 289, 290, 291, 292, 299, 306, 315, 320, 329], "keyword": [278, 279, 283, 304, 311, 315, 324, 326], "kgaa": [216, 313, 317], "kickstart": 325, "kind": [130, 313, 315, 318, 322, 323], "kiter": [288, 289, 290, 291, 292, 299], "kmean": [136, 283], "kmeansclusteringrecommend": [283, 323], "kmedoid": 137, "knob": 313, "know": [278, 302, 307, 313, 325], "knowledg": 313, "known": [320, 329], "kwarg": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 68, 111, 225, 257], "l1": 322, "label": [41, 42, 91, 102, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 183, 185, 188, 190, 192, 194, 196, 220, 291, 313, 315, 320, 322, 324, 326], "lambda": [288, 290, 291, 292, 310], "land": 315, "languag": [224, 313], "larg": [102, 153, 285, 286, 301, 315, 322], "larger": [63, 99, 283, 290, 319, 320, 325], "largest": 270, "last": [118, 295, 316, 319, 323], "latent": 322, "later": [99, 303, 314, 319, 325], "latest": [313, 316, 319], "latter": [235, 319], "law": [313, 318], "lawsuit": 318, "layer": 295, "lazi": [271, 315], "lazili": 315, "le": 286, "lead": [55, 299, 315, 325], "lean": 316, "learn": [178, 179, 183, 185, 188, 190, 192, 194, 196, 310, 312, 313, 315, 320, 322, 327, 328, 330], "least": [118, 313, 318, 319], "leav": 325, "lee": [313, 317], "left": [52, 53, 174, 253, 258, 289, 321], "left_df": 253, "legal": 318, "legend": [276, 279], "len": [289, 291], "length": [118, 119], "lengthi": 319, "lengthscal": [61, 63, 315], "lengthscale_prior": [61, 63], "less": 319, "let": [277, 294, 295, 296, 297, 311, 313, 320, 321, 325], "level": [249, 315, 316, 319, 320, 323, 325], "leverag": [319, 323], "li": 322, "liabil": 318, "liabl": 318, "lib": [307, 308], "licensor": 318, "lie": [23, 248], "life": [313, 316, 317], "lifecycl": 319, "ligand": [276, 277, 279, 282, 283, 313, 322], "like": [138, 177, 223, 313, 315, 316, 319, 320, 322, 325, 326], "limit": [220, 313, 317, 318, 320, 324, 329, 330], "line": [258, 275, 276, 278, 279, 315, 316, 319, 322, 326, 329], "linear": [147, 190, 209, 214, 280, 283, 284, 295, 299, 312, 315, 316, 324, 328], "linear_model": [294, 296], "linear_regressor": 296, "linearli": [214, 215, 299], "linearregress": 294, "lineplot": [274, 275, 276, 277, 278, 279, 310, 311], "link": [40, 315, 318, 322], "linspac": [274, 275, 278, 280, 288, 289, 290, 291, 292, 294, 295, 296, 297, 303, 304, 306, 310, 311], "lint": [313, 315, 316], "linter": [315, 316], "list": [26, 27, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 70, 89, 104, 108, 118, 119, 147, 149, 153, 154, 157, 158, 177, 179, 219, 227, 228, 234, 243, 244, 245, 246, 248, 250, 251, 252, 253, 270, 274, 275, 276, 278, 280, 283, 288, 289, 290, 291, 292, 295, 299, 301, 302, 303, 304, 311, 313, 316, 318, 320, 321, 323, 324, 326], "liter": [70, 118, 174, 177, 249, 270, 316], "literatur": 315, "litig": 318, "littl": 314, "liver": [326, 329], "load": [268, 271, 296, 307, 308, 315], "loc": [276, 279], "local": [314, 316], "locat": 268, "log": [216, 220, 313], "logarithm": [4, 9, 10, 266], "logei": [4, 315], "logic": [114, 248, 315, 320, 323], "logo": 315, "long": [319, 325], "longer": 315, "look": [189, 193, 195, 283, 285, 286, 319, 320, 325, 328], "lookup": [172, 174, 177, 179, 238, 253, 273, 274, 275, 278, 302, 312, 315, 330], "lookup_test_task": 311, "lookup_training_task": 311, "lookup_withmiss": 279, "loop": [172, 174, 179, 288, 289, 290, 291, 292, 295, 299, 315, 326], "loss": [295, 297, 318], "lost": 325, "lot": 329, "low": [278, 314, 315, 322, 325], "lower": [213, 214, 215, 258, 276, 279, 299, 310, 311, 322, 328], "lower_bound": [288, 289, 290, 291, 292, 299, 306, 324], "lr": [294, 295], "lst_exclud": 250, "luxuri": 319, "m290244": [307, 308], "machin": [216, 313, 316, 322, 328], "machineri": [314, 316], "made": [56, 153, 174, 279, 313, 314, 318, 320, 324, 326], "magnitud": 249, "mai": [23, 149, 313, 318, 319, 325], "mail": 318, "main": [22, 23, 313], "maintain": [316, 324], "major": 326, "make": [7, 14, 42, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 198, 200, 224, 276, 279, 283, 285, 313, 314, 316, 318, 319, 320, 322, 325, 326, 329], "malfunct": 318, "manag": [22, 147, 148, 149, 153, 318], "mandatori": 328, "mani": [275, 278, 303, 304, 319, 322, 325, 328], "manipul": 324, "manual": [304, 314, 324, 325], "map": [91, 102, 177, 213, 214, 215, 225, 275, 276, 277, 278, 279, 299, 326, 328], "margin": 315, "mark": [153, 318, 329], "mark_as_measur": 153, "markdown": [297, 307, 308, 315], "marker": [274, 276, 277, 279, 310, 311], "markers": [274, 277, 310, 311], "marketplac": 315, "martin": [313, 317], "mask_bad1": 288, "mask_bad2": 288, "mask_bad3": 288, "mask_good": [288, 320], "match": [23, 104, 147, 149, 153, 206, 208, 211, 219, 225, 253, 278, 299, 304, 313, 315, 319, 321, 325, 330], "match_targeta": 328, "match_targetb": 328, "matern": 63, "maternkernel": 315, "math": 291, "mathemat": 315, "matplotlib": [275, 276, 278, 279, 315], "matric": [183, 185, 188, 190, 192, 194, 196], "matter": [316, 321], "max": [208, 276, 277, 279, 280, 282, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 307, 308, 313, 315, 321, 325, 330], "max_column": 254, "max_nonzero": 153, "max_row": 254, "max_sum": [153, 324], "max_target": 328, "max_yield": [276, 279], "maxim": [206, 208, 211, 280, 282, 299, 313, 328], "maximum": [102, 153, 213, 254, 299, 315, 320, 324], "mc": 295, "md": 315, "me2pph": [276, 277, 279], "mean": [5, 7, 14, 42, 70, 79, 136, 143, 144, 172, 174, 177, 183, 185, 188, 190, 192, 194, 196, 200, 266, 279, 280, 283, 294, 295, 296, 299, 315, 316, 318, 319, 320, 321, 322, 323, 325, 330], "meaning": 321, "meanpredictionsurrog": [200, 283, 327], "meantim": [316, 320], "meanvarestim": 294, "measur": [23, 118, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 153, 172, 174, 216, 219, 253, 276, 277, 279, 283, 285, 286, 299, 301, 302, 303, 304, 313, 315, 316, 321, 322, 323, 324, 326, 328, 330], "mechan": [7, 14, 48, 76, 77, 79, 172, 175, 179, 260, 278, 310, 311, 315, 318, 325, 326], "media": [318, 322], "mediocr": 328, "medium": [294, 295, 297, 306, 313, 318, 322], "medoid": [137, 315, 323], "meet": [248, 318], "member": [235, 320], "merchant": 318, "merck": [216, 313, 317], "mere": [318, 321], "merg": 316, "meshgrid": [310, 311], "messag": [294, 295], "meta": [52, 116, 118, 119, 120, 123, 313, 315, 330], "metadata": [23, 147, 153, 217, 315, 330], "metarecommend": [118, 119, 120, 315], "method": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 202, 203, 206, 211, 223, 224, 235, 258, 268, 295, 297, 307, 308, 315, 316, 317, 319, 321, 322, 324, 325, 326, 329], "methyldiphenylphosphin": [276, 277, 279], "methylisoxazol": 329, "metric": [216, 313, 322], "micromamba": 315, "midpoint": 328, "might": [38, 42, 102, 149, 277, 283, 285, 289, 291, 304, 311, 314, 319, 320, 324, 326, 329], "mimic": 320, "min": [208, 274, 275, 278, 280, 285, 286, 299, 301, 302, 303, 304, 310, 311, 313, 315, 321, 325, 330], "min_nonzero": 153, "min_target": 328, "miniconda": 315, "minim": [206, 208, 211, 280, 299, 310, 311, 328], "minimum": [99, 153], "minor": 315, "mirror": [319, 325], "miss": [23, 174, 279, 315, 316, 326], "mix": [179, 291, 313, 320, 322, 323, 325, 329], "mixin": 168, "mixtur": [135, 287, 312, 315, 320, 322, 323, 329], "mobil": 315, "mode": [70, 91, 102, 118, 174, 206, 208, 211, 214, 248, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 321, 323, 325, 330], "model": [26, 27, 28, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 183, 184, 185, 186, 188, 190, 192, 194, 196, 199, 200, 202, 203, 263, 285, 286, 293, 310, 311, 313, 315, 317, 319, 320, 322, 323, 325, 328, 329, 330], "model_cl": 203, "model_class": [135, 136, 137, 138], "model_cluster_num_parameter_nam": [135, 136, 137, 138], "model_from_config": 296, "model_from_python": 296, "model_init": 202, "model_json": 296, "model_param": [135, 136, 137, 138, 190, 194, 196, 297, 315], "modif": [314, 318], "modifi": [23, 198, 200, 249, 318, 324], "modul": [0, 1, 24, 59, 64, 71, 82, 100, 109, 114, 123, 126, 131, 145, 159, 160, 172, 180, 181, 204, 221, 261, 271, 295, 313, 315, 316], "modular": 316, "mol": 244, "molecul": [40, 96, 102, 242, 243, 244, 322], "molecular": 322, "moment": [179, 316, 328], "monitor": 216, "monkeypatch": 314, "mont": [8, 9, 10, 11, 12, 13, 14, 51, 177, 274, 275, 277, 278, 279, 280, 295, 310, 311, 326], "mordr": [96, 102, 149, 245, 276, 277, 279, 282, 283, 289, 291, 294, 295, 297, 307, 308, 313, 315, 320, 322], "mordredcommun": [315, 322], "more": [7, 14, 42, 46, 53, 102, 118, 119, 147, 149, 153, 158, 174, 183, 185, 188, 190, 192, 194, 196, 198, 199, 200, 219, 235, 278, 279, 280, 283, 291, 294, 310, 313, 315, 316, 318, 319, 320, 321, 322, 324, 325, 328], "morgan": [96, 243, 322], "morgan_fp": [96, 277, 322], "most": [153, 174, 275, 278, 281, 313, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328], "move": [315, 325], "mseloss": 295, "much": [277, 278, 321, 322], "multi": [273, 312, 315], "multipl": [30, 76, 176, 177, 249, 275, 276, 277, 278, 279, 289, 313, 315, 320, 321, 328, 329, 330], "multipli": [35, 320], "multitask": 315, "must": [38, 73, 76, 81, 149, 153, 179, 249, 283, 294, 295, 299, 315, 316, 318, 320, 321, 322], "mutual": 326, "my_attribut": 316, "mypi": [224, 232, 313, 315, 316], "mystr": 316, "n": [18, 236, 276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 297, 299, 301, 302, 303, 304, 306], "n_batches_don": 23, "n_bit": 243, "n_cluster": [136, 137], "n_compon": 135, "n_doe_iter": [174, 177, 179, 274, 275, 276, 277, 278, 279, 280, 310, 311, 326], "n_estim": 297, "n_fits_don": 23, "n_iter": [285, 286, 288, 289, 290, 291, 292, 299], "n_mc_iter": [177, 179, 274, 275, 277, 278, 279, 280, 310, 311, 326], "n_point": 147, "n_sampl": 270, "n_task": 149, "n_task_param": 315, "naiv": [122, 192, 200, 278, 283, 315, 324], "naive_hybrid_campaign": 278, "naive_hybrid_recommend": 278, "naivehybridrecommend": 315, "naivehybridspacerecommend": [278, 304, 315, 323], "nake": [216, 219], "name": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 34, 35, 46, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 135, 136, 137, 138, 147, 153, 157, 166, 177, 185, 198, 200, 206, 211, 216, 225, 226, 230, 242, 243, 245, 246, 248, 250, 268, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 315, 316, 318, 320, 321, 324, 325, 326, 328, 329], "name_or_abbr": [226, 230], "namespac": [315, 316], "nan": [23, 107, 245, 246], "nativ": 296, "natur": [194, 277, 316, 320, 323, 325, 328], "navig": [313, 319], "nbase": [243, 245, 246], "nbviewer": 296, "ndarrai": [77, 147, 149, 153, 213, 214, 215, 258, 266, 270, 315], "ne": 291, "nearli": 328, "necessari": [316, 319, 320, 321, 322, 324, 326], "necessarili": [318, 319, 320, 324, 329], "need": [18, 23, 111, 179, 186, 253, 274, 275, 276, 277, 278, 279, 280, 283, 288, 291, 292, 294, 296, 299, 301, 302, 303, 304, 310, 311, 313, 315, 316, 319, 320, 321, 322, 325, 326, 327, 328], "negat": [311, 320, 329], "neglig": 318, "neither": [179, 249], "nest": [319, 330], "network": 295, "neural": 295, "neuralnetdropout": 295, "neuralnetdropoutsurrog": 295, "never": [290, 291], "nevertheless": [235, 314], "new": [23, 70, 73, 76, 81, 118, 120, 147, 184, 213, 214, 215, 248, 249, 252, 282, 306, 313, 315, 316, 319, 320, 329], "new_rec": 319, "newli": [216, 313, 316], "next": [23, 120, 291, 306, 310, 311, 313, 319, 323, 325], "ngboost": [194, 283, 315], "ngboostmodel": 297, "ngboostsurrog": [283, 297, 327], "nice": 314, "nicknam": 242, "nintern": 299, "nn": 295, "no_duplicates_constraint": 291, "no_tl": 310, "nois": [174, 249, 311, 315], "noise_level": 249, "noise_perc": [174, 177, 326], "noise_std": [310, 311], "noise_typ": 249, "noised_hartmann": 310, "noisi": [10, 11, 310, 329], "non": [23, 122, 174, 179, 183, 185, 188, 190, 192, 194, 196, 235, 302, 310, 318, 324, 325], "none": [18, 23, 32, 42, 46, 61, 63, 70, 98, 104, 106, 107, 108, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 151, 153, 155, 157, 158, 161, 162, 164, 166, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 202, 203, 211, 219, 220, 248, 249, 250, 251, 252, 258, 259, 268, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 324, 326, 328], "nonpredict": [133, 135, 136, 137, 138, 140, 141], "nonpredictiverecommend": [138, 140, 141, 315], "nonzero": [153, 315], "noqa": [288, 316], "nor": 249, "norecommenderslefterror": [118, 119], "norm": 297, "normal": [143, 288, 290, 291, 292, 299, 314, 318, 321, 324], "normaliz": 321, "not_a_param": 297, "notabl": 315, "note": [23, 42, 130, 149, 174, 177, 179, 184, 185, 216, 248, 249, 275, 276, 277, 278, 279, 283, 289, 291, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 313, 319, 320, 321, 323, 324, 325, 326, 327, 329], "notebook": 296, "noteworthi": 319, "noth": [23, 27, 32, 34, 35, 54, 76, 89, 120, 122, 128, 130, 135, 136, 137, 138, 147, 149, 153, 190, 194, 196, 211, 318, 322], "notic": [316, 318, 325], "notimplementederror": [77, 158, 161, 162, 179, 183, 184, 185, 188, 190, 192, 194, 196], "notwithstand": 318, "now": [275, 276, 277, 278, 279, 280, 282, 283, 288, 290, 291, 299, 306, 307, 310, 311, 313, 315, 322, 329], "np": [77, 274, 275, 278, 280, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 303, 304, 306, 310, 311, 320, 322], "nrecommend": [282, 283, 299, 301, 302, 303, 304], "nu": 63, "num_disc_1": [299, 319], "num_disc_2": 299, "num_experi": [174, 274, 275, 276, 277, 278, 279, 280, 310, 311], "num_neuron": 295, "num_parameter_1": 292, "num_parameter_2": 292, "num_parameter_3": 292, "num_parameter_4": 292, "num_parameter_5": 292, "num_parameter_6": 292, "num_valu": [288, 289, 290, 291, 292, 299, 306, 324], "number": [23, 102, 111, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 174, 177, 179, 216, 243, 254, 258, 270, 274, 275, 276, 277, 278, 279, 280, 285, 286, 288, 289, 290, 292, 301, 302, 303, 310, 311, 313, 315, 319, 320, 321, 322, 324, 325, 326], "numer": [23, 32, 34, 35, 55, 84, 85, 86, 88, 89, 91, 98, 99, 102, 147, 153, 211, 219, 249, 253, 282, 285, 291, 315, 320, 321, 322, 324, 326, 328], "numerical_measurements_must_be_within_toler": [23, 153, 219, 253, 315, 319], "numericalcontinuousparamet": [27, 34, 35, 147, 278, 285, 286, 301, 302, 304, 311, 324, 330], "numericaldiscreteparamet": [153, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 303, 304, 306, 307, 308, 310, 311, 313, 324, 325, 330], "numericaltarget": [274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 321, 325, 330], "numericcontinu": [278, 304], "numparam1": 292, "numparam2": 292, "numparam3": 292, "numparam4": 292, "numparam5": 292, "numparam6": 292, "numpi": [147, 258, 262, 274, 275, 278, 280, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 303, 304, 306, 310, 311, 315, 320], "nuniqu": 291, "nyou": [274, 301, 303, 304], "o": [216, 274, 275, 276, 277, 278, 279, 280, 282, 283, 286, 288, 289, 290, 291, 292, 294, 295, 297, 310, 311, 313, 320, 322], "o2": [276, 277, 279], "obj": [106, 107, 108, 162], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 76, 79, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 143, 144, 147, 149, 153, 154, 162, 163, 166, 168, 183, 185, 188, 190, 192, 194, 196, 198, 200, 206, 211, 223, 224, 225, 244, 249, 253, 258, 268, 278, 282, 294, 295, 296, 297, 304, 307, 308, 314, 315, 316, 318, 319, 320, 323, 324, 326, 327, 328, 330], "objective_json": 325, "oblig": 318, "observ": [172, 326, 328], "obtain": [149, 174, 277, 311, 313, 319, 325, 329], "oc": [276, 277, 279, 282, 283], "oc1": [276, 277, 279], "occur": [41, 316], "occurr": 320, "octanol": [320, 322], "off": [7, 14, 179, 216, 236, 289, 313, 315, 320, 328], "offer": [303, 318, 322, 323, 325, 326, 327, 329], "offset": [27, 34, 35], "often": [216, 320, 322, 325], "oftentim": 325, "oh": [88, 93, 277, 289, 294, 295, 297, 299, 306, 307, 308, 313, 324, 325], "ok": 299, "omit": [313, 325], "onc": [177, 322, 326], "one": [23, 46, 104, 114, 118, 149, 158, 200, 275, 276, 277, 278, 279, 283, 285, 299, 308, 310, 311, 313, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329], "onehot": 277, "ones": [149, 219, 253, 277, 304, 315], "onli": [7, 14, 34, 35, 38, 63, 102, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 179, 200, 216, 219, 220, 232, 235, 248, 253, 270, 274, 276, 283, 288, 289, 291, 296, 297, 301, 302, 303, 304, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "onnx": [184, 185, 263, 293, 313, 315, 327], "onnx_input_nam": [185, 296], "onnx_str": [185, 296], "onto": 316, "open": [313, 316], "opentelemetri": 315, "oper": [32, 39, 164, 198, 200, 261, 285, 290, 291, 292, 314, 315, 320, 323, 325], "operator_convert": 296, "opposit": 320, "opt": 295, "optim": [23, 27, 34, 35, 122, 130, 172, 174, 177, 179, 248, 277, 278, 280, 281, 282, 285, 286, 295, 299, 304, 315, 317, 320, 321, 322, 323, 324, 326, 328, 329], "optimize_acqf": [27, 34, 35, 130], "optimize_acqf_": [27, 34, 35], "optimize_acqf_discret": 130, "optimize_acqf_mix": 130, "option": [18, 23, 32, 42, 56, 61, 63, 85, 88, 89, 91, 99, 102, 104, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 164, 166, 174, 177, 179, 188, 190, 194, 196, 202, 211, 248, 250, 251, 252, 279, 283, 294, 295, 296, 297, 315, 316, 319, 320, 321, 324, 325, 326, 327, 328], "oracl": 326, "orchestr": [316, 319], "order": [149, 153, 291, 313, 315, 316, 319, 320, 322, 325, 329], "ordin": 328, "ore": 325, "org": [27, 34, 35, 183, 185, 188, 190, 192, 194, 196, 224, 238, 252, 296, 313, 318], "organ": 316, "origin": [18, 143, 144, 199, 228, 306, 316, 318, 322, 323, 325], "orthogon": 316, "other": [38, 147, 216, 275, 276, 279, 282, 285, 286, 291, 301, 304, 310, 311, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329], "otherwis": [84, 85, 86, 88, 89, 91, 98, 99, 102, 291, 318, 321], "our": [189, 193, 195, 278, 288, 290, 297, 301, 302, 303, 304, 307, 308, 310, 311, 313, 316, 319, 320, 325, 326], "out": [153, 299, 311, 313, 318, 326], "out_featur": 295, "outcom": [277, 313, 322, 328], "output": [248, 249, 268, 295, 302, 310, 311, 314, 317, 323], "output_dim": 295, "outsid": [23, 214, 215, 248, 253, 299, 325], "outstand": 318, "over": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 315, 323], "overal": [149, 296, 297, 315, 316, 319, 321], "overlap": [245, 246, 285, 286, 301, 320], "overrid": [164, 166], "overview": 325, "overwritten": 304, "own": [122, 313, 314, 315, 316, 318, 320, 322], "owner": 318, "ownership": 318, "p": [276, 277, 279, 282, 283, 295, 310, 311, 316], "p1": [324, 325], "p1_json": 325, "p1_via_json": 325, "p2": [324, 325], "p2_json": 325, "p2_via_json": 325, "p3c4": [276, 277, 279], "pack": 325, "packag": [217, 307, 308, 315, 316, 322], "page": [296, 313, 315, 316], "pair": [313, 322], "pam": 137, "pamclusteringrecommend": 323, "panda": [37, 170, 171, 242, 276, 277, 279, 288, 310, 311, 315, 320, 322, 324, 325], "parallel": 316, "param": [293, 297, 312, 324], "param1": [324, 326], "param2": [324, 326], "param_bounds_comp": [147, 149, 153], "param_nam": 147, "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 53, 61, 63, 66, 68, 73, 76, 77, 81, 84, 85, 88, 89, 91, 93, 94, 95, 96, 98, 99, 102, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 153, 154, 157, 158, 164, 166, 168, 172, 174, 177, 179, 183, 185, 186, 188, 190, 192, 194, 196, 198, 199, 200, 202, 203, 206, 211, 213, 214, 215, 216, 219, 220, 225, 227, 228, 231, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 264, 265, 266, 268, 270, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 315, 316, 320, 321, 325, 326, 329, 330], "parameter": 68, "parameter_json": 325, "parameterencod": [85, 93, 94, 96, 99], "parametr": 320, "parent": 316, "pars": [260, 315], "parser": 315, "part": [18, 30, 50, 123, 189, 193, 195, 248, 297, 304, 307, 308, 310, 311, 315, 316, 318, 319, 320, 323, 324, 325], "parti": 318, "partial": 18, "particular": [23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 130, 153, 172, 304, 313, 316, 318, 319, 322, 324, 325, 326], "particularli": 319, "partit": [137, 177, 179, 315, 323, 326], "pass": [23, 135, 136, 137, 138, 149, 153, 162, 190, 194, 196, 306, 311, 315, 316, 321, 325], "passthrough": [20, 74], "patent": 318, "path": [268, 274, 277, 310, 311, 316], "pathlib": [274, 277, 310, 311], "pattern": 316, "pd": [249, 253, 276, 277, 279, 288, 310, 311, 315, 320, 322, 324, 325], "peek": 325, "pend": 18, "per": [174, 274, 275, 276, 277, 278, 279, 280, 283, 299, 303, 310, 311, 322, 324, 326], "percent": [174, 318], "percentag": [130, 219, 249, 311, 323], "perfectli": 325, "perform": [130, 174, 219, 277, 278, 288, 289, 290, 291, 292, 307, 310, 311, 313, 316, 318, 319, 322, 323, 326], "perm_inv_constraint": 291, "permiss": [313, 318], "permut": [38, 41, 42, 291, 320], "permutation_invari": 38, "permutationinvarianceconstraint": 291, "perpetu": 318, "persist": [319, 325], "perspect": 325, "pertain": 318, "phase": 120, "phcpho": [276, 277, 279, 282, 283], "phenomenon": 319, "philosophi": 325, "physic": 326, "pi": [6, 283], "pickl": 315, "pictur": 313, "piec": [313, 319, 320], "pin": [18, 315], "pin_discret": 18, "pinned_part": 18, "pip": [313, 315, 316], "pipelin": [310, 311, 315, 316], "pival": [276, 277, 279, 282, 283], "place": [23, 248, 249, 296, 297, 314, 316, 318, 319, 322, 325], "placehold": 223, "plai": [319, 328], "plan": [184, 189, 193, 195, 322], "pleas": [189, 193, 195, 294, 295, 296, 297, 313], "plot": [174, 274, 275, 276, 277, 278, 279, 310, 311, 315, 329], "plot_abegin_convert_pipelin": 263, "plot_ebegin_float_doubl": 263, "plotting_them": 268, "plt": [275, 276, 278, 279], "plu": 313, "plugin": 315, "pm": [5, 283], "png": [275, 276, 278, 279], "po16": 322, "poetri": 315, "point": [18, 22, 99, 111, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 183, 185, 186, 188, 190, 192, 194, 196, 262, 263, 269, 270, 272, 275, 276, 278, 280, 282, 283, 291, 303, 304, 310, 311, 313, 315, 317, 319, 323, 324, 326], "points_per_dim": [274, 275, 278, 280, 303, 304, 310, 311], "polym": 322, "polytop": 315, "pop": 216, "posit": [270, 321], "possibl": [104, 153, 154, 172, 248, 278, 279, 299, 313, 315, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329], "possibli": 119, "post": 322, "posterior": [5, 7, 14, 183, 185, 186, 188, 190, 192, 194, 196, 199, 283, 294, 295], "postprocess": 242, "potassium": [276, 277, 279, 282, 283], "potenti": [149, 253, 313, 314, 315, 316, 319, 321, 324], "power": [318, 320, 323], "pph3": [276, 277, 279], "pr": 316, "practic": 323, "pre": [104, 118, 293, 315, 316, 324], "precis": [42, 118, 147, 199, 219, 263], "precomput": 91, "pred": 295, "predefin": [268, 319, 323], "predict": [7, 14, 138, 294, 295, 315, 319, 326], "prefer": [23, 318, 325], "prefix": [243, 245, 246], "prepar": [316, 318], "preprocess": 315, "present": [253, 282, 320, 326], "pressur": [290, 294, 295, 296, 297, 306, 307, 308, 313, 320], "pretrain": [185, 293, 312], "pretti": 254, "pretty_print_df": 315, "prevent": [161, 162, 314, 316, 324], "previou": [216, 319, 323], "previous": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 219, 276, 277, 279, 282, 283, 290], "price": 322, "primari": 319, "print": [254, 274, 276, 277, 279, 280, 282, 283, 285, 286, 290, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 308, 313, 315, 319], "prior": [61, 63, 68, 292, 313, 314, 315, 326], "priori": [320, 325], "privat": [315, 317], "probabl": [6, 12, 283], "problem": [310, 311, 313, 315, 316, 319, 321, 325], "problemat": [235, 314, 322], "proce": [174, 282], "process": [23, 59, 187, 188, 198, 199, 270, 280, 283, 310, 311, 315, 316, 319, 320, 322, 325, 329], "prod": [291, 292], "prod_constraint": 292, "prod_i": 321, "produc": [77, 174, 313, 316, 326], "product": [43, 149, 153, 154, 229, 287, 312, 313, 318, 320, 330], "product_paramet": [153, 324], "program": [307, 308], "progress": [23, 117, 315], "project": [216, 313, 315], "promin": 318, "proper": [199, 326], "properli": [18, 299, 314, 324], "properti": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 96, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 153, 183, 185, 188, 190, 192, 194, 196, 206, 208, 209, 211, 224, 258, 316, 320], "proport": 311, "propos": 319, "protobuf": 315, "protocol": [110, 111], "prototyp": 317, "provid": [23, 27, 34, 35, 77, 91, 102, 104, 118, 119, 123, 147, 149, 153, 164, 168, 172, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 229, 238, 241, 248, 249, 252, 255, 274, 276, 277, 278, 279, 301, 302, 303, 304, 307, 308, 310, 311, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "prune": [10, 11], "prune_baselin": [10, 11], "public": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 96, 98, 99, 102, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 208, 209, 211, 223, 224, 258, 315, 316], "publicli": 318, "publish": 315, "pull": 315, "pure": [7, 14, 114, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 179, 184, 275, 280, 294, 303, 315, 330], "purerecommend": [116, 118, 119, 120, 122, 128, 133, 315], "purpos": [34, 35, 296, 313, 314, 316, 318, 325], "push": 316, "put": 322, "puzzl": 313, "py": [307, 308, 315], "py310": [307, 308], "py312": 316, "pyarrow": 315, "pydant": 315, "pydoclint": [315, 316], "pydocstyl": 316, "pylint": 315, "pypi": [313, 315], "pyplot": [275, 276, 278, 279], "pyproject": 315, "pytest": [315, 316], "python": [22, 216, 224, 232, 277, 297, 302, 307, 308, 313, 314, 315, 316, 319, 325], "python3": [307, 308], "pytorch": 315, "pyupgrad": 315, "q": [183, 185, 186, 188, 190, 192, 194, 196, 199, 283], "qei": [8, 275, 283, 307, 308], "qexpectedimprov": [283, 288, 289, 290, 291, 292, 299, 306], "qlogei": [9, 315], "qlognei": [10, 315], "qnei": [11, 315], "qpi": [12, 283], "qsr": [13, 315], "qualiti": 316, "quantiti": [40, 216, 321], "quantum": 91, "qucb": [14, 283], "queri": [114, 123, 172, 174, 216, 313, 319, 326], "question": [316, 319], "qvailabl": 283, "qvarucb": 315, "r": [276, 277, 279, 282, 283], "radiu": [243, 322], "rais": [23, 46, 77, 104, 107, 108, 118, 119, 128, 130, 143, 144, 147, 149, 153, 157, 158, 161, 162, 174, 179, 183, 184, 185, 188, 190, 192, 194, 196, 198, 200, 203, 234, 236, 244, 248, 249, 253, 270, 278, 304, 314, 315, 316, 323], "rand": 296, "random": [147, 149, 174, 177, 195, 196, 231, 248, 270, 274, 275, 276, 277, 278, 279, 283, 296, 311, 313, 315, 322, 323, 326], "random_campaign": [274, 275, 278], "random_forest": [196, 283], "random_recommend": [275, 278], "random_se": [174, 177, 280, 326], "randomforestmodel": 297, "randomforestregressor": 294, "randomforestsurrog": [283, 327], "randomli": [141, 270, 277, 323], "randomrecommend": [274, 275, 276, 277, 278, 279, 283, 288, 289, 290, 291, 292, 299, 315, 323], "rang": [84, 85, 86, 88, 89, 91, 98, 99, 102, 206, 248, 274, 275, 278, 280, 285, 286, 288, 289, 290, 291, 292, 295, 299, 301, 302, 303, 304, 311, 313, 320, 325, 326, 328], "rank": 328, "rastrigin": [274, 285, 286, 301, 303, 304], "rate": 68, "rather": [278, 306, 314, 325], "ravel": [294, 310, 311], "raw": 325, "rdkit": [96, 149, 241, 246, 277, 288, 290, 292, 320, 322], "re": [216, 275, 278, 280, 301, 302, 303, 304, 316, 323], "reach": [213, 215, 299], "reachabl": 216, "reactant": 322, "reaction": [277, 282, 313, 320, 322, 329], "reactor": 329, "reactora": 329, "reactorb": 329, "reactorc": 329, "read": [91, 149, 268, 277, 282, 313, 315, 316], "read_excel": [276, 277, 279], "readabl": [254, 306, 315, 317, 318, 325], "readi": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 174, 316], "readm": [315, 316], "reagent": [320, 322], "real": [34, 35, 258, 313, 319, 328], "realist": 326, "realiz": [172, 326], "reason": [32, 135, 136, 137, 138, 153, 277, 291, 303, 318, 320, 322, 326], "reassembl": 325, "rebas": 316, "rec": [288, 289, 290, 291, 292, 299, 319], "receiv": [216, 318, 325], "recip": 316, "recipi": 318, "recommend": [23, 50, 52, 53, 89, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 172, 174, 184, 216, 219, 248, 249, 270, 274, 275, 276, 277, 278, 279, 281, 285, 286, 288, 289, 290, 291, 292, 294, 295, 299, 307, 308, 310, 311, 312, 313, 315, 316, 322, 324, 326, 329, 330], "recommendation_orig": 306, "recommendation_recr": 306, "recommenderprotocol": [23, 113, 116, 118, 119, 120, 125, 315], "reconstruct": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 216, 258, 313, 319, 325], "record": [23, 216, 219, 220, 313], "recreat": [306, 325], "recreate_model": 297, "recurs": 227, "redesign": 315, "redistribut": 318, "reduc": [102, 310, 311, 322], "ref": 313, "refactor": [189, 193, 195, 315], "refer": [172, 219, 230, 248, 253, 263, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 315, 319, 321, 322, 323, 324, 325, 326, 327, 329], "referenc": 316, "refin": [313, 315, 319], "reflect": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 316, 320, 322], "regard": [30, 285, 286, 291, 301, 316, 318], "register_custom_architectur": [294, 295], "regress": 190, "regressor": [294, 296], "regressormixin": 294, "regret": 13, "regroup": 315, "regular": [200, 315], "reinstal": 313, "rel": [174, 320, 321], "relat": [40, 78, 92, 149, 163, 207, 304, 310, 311, 319, 320], "relationship": [310, 311, 313, 321], "relative_perc": 249, "releas": [313, 315], "relev": [38, 153, 289, 315, 316, 319, 320], "reli": [314, 315], "reliabl": 322, "relu": 295, "remain": [41, 179, 214, 299, 304, 310, 311, 318, 322, 325, 326], "remind": 315, "remot": 316, "remov": [37, 40, 41, 153, 216, 291, 316, 320, 324], "renam": [277, 310, 311, 315], "render": 296, "reorgan": 315, "repeat": [316, 319], "repetit": 283, "rephras": 320, "replac": [274, 301, 303, 304, 315, 316, 322], "replic": 325, "repo": 315, "report": 314, "repositori": [277, 313, 316], "repr": 296, "repres": [28, 37, 38, 39, 40, 41, 42, 43, 44, 91, 149, 179, 183, 185, 188, 190, 192, 194, 196, 258, 270, 291, 307, 308, 313, 315, 318, 319, 322, 324], "represent": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 236, 240, 254, 258, 288, 289, 290, 291, 292, 296, 299, 306, 315, 319, 322, 325, 330], "reproduc": [315, 318], "reproduct": 318, "request": [23, 52, 53, 77, 118, 119, 120, 158, 217, 270, 315, 319], "requir": [27, 34, 35, 51, 120, 153, 203, 282, 291, 294, 296, 299, 303, 307, 313, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 328], "rerun": 296, "reserv": [313, 316], "reset_index": 310, "resolut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 291, 292, 325], "resolv": 242, "resort": [200, 316, 325], "resp": [150, 278, 279, 304], "respect": [150, 174, 177, 218, 248, 291, 316, 319, 320, 321, 325, 328], "respons": [318, 319, 323], "restart": 118, "restor": 325, "restrain": 322, "restrict": [149, 153, 172, 177, 179, 288, 326, 330], "result": [7, 14, 23, 102, 153, 174, 198, 248, 274, 275, 276, 277, 278, 279, 280, 282, 294, 295, 296, 297, 299, 310, 311, 313, 315, 318, 319, 320, 322, 323, 325, 326, 329], "result_baselin": [310, 311], "result_fract": 311, "retain": [318, 320], "retrain": [184, 185, 327], "retriev": [172, 226, 227, 316, 326], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 61, 63, 66, 68, 70, 73, 74, 76, 77, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 106, 107, 108, 111, 113, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 151, 153, 154, 155, 157, 158, 161, 162, 164, 165, 166, 168, 170, 171, 174, 177, 179, 183, 185, 186, 188, 190, 192, 194, 196, 198, 199, 200, 202, 203, 206, 211, 213, 214, 215, 217, 218, 219, 220, 225, 227, 228, 229, 230, 232, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 264, 265, 266, 268, 270, 275, 278, 280, 288, 294, 295, 296, 302, 310, 319, 320, 326], "return_std": 296, "reus": 120, "reuse_last": 118, "reveal": 311, "review": 316, "revis": [315, 318], "rework": 315, "rewrit": 315, "rf": 294, "rh": [27, 34, 35, 285, 286, 320], "ridg": 294, "right": [27, 34, 35, 253, 258, 276, 279, 289, 313, 316, 318, 320, 321, 322, 328], "right_df": 253, "rihana": 317, "rim": 317, "risk": [314, 318, 319, 324], "robust": 313, "robustli": 200, "role": [316, 319, 321, 328, 330], "room": 319, "root": [277, 313, 316, 320], "round": [285, 291, 294, 295, 296, 297, 320], "roundtrip": [315, 325], "rout": 325, "row": [28, 37, 38, 39, 40, 41, 42, 43, 44, 77, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 174, 219, 253, 254, 266, 276, 279, 285, 286, 288, 289, 290, 291, 292, 299, 301, 302, 303, 304, 306, 319, 324, 326], "roya": 317, "royalti": 318, "rr": 294, "ruff": [315, 316], "run": [174, 216, 274, 275, 276, 277, 278, 279, 280, 310, 311, 313, 314, 315, 316, 319, 325, 326], "run_analyt": [275, 278], "run_full_initial_data": 276, "run_hybrid": 278, "run_impute_mod": 279, "runtim": 263, "runtimeerror": [143, 144, 294, 295], "s41586": 252, "safe": [315, 319], "sai": 320, "said": 316, "same": [40, 120, 153, 157, 198, 200, 228, 283, 296, 297, 306, 314, 320, 325, 329], "sampl": [130, 140, 141, 147, 220, 269, 270, 276, 278, 283, 311, 313, 315, 317, 330], "sample_percentag": 323, "samples_full_factori": 147, "samples_random": 147, "sampling_percentag": [130, 278, 283, 288, 289, 290, 291, 292, 299, 306], "satisfi": [30, 31, 32, 153, 285, 286], "save": [268, 275, 276, 278, 279, 296, 315], "savefig": [275, 276, 278, 279], "scalar": [76, 280, 299, 321, 325], "scale": [142, 143, 144, 198, 297, 299, 310, 315, 321], "scaler": [143, 198, 315], "scenario": [179, 274, 275, 276, 277, 278, 279, 280, 310, 311, 320, 321, 329, 330], "scene": 321, "schema": 319, "schembl15068049": [276, 277, 279], "scheme": 315, "scienc": [313, 317], "scipi": [266, 315], "screen": [228, 329], "script": [242, 314, 315], "seaborn": [274, 275, 276, 277, 278, 279, 310, 311], "seamlessli": 325, "search": [18, 23, 26, 28, 37, 40, 49, 50, 53, 111, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 144, 145, 147, 148, 149, 150, 151, 153, 156, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 216, 219, 253, 279, 282, 284, 287, 288, 289, 290, 291, 292, 299, 300, 306, 311, 315, 317, 319, 320, 325, 326, 330], "searchspac": [23, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 150, 153, 183, 185, 188, 190, 192, 194, 196, 277, 282, 294, 295, 296, 297, 306, 307, 308, 310, 312, 313, 315, 319, 320, 322, 324, 325, 326], "searchspace_json": 325, "searchspacetyp": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 324], "second": [174, 216, 264, 266, 280, 283, 294, 295, 296, 297, 299, 308, 310, 320], "section": [313, 315, 316, 318, 325], "see": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 174, 177, 179, 183, 185, 188, 189, 190, 192, 193, 194, 195, 196, 206, 211, 235, 238, 248, 249, 258, 274, 275, 276, 277, 278, 279, 280, 285, 286, 294, 295, 297, 301, 304, 313, 316, 319, 321, 322, 325, 326, 330], "seed": [174, 177, 231, 313, 315], "seek": 299, "seem": [244, 263, 308], "select": [31, 51, 116, 118, 119, 120, 123, 138, 140, 183, 185, 188, 190, 192, 194, 196, 214, 270, 283, 289, 290, 304, 313, 315, 319, 320, 323, 325, 327], "select_recommend": [116, 118, 119, 120], "self": [225, 294, 295, 316], "sell": 318, "semant": [315, 325], "sens": [42, 235, 320, 322], "sent": 318, "separ": [177, 179, 200, 271, 316, 318, 325], "seq_greedy_campaign": 278, "seq_greedy_ei_campaign": [274, 275], "seq_greedy_ei_recommend": 275, "seq_greedy_recommend": 278, "sequenc": [23, 27, 34, 35, 76, 107, 118, 147, 149, 153, 219, 232, 253, 266, 321, 323], "sequenti": [118, 119, 120, 129, 130, 274, 275, 278, 295, 323], "sequential_greedi": [122, 130], "sequential_greedy_x": 315, "sequentialgreedyrecommend": [122, 275, 278, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 304, 306, 307, 308, 313, 315, 319, 323], "sequentialmetarecommend": [119, 323], "sequentialstrategi": 315, "seri": [23, 30, 31, 32, 37, 85, 88, 89, 91, 99, 102, 288, 315, 320], "serial": [119, 153, 168, 220, 296, 312, 314, 315, 316, 320, 323, 330], "serializ": [313, 320, 323], "serialize_datafram": 325, "serialized_df": 170, "serializetostr": 296, "serialmixin": [16, 23, 26, 30, 61, 66, 73, 86, 116, 147, 149, 153, 183, 206, 211, 258, 315], "serv": [34, 35, 179, 253, 310, 311, 319, 320, 322], "servic": 318, "session": [185, 216, 325], "set": [32, 40, 42, 102, 120, 147, 149, 153, 174, 177, 216, 218, 231, 248, 252, 255, 268, 276, 277, 278, 279, 281, 283, 288, 290, 297, 299, 304, 313, 315, 319, 320, 322, 323, 324, 325, 326, 329], "set_size_inch": [275, 276, 278, 279], "set_x_pend": 18, "setpoint": 99, "setup": [174, 320, 326], "sever": [104, 114, 275, 277, 280, 283, 296, 299, 311, 313, 315, 316, 320, 321, 322, 324, 325, 326, 329], "shall": [118, 249, 318, 321], "shape": [147, 183, 185, 188, 190, 192, 194, 196, 209, 213, 215, 324], "share": [315, 318, 329], "shell": 216, "shield": [252, 277, 313, 322], "shift": [7, 14, 310], "shifted_hartmann": 310, "ship": [271, 325], "short": 316, "shortcut": [153, 324, 325], "shorten": [315, 316], "should": [23, 38, 89, 102, 143, 144, 147, 153, 166, 177, 208, 249, 251, 252, 253, 257, 258, 259, 264, 268, 278, 288, 290, 291, 296, 302, 304, 308, 313, 315, 316, 319, 320, 324, 326, 329], "show": [274, 275, 276, 277, 278, 279, 280, 282, 283, 288, 289, 290, 294, 295, 296, 297, 302, 304, 306, 307, 308, 310, 311, 320, 324], "showcas": 323, "shown": [311, 315], "side": [27, 34, 35, 214, 320], "sigma": [213, 299, 317], "signal": [48, 321], "signatur": [203, 225, 294, 295, 315, 316, 320, 325], "significantli": [153, 310, 311], "silenc": 316, "silent": [315, 320], "similar": [119, 314, 320, 322, 323, 324, 325], "similarli": [278, 302, 322], "simpl": [13, 224, 277, 302, 313, 315, 323, 326, 328], "simpler": [316, 325], "simplest": 324, "simplex": [153, 330], "simplex_paramet": [153, 324], "simpli": [216, 235, 316, 320, 322, 323, 324, 325, 328], "simplifi": [275, 316], "simul": [54, 238, 249, 290, 291, 295, 313, 315, 330], "simulate_experi": [177, 179, 326], "simulate_scenario": [179, 274, 275, 276, 277, 278, 279, 280, 310, 311, 326], "simulate_transfer_learn": [310, 326], "simultan": 321, "sinc": [42, 149, 184, 189, 193, 195, 276, 285, 286, 291, 297, 301, 303, 306, 307, 308, 310, 316, 319, 320, 321, 322, 324, 325, 326], "singl": [23, 30, 38, 70, 81, 174, 206, 211, 270, 274, 275, 276, 277, 278, 279, 289, 299, 302, 307, 308, 310, 311, 313, 315, 320, 321, 322, 324, 329, 330], "singledispatch": 260, "singletargetobject": [23, 206, 211, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 315, 330], "site": [307, 308], "situat": [288, 290, 291, 314, 316, 320, 321, 322, 325, 329], "six": 174, "size": [118, 120, 153, 220, 296, 301, 302, 303, 304, 310, 311, 319, 325, 326], "sk": 296, "skeleton": 315, "skicit": 315, "skin": 326, "skip": [151, 155, 315, 319], "skl2onnx": 296, "sklearn": [138, 263, 293, 296, 312], "sklearnclusteringrecommend": [135, 136, 137], "slightli": [172, 277, 326], "slow": [288, 290, 292, 324], "slowest": 315, "small": [34, 35, 57, 221, 222, 285, 310, 311, 315, 322], "smaller": [23, 319], "smallest": [147, 324], "smile": [102, 240, 241, 242, 243, 244, 245, 246, 313, 322], "smiles_list": [243, 244, 245, 246], "smoke": 315, "smoke_test": [268, 274, 275, 276, 277, 278, 279, 280, 286, 288, 289, 291, 292, 310, 311], "smooth": 63, "smoother": 63, "sn": [274, 275, 276, 277, 278, 279, 310, 311], "so": [174, 184, 274, 279, 301, 303, 304, 313, 314, 320, 321, 322, 323, 325, 326, 328, 329], "softwar": [313, 318], "sola": 317, "sole": 318, "solut": [319, 324, 325], "solv": [184, 289, 290], "solv1": 291, "solv1_mordred_aatsc1v": 291, "solv1_mordred_nhetero": 291, "solv2": 291, "solv3": 291, "solv_mordred_natom": 289, "solv_rdkit_maxabsestateindex": 290, "solv_rdkit_maxpartialcharg": 290, "solvent": [276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 294, 295, 297, 307, 308, 313, 320, 322], "solvent1": 291, "solvent2": 291, "solvent3": 291, "solvent_1": 320, "solvent_2": 320, "solvent_3": 320, "solvent_encoding1": 320, "solvent_encoding2": 320, "solvent_mordred_enc": 320, "solvent_rdkit_enc": 320, "solvent_rdkit_maxabsestateindex": [288, 292], "solvent_rdkit_maxpartialcharg": [288, 292], "solver": 326, "some": [38, 253, 263, 274, 275, 276, 277, 278, 279, 280, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 311, 320, 322, 323, 325, 326, 327], "someth": 308, "sometim": 320, "somewher": 319, "soon": [313, 319, 323], "sophist": [315, 325], "sourabh": 317, "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 68, 70, 73, 74, 76, 77, 79, 81, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 111, 113, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 151, 153, 154, 155, 157, 158, 161, 162, 164, 165, 166, 168, 170, 171, 174, 177, 179, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 208, 209, 211, 213, 214, 215, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 264, 265, 266, 268, 270, 313, 315, 318], "space": [17, 18, 23, 26, 27, 28, 34, 35, 37, 40, 49, 50, 53, 111, 121, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 144, 145, 147, 148, 149, 150, 151, 153, 155, 156, 174, 177, 179, 183, 185, 188, 190, 192, 194, 196, 216, 219, 253, 275, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 299, 300, 301, 303, 306, 311, 312, 315, 317, 319, 320, 322, 325, 326, 330], "span": [147, 149, 219], "spec": [151, 155, 165], "special": [120, 313, 314, 318, 329], "specif": [104, 138, 149, 151, 161, 177, 186, 198, 200, 226, 291, 303, 313, 316, 319, 320, 322, 323, 325, 326, 327, 328], "specifi": [23, 38, 58, 91, 102, 104, 111, 120, 147, 149, 153, 164, 165, 174, 177, 213, 214, 215, 230, 243, 248, 268, 277, 278, 283, 285, 296, 297, 299, 302, 307, 308, 310, 313, 315, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "speed": [153, 288, 290, 292, 310, 311, 324], "speed_fast": 324, "speed_norm": 324, "speed_slow": 324, "spell": 316, "spellcheck": 315, "sphinx": [189, 193, 195, 315, 316], "split": 122, "spread": 328, "sqrt": 320, "squar": [275, 278, 280, 302, 320], "squash": 316, "stack": 294, "stackingregressor": 294, "stackingregressorsurrog": 294, "stage": [319, 320, 325], "stand": 315, "standard": [143, 200, 243, 296, 322], "start": [174, 314, 315, 322, 323, 325, 326], "startup": 315, "stat": 217, "state": [120, 278, 302, 318, 319], "statement": [254, 303, 313, 318], "static": [313, 316], "statist": [216, 220, 311, 313], "statu": 319, "std_threshold": 200, "step": [151, 155, 174, 295, 313, 316, 319, 321, 325, 327], "sterl": 317, "steven": 277, "still": [104, 153, 248, 320, 322], "stop": 316, "stoppag": 318, "storag": [319, 325], "store": [18, 86, 198, 200, 206, 275, 313, 315, 319, 324], "str": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 77, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 128, 130, 135, 136, 137, 138, 143, 144, 147, 149, 153, 164, 168, 177, 179, 183, 185, 188, 190, 192, 194, 196, 206, 211, 213, 214, 215, 217, 220, 225, 226, 230, 236, 240, 241, 242, 243, 244, 245, 246, 248, 251, 252, 254, 258, 265, 268, 297, 307, 308, 310, 311], "straightforward": 328, "strategi": [23, 130, 149, 172, 315], "stream": 229, "streamingsequentialmetarecommend": [118, 323], "streamingsequentialstrategi": 315, "streamlin": 316, "streamlit": [313, 315], "strictli": [297, 307, 308], "stride": 285, "string": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 101, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 236, 241, 242, 243, 244, 245, 246, 251, 258, 296, 306, 315, 319, 320, 322, 328, 330], "strip": [174, 279, 326], "strongli": 319, "structur": [113, 164, 314, 315, 319, 322, 325], "studi": [114, 313, 323], "style": [70, 310, 315, 316], "sub": [138, 315, 325], "subclass": [58, 143, 144, 164, 226, 227, 235, 315, 316, 323, 325], "subject": 318, "sublicens": 318, "submiss": [315, 318], "submit": [18, 217, 219, 313, 316, 318], "submodul": 326, "subpackag": [315, 316], "subselectioncondit": [289, 290, 330], "subsequ": [149, 153, 242, 318, 319, 325], "subset": [102, 228, 270, 319, 320], "subspac": [18, 122, 130, 146, 147, 149, 152, 153, 278, 285, 304, 315, 323, 325, 330], "subspace_json": 325, "subspacecontinu": [149, 315, 324], "subspacediscret": [147, 149, 315, 324, 325], "substanc": [96, 102, 277, 282, 315, 320, 322], "substance_12": 320, "substance_3": 320, "substance_43": 320, "substance_data": 315, "substance_encod": 277, "substanceencod": [102, 288, 289, 290, 291, 292], "substanceparamet": [276, 277, 279, 282, 283, 288, 289, 290, 291, 292, 294, 295, 297, 307, 308, 313, 315, 320, 324, 330], "substanti": 102, "substrat": 329, "subtyp": 325, "success": [270, 325], "suffic": 316, "suffici": [324, 325], "suit": 316, "suitabl": [138, 153, 174, 236, 316, 319, 322, 326, 327], "sum": [44, 153, 275, 278, 280, 287, 288, 289, 290, 291, 302, 312, 320, 321, 324], "sum_": [320, 321], "sum_constraint": 291, "sum_constraint_1": 292, "sum_constraint_2": 292, "sum_i": [34, 35], "sum_of_squar": [275, 278, 280, 302], "sum_toler": 291, "summar": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 206, 211], "summari": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 206, 211, 315, 316], "super": 295, "supersed": 318, "support": [119, 179, 183, 185, 188, 190, 192, 194, 196, 263, 294, 295, 296, 315, 316, 318, 320, 322, 323, 324, 326, 327, 329], "supports_transfer_learn": [183, 185, 188, 190, 192, 194, 196, 327], "suppos": [219, 320], "sure": [313, 316, 326], "surrog": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 59, 128, 130, 135, 136, 137, 138, 185, 188, 190, 192, 194, 196, 312, 313, 315, 317, 320, 322, 323, 329, 330], "surrogate_model": [128, 130, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 307, 308], "svg": 268, "switch": [38, 117, 119, 120, 200, 289, 313, 315, 320, 323], "switch1": 289, "switch1_on": 289, "switch2": 289, "switch_1": 320, "switch_2": 320, "switch_aft": [120, 283, 288, 289, 290, 291, 292, 299, 306, 307, 308, 323], "sy": [274, 277, 310, 311, 314], "symmetri": 320, "syntax": [313, 315], "synthet": [237, 238, 285, 286, 310, 311], "synthetictestfunct": 238, "system": [277, 313, 318, 326], "t": [183, 185, 186, 188, 190, 192, 194, 196, 199, 236, 276, 277, 279, 282, 283, 310, 311, 325], "t1": 325, "t2": 325, "t3": 325, "t_1": 321, "t_2": 321, "t_3": 321, "t_i": 321, "tabl": [254, 315, 320], "tag": [313, 315, 325], "tailor": 319, "take": [63, 85, 99, 104, 153, 315, 319, 320, 321, 322, 323], "taken": [118, 319, 321], "target": [23, 70, 73, 74, 76, 80, 81, 143, 153, 172, 174, 175, 186, 192, 200, 208, 209, 211, 216, 248, 264, 265, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 315, 319, 325, 326, 330], "target_1": [280, 289, 290, 291, 292, 299, 321, 328], "target_1_cumbest": 280, "target_1_iterbest": 280, "target_1_measur": 280, "target_2": [280, 299, 321, 328], "target_2_cumbest": 280, "target_2_iterbest": 280, "target_2_measur": 280, "target_3": [299, 321], "target_3a": 328, "target_3b": 328, "target_cumbest": [274, 275, 278, 310, 311], "target_max": 319, "target_transform": 299, "target_valu": [285, 286, 301, 302, 303, 304], "targetmod": [211, 325, 328], "targetnam": 174, "targettransform": [211, 328], "task": [89, 149, 179, 183, 185, 188, 190, 192, 194, 196, 206, 211, 315, 319, 323, 325, 326], "task_idx": [149, 315], "task_param": [310, 311, 326], "task_paramet": 325, "task_parameter_json": 325, "task_parameter_reconstruct": 325, "taskparamet": [158, 310, 311, 315, 325, 326, 330], "technic": [153, 326], "techniqu": [138, 323], "telemetri": [315, 317], "tell": 218, "temp": [288, 290, 313, 317], "temp_c": [276, 277, 279], "temperatur": [276, 279, 282, 283, 288, 290, 294, 295, 296, 297, 306, 320, 322, 324], "temperature_resolut": 288, "temporari": [69, 112, 198, 200, 315, 325], "temporarili": 315, "tensor": [18, 27, 34, 35, 143, 144, 149, 153, 183, 185, 188, 190, 192, 194, 196, 199, 255, 258, 272, 294, 295, 315], "term": [172, 316, 318, 319, 324, 325, 326, 329], "termin": [314, 318], "terminologi": 330, "tert": [276, 277, 279, 282, 283], "test": [57, 153, 174, 185, 237, 238, 241, 248, 310, 311, 313, 314, 315, 316, 319], "test_funct": [238, 274, 285, 286, 301, 302, 303, 304, 310, 311], "test_scenario": [276, 279], "testabl": [54, 174], "testfunct": [274, 285, 286, 301, 303, 304], "testfunctionclass": [274, 285, 286, 301, 303, 304], "text": [296, 318, 320, 321], "th": 320, "than": [23, 46, 53, 99, 118, 119, 120, 147, 149, 158, 235, 277, 290, 291, 320, 322, 325], "thei": [104, 114, 123, 199, 214, 251, 283, 292, 315, 316, 319, 320, 322, 323, 324, 325, 328], "them": [26, 28, 198, 268, 278, 283, 291, 314, 316, 320, 322, 323, 325, 329], "theme": [268, 315], "theori": 318, "therebi": 153, "therefor": [120, 283, 314, 319, 325], "thereof": 318, "thf": 320, "thi": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 118, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 147, 149, 153, 172, 177, 179, 184, 189, 193, 195, 199, 220, 232, 235, 242, 248, 249, 250, 252, 253, 254, 268, 274, 294, 295, 296, 297, 302, 306, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329], "think": 322, "third": [299, 318], "those": [104, 120, 122, 172, 270, 283, 314, 318, 320, 326], "though": 329, "three": [277, 278, 291, 299, 313, 319, 320, 321, 323, 324, 329], "threshold": [32, 91, 102, 200, 252, 285, 290, 291, 292, 315, 320, 322], "thresholdcondit": [43, 44, 285, 290, 291, 292, 330], "through": [149, 213, 248, 295, 297, 299, 301, 302, 303, 304, 316, 318, 320, 325], "throughout": 120, "throw": [242, 320, 322], "thrown": [174, 279, 307, 314, 321, 326], "thu": [130, 189, 193, 195, 274, 275, 276, 277, 278, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 314, 316, 319, 322, 325, 326], "time": [220, 286, 313, 315, 319, 320, 322, 325], "timeout": [216, 315], "titl": 318, "tl": 310, "to_botorch": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 27, 34, 35], "to_dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 258], "to_fram": 291, "to_gpytorch": [61, 63, 66, 68], "to_json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 116, 118, 119, 120, 147, 149, 153, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 258, 294, 295, 296, 297, 306, 319, 325], "to_list": [285, 286, 301, 302, 303, 304], "to_markdown": 319, "to_ndarrai": 258, "to_object": [206, 211, 321], "to_tensor": [258, 296], "to_tupl": 258, "togeth": [26, 28, 283, 304, 313], "toler": [23, 32, 34, 35, 99, 153, 219, 253, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 303, 304, 306, 307, 308, 313, 315, 320, 322], "tolist": 285, "toluen": 322, "toml": 315, "too": 285, "tool": [189, 193, 195, 239, 315, 325], "toolbox": 313, "top": [315, 316], "topic": 319, "torch": [258, 293, 294, 295, 296, 312, 315], "toronto": 317, "tort": 318, "total": [120, 270, 324], "toward": [7, 14, 248, 320], "tox": [307, 308, 313, 315, 316], "tracebackexcept": 314, "track": [147, 153, 318, 324], "trade": [7, 14, 318], "trademark": 318, "tradit": [277, 313], "train": [111, 118, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 179, 183, 184, 185, 188, 190, 192, 194, 196, 200, 293, 295, 310, 311, 315, 326], "train_i": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 183, 185, 188, 190, 192, 194, 196, 294, 295, 296], "train_x": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 111, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 183, 185, 188, 190, 192, 194, 196, 294, 295, 296], "training_funct": 311, "trajectori": [172, 326], "transfer": [178, 179, 183, 185, 188, 190, 192, 194, 196, 310, 312, 313, 315, 318, 322, 327, 330], "transform": [73, 76, 81, 85, 86, 88, 89, 91, 99, 102, 143, 144, 147, 149, 153, 198, 206, 209, 211, 255, 258, 259, 280, 288, 289, 290, 291, 292, 306, 315, 318, 322, 328], "transform_rep_exp2comp": [85, 88, 89, 91, 99, 102], "translat": [303, 318, 322], "transmiss": 325, "transmit": 220, "treat": [102, 277, 313, 320, 322, 328], "tremend": 277, "tri": 324, "triangl": 215, "triangular": [209, 215, 299, 328], "tricyclohexylphosphin": [276, 277, 279], "trigger": [118, 297, 316, 321, 325], "trivial": [192, 321, 322], "true": [10, 11, 23, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 153, 186, 188, 214, 216, 219, 227, 235, 236, 241, 245, 246, 253, 277, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 307, 308, 310, 311, 319, 320, 322, 325], "trust": 296, "truth": 236, "try": [248, 276, 277, 279, 294, 295, 296, 297, 308, 314, 315], "tune": 313, "tupl": [23, 27, 34, 35, 73, 76, 81, 85, 88, 89, 91, 99, 102, 143, 144, 147, 149, 153, 174, 183, 185, 188, 190, 192, 194, 196, 199, 232, 248, 258, 278, 280, 294, 295, 302, 310, 326], "turn": [216, 238, 313, 314, 315, 320], "twice": [291, 321], "two": [40, 77, 120, 130, 172, 224, 264, 270, 276, 278, 279, 280, 283, 299, 302, 304, 310, 311, 313, 315, 319, 320, 321, 322, 323, 324, 325, 326, 328], "twophasemetarecommend": [113, 275, 276, 278, 279, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 304, 306, 307, 308, 313, 323], "twophasestrategi": 315, "type": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 61, 63, 66, 68, 73, 74, 76, 77, 81, 84, 85, 86, 88, 89, 91, 98, 99, 101, 102, 104, 106, 107, 108, 111, 113, 116, 118, 119, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 147, 149, 150, 151, 153, 154, 155, 157, 158, 161, 162, 164, 165, 166, 168, 170, 171, 174, 177, 179, 183, 185, 186, 188, 190, 192, 194, 196, 198, 199, 200, 202, 203, 206, 211, 213, 214, 215, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 235, 236, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 270, 272, 277, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 307, 308, 313, 315, 316, 318, 321, 322, 323, 324, 330], "typeerror": [23, 174, 185, 248], "typevar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 63, 66, 68, 73, 76, 81, 84, 85, 86, 88, 89, 91, 98, 99, 102, 104, 116, 118, 119, 120, 147, 149, 153, 164, 165, 168, 183, 185, 188, 190, 192, 194, 196, 206, 211, 227, 228, 229, 258], "typic": [34, 35, 277, 313, 319, 322, 325, 326], "typo": [315, 316], "u": [276, 277, 279, 311, 313, 320, 321], "ucb": [7, 283, 315, 325], "ultim": 316, "ultra": [307, 308], "un": [143, 144, 216, 315], "unabl": 296, "unavail": 315, "unbound": 258, "uncertainti": 283, "uncorrel": 252, "under": [28, 37, 38, 39, 40, 41, 42, 43, 44, 220, 291, 292, 313, 314, 318, 322], "underflow": 55, "underli": [23, 40, 313, 319, 325], "underscor": 315, "undesir": [320, 322], "undo": 314, "unequ": 292, "unevenli": 322, "unhandl": 315, "uniform": 249, "uniformli": 270, "uniniti": 235, "uninstal": 56, "unintend": 315, "union": [77, 91, 102, 164, 174, 177, 213, 214, 215, 220, 243, 255, 259, 265, 304, 318, 324], "uniqu": [41, 104, 291, 315, 322], "unit": 143, "unknown": [270, 315, 327], "unless": [313, 316, 318, 322, 325], "unlik": [10, 11, 324], "unmaintain": [315, 322], "unmeasur": [174, 279, 326], "unnecessari": [315, 319], "unreach": 315, "unrealist": 326, "unrecogn": 248, "unset": 216, "unspecifi": 325, "unsqueez": 295, "unstructur": [166, 325], "unstructure_bas": 164, "until": [118, 174, 313, 326], "untransform": [143, 144, 198], "unveil": 311, "unwant": [26, 28], "unweight": 294, "up": [34, 35, 153, 174, 276, 277, 279, 281, 285, 286, 288, 290, 291, 304, 310, 311, 313, 320], "updat": [277, 282, 315, 316], "upgrad": 315, "upon": [122, 314, 315, 316, 320, 324, 327, 329], "upper": [7, 14, 213, 214, 215, 258, 283, 299, 310, 311, 328], "upper_bound": [288, 289, 290, 291, 292, 299, 306, 324], "upperconfidencebound": 325, "upstream": 316, "url": 216, "us": [23, 26, 27, 28, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 63, 67, 76, 77, 91, 99, 102, 104, 113, 118, 119, 120, 122, 128, 130, 143, 144, 147, 149, 153, 165, 174, 177, 183, 185, 188, 190, 192, 194, 196, 198, 209, 216, 219, 220, 223, 232, 242, 248, 249, 253, 260, 262, 263, 268, 270, 272, 285, 286, 293, 306, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 328, 329, 330], "usa": [313, 317], "usabl": [235, 314, 315, 322, 325], "usag": [216, 313, 315, 320, 323], "user": [37, 38, 48, 51, 91, 94, 153, 203, 216, 217, 249, 253, 282, 283, 288, 299, 307, 308, 313, 315, 316, 319, 320, 321, 322, 324, 325, 326, 329], "usernam": [216, 217, 315], "usort": 315, "usual": [174, 276, 277, 279, 307, 314, 322], "util": [147, 153, 219, 223, 224, 258, 274, 277, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 303, 304, 310, 311, 313, 315, 321, 322, 323, 325, 327], "uv": 315, "val": [113, 236, 310], "val_from_param1": 42, "val_from_param2": 42, "val_loss": 297, "valid": [23, 31, 37, 104, 149, 151, 153, 155, 185, 241, 244, 253, 288, 305, 307, 312, 314, 315, 316, 319, 320], "validate_compat": 185, "validate_config": [23, 308, 315, 319], "valu": [7, 14, 18, 23, 27, 30, 31, 32, 34, 35, 38, 40, 63, 73, 76, 77, 81, 85, 88, 89, 91, 93, 94, 96, 99, 102, 104, 106, 107, 108, 135, 136, 137, 138, 143, 144, 149, 153, 154, 172, 174, 186, 192, 208, 213, 214, 215, 220, 225, 228, 236, 248, 249, 251, 253, 254, 258, 260, 264, 265, 266, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 315, 316, 319, 320, 321, 322, 326, 328, 329, 330], "valuabl": 323, "valueerror": [23, 46, 77, 104, 107, 108, 147, 149, 153, 157, 174, 183, 185, 188, 190, 192, 194, 196, 198, 200, 203, 234, 236, 244, 248, 249, 253, 270, 278, 297, 304, 314], "var": [294, 295], "vari": [23, 153, 277, 321], "variabl": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 183, 185, 188, 190, 192, 194, 196, 206, 216, 218, 220, 268, 303, 313, 315, 316, 320, 322, 323, 325], "varianc": [7, 14, 143, 144, 192, 250, 294, 295, 315], "variant": [283, 310, 329], "varieti": [303, 316, 325, 326], "variou": [258, 291, 300, 315, 323], "varucb": 315, "vector": [296, 317], "vendor": 322, "venv": [307, 308], "verbal": 318, "verbos": 297, "veri": [288, 290, 299, 322], "verifi": [235, 278, 285, 288, 289, 290, 291, 292, 304, 306, 313, 316], "versa": 310, "versatil": 323, "version": [85, 88, 89, 91, 99, 102, 217, 238, 263, 307, 308, 310, 311, 313, 314, 315, 316, 318, 325], "via": [22, 23, 120, 140, 219, 226, 248, 253, 279, 285, 286, 296, 301, 303, 313, 315, 316, 319, 320, 321, 322, 323, 324, 325, 328, 329], "via_init": 325, "via_json": 325, "viabl": [53, 299], "vice": 310, "view": [147, 153, 324], "violat": [28, 37, 38, 39, 40, 41, 42, 43, 44], "virtual": 316, "visibl": 315, "visual": [277, 310, 311, 328], "vpn": [216, 313], "vulner": [315, 316], "w_i": 321, "wa": [56, 104, 120, 153, 216, 248, 277, 315, 316, 318, 322, 325, 329], "wai": [149, 300, 302, 310, 313, 322, 324, 325, 326, 328, 329], "want": [35, 37, 278, 283, 288, 291, 302, 304, 311, 313, 316, 320, 322, 323, 325, 328, 329], "warn": [232, 303, 304, 307, 308, 315, 316], "warranti": [313, 318], "was_measur": [288, 289, 290, 291, 292, 299, 306, 324], "was_recommend": [288, 289, 290, 291, 292, 299, 306, 324], "water": [288, 289, 290, 291, 292, 320, 322], "we": [18, 172, 189, 193, 195, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 316, 319, 320, 321, 322, 324, 325, 328, 329, 330], "web": 316, "weber": 317, "weight": [70, 76, 77, 266, 280, 299, 321, 325], "weight_kdalton": 322, "welcom": 316, "well": [217, 268, 283, 316, 319, 320, 322, 326], "were": [122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 153, 216, 248, 279, 283, 311, 314, 320, 322, 324], "what": [104, 118, 149, 172, 248, 296, 299, 308, 316, 319, 322, 330], "whatsnew": 224, "when": [23, 38, 99, 118, 120, 128, 130, 153, 183, 185, 188, 190, 192, 194, 196, 203, 216, 235, 248, 270, 280, 283, 288, 289, 292, 297, 299, 313, 315, 316, 319, 320, 322, 323, 324, 325, 326, 328, 329], "whenev": [18, 118, 248, 325], "where": [18, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 172, 179, 183, 185, 188, 190, 192, 194, 196, 248, 276, 277, 279, 283, 288, 290, 291, 313, 314, 316, 318, 319, 320, 321, 322, 324, 325, 326, 328], "wherea": 325, "wherev": 318, "whether": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 84, 85, 86, 88, 89, 91, 98, 99, 102, 147, 153, 183, 185, 188, 190, 192, 194, 196, 216, 218, 243, 249, 253, 258, 278, 315, 318, 319, 323, 328], "which": [23, 30, 31, 32, 89, 104, 111, 114, 120, 122, 125, 128, 130, 133, 135, 136, 137, 138, 140, 141, 149, 153, 177, 179, 183, 185, 188, 190, 192, 194, 196, 200, 219, 220, 235, 248, 249, 252, 253, 264, 265, 268, 277, 278, 283, 286, 291, 303, 304, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 322, 324, 325, 326, 328, 329], "while": [149, 151, 155, 299, 311, 314, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329], "whilst": 248, "whole": 318, "whom": 318, "whose": [77, 104, 149, 225, 228, 270, 316], "wide": 326, "wider": 328, "willing": 319, "window": 315, "wise": 266, "wish": [216, 325], "within": [23, 84, 85, 86, 88, 89, 91, 98, 99, 102, 219, 253, 318, 320, 322, 327, 329, 330], "without": [119, 307, 308, 310, 311, 313, 315, 318, 319, 320, 322], "work": [18, 197, 291, 299, 302, 306, 308, 315, 316, 318, 320, 321, 323, 325], "workaround": [314, 315], "workflow": [294, 295, 296, 319, 325], "world": [313, 319], "worldwid": 318, "worst": [174, 177, 279, 326], "would": [41, 55, 104, 172, 174, 179, 184, 216, 313, 316, 320, 322, 323, 324, 325, 326, 329], "wrap": [23, 186, 199, 238, 285, 286, 301, 303, 313, 315, 321], "wrapped_funct": [274, 285, 286, 301, 303, 304], "wrapper": [1, 17, 177, 179, 185, 232, 237, 285, 286, 313, 323], "write": [313, 314, 318, 325], "written": [301, 303, 304, 316, 318], "wrong": [308, 315], "www": [313, 318], "x": [18, 74, 143, 144, 174, 232, 264, 274, 275, 276, 277, 278, 279, 280, 288, 289, 290, 291, 292, 299, 302, 306, 310, 311, 313, 315, 324], "x0": 324, "x1": 324, "x2": 324, "x_": [274, 275, 278, 280, 285, 286, 301, 302, 303, 304], "x_1": [285, 286, 301, 302, 303, 304, 320], "x_2": [285, 286, 301, 302, 303, 304, 320], "x_3": [285, 286, 301, 302, 303, 304, 320], "x_4": [285, 286, 301, 302, 303, 304], "x_5": 304, "x_6": 304, "x_i": [34, 35, 320], "x_pend": 18, "xlsx": [276, 277, 279], "xpho": [276, 277, 279], "xylen": [276, 277, 279, 282, 283], "y": [143, 144, 236, 252, 264, 274, 275, 276, 277, 278, 279, 280, 296, 299, 302, 310, 311, 313], "ye": 236, "yet": [18, 315, 323], "yield": [63, 276, 277, 279, 282, 283, 288, 294, 295, 296, 297, 304, 306, 307, 308, 313, 321, 325], "yield_cumbest": [276, 277, 279], "yml": 315, "you": [35, 37, 216, 277, 283, 285, 297, 303, 304, 307, 313, 314, 316, 318, 319, 320, 322, 323, 324, 325, 327, 328], "your": [277, 278, 304, 313, 314, 315, 316, 318, 319, 322, 325, 327, 328], "your_branch_nam": 316, "z": 313, "zero": [7, 14, 250], "zero_grad": 295, "zip": 295, "\u00b5fmt": 315, "\u0161o\u0161i\u0107": [313, 317]}, "titles": ["baybe", "baybe.acquisition", "baybe.acquisition.acqfs", "ExpectedImprovement", "LogExpectedImprovement", "PosteriorMean", "ProbabilityOfImprovement", "UpperConfidenceBound", "qExpectedImprovement", "qLogExpectedImprovement", "qLogNoisyExpectedImprovement", "qNoisyExpectedImprovement", "qProbabilityOfImprovement", "qSimpleRegret", "qUpperConfidenceBound", "baybe.acquisition.base", "AcquisitionFunction", "baybe.acquisition.partial", "PartialAcquisitionFunction", "baybe.acquisition.utils", "baybe.acquisition.utils.convert_acqf", "baybe.acquisition.utils.str_to_acqf", "baybe.campaign", "Campaign", "baybe.constraints", "baybe.constraints.base", "Constraint", "ContinuousConstraint", "DiscreteConstraint", "baybe.constraints.conditions", "Condition", "SubSelectionCondition", "ThresholdCondition", "baybe.constraints.continuous", "ContinuousLinearEqualityConstraint", "ContinuousLinearInequalityConstraint", "baybe.constraints.discrete", "DiscreteCustomConstraint", "DiscreteDependenciesConstraint", "DiscreteExcludeConstraint", "DiscreteLinkedParametersConstraint", "DiscreteNoLabelDuplicatesConstraint", "DiscretePermutationInvarianceConstraint", "DiscreteProductConstraint", "DiscreteSumConstraint", "baybe.constraints.validation", "baybe.constraints.validation.validate_constraints", "baybe.exceptions", "baybe.exceptions.DeprecationError", "baybe.exceptions.EmptySearchSpaceError", "baybe.exceptions.IncompatibleSearchSpaceError", "baybe.exceptions.NoMCAcquisitionFunctionError", "baybe.exceptions.NoRecommendersLeftError", "baybe.exceptions.NotEnoughPointsLeftError", "baybe.exceptions.NothingToSimulateError", "baybe.exceptions.NumericalUnderflowError", "baybe.exceptions.OptionalImportError", "baybe.exceptions.TestException", "baybe.exceptions.UnidentifiedSubclassError", "baybe.kernels", "baybe.kernels.base", "Kernel", "baybe.kernels.basic", "MaternKernel", "baybe.kernels.priors", "baybe.kernels.priors.base", "Prior", "baybe.kernels.priors.basic", "GammaPrior", "baybe.objective", "baybe.objective.Objective", "baybe.objectives", "baybe.objectives.base", "Objective", "baybe.objectives.base.to_objective", "baybe.objectives.desirability", "DesirabilityObjective", "baybe.objectives.desirability.scalarize", "baybe.objectives.enum", "Scalarizer", "baybe.objectives.single", "SingleTargetObjective", "baybe.parameters", "baybe.parameters.base", "ContinuousParameter", "DiscreteParameter", "Parameter", "baybe.parameters.categorical", "CategoricalParameter", "TaskParameter", "baybe.parameters.custom", "CustomDiscreteParameter", "baybe.parameters.enum", "CategoricalEncoding", "CustomEncoding", "ParameterEncoding", "SubstanceEncoding", "baybe.parameters.numerical", "NumericalContinuousParameter", "NumericalDiscreteParameter", "baybe.parameters.substance", "baybe.parameters.substance.Smiles", "SubstanceParameter", "baybe.parameters.utils", "baybe.parameters.utils.get_parameters_from_dataframe", "baybe.parameters.validation", "baybe.parameters.validation.validate_decorrelation", "baybe.parameters.validation.validate_is_finite", "baybe.parameters.validation.validate_unique_values", "baybe.recommenders", "baybe.recommenders.base", "RecommenderProtocol", "baybe.recommenders.deprecation", "baybe.recommenders.deprecation.structure_recommender_protocol", "baybe.recommenders.meta", "baybe.recommenders.meta.base", "MetaRecommender", "baybe.recommenders.meta.sequential", "SequentialMetaRecommender", "StreamingSequentialMetaRecommender", "TwoPhaseMetaRecommender", "baybe.recommenders.naive", "NaiveHybridSpaceRecommender", "baybe.recommenders.pure", "baybe.recommenders.pure.base", "PureRecommender", "baybe.recommenders.pure.bayesian", "baybe.recommenders.pure.bayesian.base", "BayesianRecommender", "baybe.recommenders.pure.bayesian.sequential_greedy", "SequentialGreedyRecommender", "baybe.recommenders.pure.nonpredictive", "baybe.recommenders.pure.nonpredictive.base", "NonPredictiveRecommender", "baybe.recommenders.pure.nonpredictive.clustering", "GaussianMixtureClusteringRecommender", "KMeansClusteringRecommender", "PAMClusteringRecommender", "SKLearnClusteringRecommender", "baybe.recommenders.pure.nonpredictive.sampling", "FPSRecommender", "RandomRecommender", "baybe.scaler", "DefaultScaler", "Scaler", "baybe.searchspace", "baybe.searchspace.continuous", "SubspaceContinuous", "baybe.searchspace.core", "SearchSpace", "SearchSpaceType", "baybe.searchspace.core.validate_searchspace_from_config", "baybe.searchspace.discrete", "SubspaceDiscrete", "baybe.searchspace.discrete.parameter_cartesian_prod_to_df", "baybe.searchspace.discrete.validate_simplex_subspace_from_config", "baybe.searchspace.validation", "baybe.searchspace.validation.validate_parameter_names", "baybe.searchspace.validation.validate_parameters", "baybe.serialization", "baybe.serialization.core", "baybe.serialization.core.block_deserialization_hook", "baybe.serialization.core.block_serialization_hook", "baybe.serialization.core.converter", "baybe.serialization.core.get_base_structure_hook", "baybe.serialization.core.select_constructor_hook", "baybe.serialization.core.unstructure_base", "baybe.serialization.mixin", "SerialMixin", "baybe.serialization.utils", "baybe.serialization.utils.deserialize_dataframe", "baybe.serialization.utils.serialize_dataframe", "baybe.simulation", "baybe.simulation.core", "baybe.simulation.core.simulate_experiment", "baybe.simulation.lookup", "baybe.simulation.scenarios", "baybe.simulation.scenarios.simulate_scenarios", "baybe.simulation.transfer_learning", "baybe.simulation.transfer_learning.simulate_transfer_learning", "baybe.strategies", "baybe.surrogates", "baybe.surrogates.base", "Surrogate", "baybe.surrogates.custom", "CustomONNXSurrogate", "baybe.surrogates.custom.register_custom_architecture", "baybe.surrogates.gaussian_process", "GaussianProcessSurrogate", "baybe.surrogates.linear", "BayesianLinearSurrogate", "baybe.surrogates.naive", "MeanPredictionSurrogate", "baybe.surrogates.ngboost", "NGBoostSurrogate", "baybe.surrogates.random_forest", "RandomForestSurrogate", "baybe.surrogates.utils", "baybe.surrogates.utils.autoscale", "baybe.surrogates.utils.batchify", "baybe.surrogates.utils.catch_constant_targets", "baybe.surrogates.validation", "baybe.surrogates.validation.get_model_params_validator", "baybe.surrogates.validation.validate_custom_architecture_cls", "baybe.targets", "baybe.targets.base", "Target", "baybe.targets.enum", "TargetMode", "TargetTransformation", "baybe.targets.numerical", "NumericalTarget", "baybe.targets.transforms", "baybe.targets.transforms.bell_transform", "baybe.targets.transforms.linear_transform", "baybe.targets.transforms.triangular_transform", "baybe.telemetry", "baybe.telemetry.get_user_details", "baybe.telemetry.is_enabled", "baybe.telemetry.telemetry_record_recommended_measurement_percentage", "baybe.telemetry.telemetry_record_value", "baybe.utils", "baybe.utils.basic", "Dummy", "classproperty", "baybe.utils.basic.filter_attributes", "baybe.utils.basic.find_subclass", "baybe.utils.basic.get_subclasses", "baybe.utils.basic.group_duplicate_values", "baybe.utils.basic.hilberts_factory", "baybe.utils.basic.refers_to", "baybe.utils.basic.set_random_seed", "baybe.utils.basic.to_tuple", "baybe.utils.boolean", "baybe.utils.boolean.check_if_in", "baybe.utils.boolean.is_abstract", "baybe.utils.boolean.strtobool", "baybe.utils.botorch_wrapper", "baybe.utils.botorch_wrapper.botorch_function_wrapper", "baybe.utils.chemistry", "baybe.utils.chemistry.get_canonical_smiles", "baybe.utils.chemistry.is_valid_smiles", "baybe.utils.chemistry.name_to_smiles", "baybe.utils.chemistry.smiles_to_fp_features", "baybe.utils.chemistry.smiles_to_molecules", "baybe.utils.chemistry.smiles_to_mordred_features", "baybe.utils.chemistry.smiles_to_rdkit_features", "baybe.utils.dataframe", "baybe.utils.dataframe.add_fake_results", "baybe.utils.dataframe.add_parameter_noise", "baybe.utils.dataframe.df_drop_single_value_columns", "baybe.utils.dataframe.df_drop_string_columns", "baybe.utils.dataframe.df_uncorrelated_features", "baybe.utils.dataframe.fuzzy_row_match", "baybe.utils.dataframe.pretty_print_df", "baybe.utils.dataframe.to_tensor", "baybe.utils.interval", "baybe.utils.interval.InfiniteIntervalError", "Interval", "baybe.utils.interval.convert_bounds", "baybe.utils.interval.use_fallback_constructor_hook", "baybe.utils.numerical", "baybe.utils.numerical.DTypeFloatNumpy", "baybe.utils.numerical.DTypeFloatONNX", "baybe.utils.numerical.closer_element", "baybe.utils.numerical.closest_element", "baybe.utils.numerical.geom_mean", "baybe.utils.plotting", "baybe.utils.plotting.create_example_plots", "baybe.utils.sampling_algorithms", "baybe.utils.sampling_algorithms.farthest_point_sampling", "baybe.utils.torch", "baybe.utils.torch.DTypeFloatTorch", "Backtesting", "Simulation loop using a BoTorch test function", "Example for full simulation loop using a custom analytical test function", "Example for full simulation loop using a table-based lookup mechanism with initial", "Example for full simulation loop using a table-based lookup mechanism", "Example for full simulation loop using a custom analytical test function in a hybrid", "Example for full simulation loop using a table-based lookup mechanism with incomplete", "Example for full simulation loop using the multi target mode for custom analytic", "Basics", "Basic example for using BayBE", "Example for using different strategies", "Constraints Continuous", "Example for constraints in a hybrid searchspace", "Example for linear constraints in a continuous searchspace", "Constraints Discrete", "Example for using custom constraints in discrete searchspaces", "Example for using dependency constraints in discrete searchspaces", "Example for using exclusion constraints in discrete searchspaces", "Example for using a mixture use case in a discrete searchspace", "Example for using exclusion constraints incorporating sums and products", "Custom Surrogates", "Example for surrogate model with a custom architecture using <code class=\"docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>", "Example for surrogate model with a custom architecture using <code class=\"docutils literal notranslate\"><span class=\"pre\">pytorch</span></code>", "Example for surrogate model with a custom pretrained model", "Example for custom parameter passing in surrogate models", "Multi Target", "Example for using the multi target mode for the objective", "Searchspaces", "Example for using a synthetic BoTorch test function in a continuous searchspace", "Example for using a custom BoTorch test function in a continuous searchspace", "Example for using a synthetic BoTorch test function in a discrete searchspace", "Example for using synthetic test functions in hybrid spaces", "Serialization", "Example for the serialization of a campaign", "Example for creating campaigns from configs", "Example for validation of a config file", "Transfer Learning", "Backtesting", "Transfer Learning", "Examples", "BayBE \u2014 A Bayesian Back End for Design of Experiments", "PyCharm vs. <code class=\"docutils literal notranslate\"><span class=\"pre\">exceptiongroup</span></code>", "Changelog", "Contributing to BayBE", "Contributors", "License", "Campaigns", "Constraints", "Objective", "Parameters", "Recommenders", "Search Spaces", "Serialization", "Simulation", "Surrogates", "Targets", "Transfer Learning", "User guide"], "titleterms": {"": 316, "0": 315, "01": 315, "02": 315, "03": 315, "04": 315, "06": 315, "07": 315, "08": 315, "09": 315, "1": 315, "10": 315, "11": 315, "12": 315, "13": 315, "14": 315, "15": 315, "16": 315, "17": 315, "19": 315, "2": 315, "2022": 315, "2023": 315, "2024": 315, "23": 315, "24": 315, "27": 315, "28": 315, "29": 315, "3": 315, "4": 315, "5": 315, "6": 315, "7": 315, "8": 315, "A": 313, "The": [307, 313, 314, 325, 326, 329], "abbrevi": 325, "acqf": 2, "acquisit": [1, 2, 15, 17, 19, 20, 21, 283], "acquisitionfunct": 16, "action": 329, "ad": [282, 315, 319], "add_fake_result": 248, "add_parameter_nois": 249, "addendum": 299, "addit": 323, "advanc": 313, "altern": 325, "analyt": [275, 278, 280], "architectur": [294, 295], "assembli": 325, "attr": 316, "author": [313, 317], "automat": 325, "autoscal": 198, "avail": [283, 327], "avoid": 314, "back": 313, "backtest": [273, 310], "base": [15, 25, 60, 65, 72, 74, 83, 110, 115, 124, 127, 132, 182, 205, 276, 277, 279], "basic": [62, 67, 222, 225, 226, 227, 228, 229, 230, 231, 232, 281, 282, 319, 325], "batch": 319, "batchifi": 199, "bayb": [0, 1, 2, 15, 17, 19, 20, 21, 22, 24, 25, 29, 33, 36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 74, 75, 77, 78, 80, 82, 83, 87, 90, 92, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 121, 123, 124, 126, 127, 129, 131, 132, 134, 139, 142, 145, 146, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 282, 294, 295, 313, 316], "bayesian": [126, 127, 129, 313, 323], "bayesianlinearsurrog": 190, "bayesianrecommend": 128, "bell_transform": 213, "block_deserialization_hook": 161, "block_serialization_hook": 162, "boolean": [233, 234, 235, 236], "both": 306, "botorch": [274, 301, 302, 303], "botorch_function_wrapp": 238, "botorch_wrapp": [237, 238], "bound": [321, 324], "build": 324, "cach": 319, "callabl": 326, "campaign": [22, 23, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 288, 289, 291, 292, 296, 297, 299, 301, 302, 303, 304, 306, 307, 319], "case": 291, "catch_constant_target": 200, "categor": 87, "categoricalencod": 93, "categoricalparamet": [88, 322], "chang": 315, "changelog": 315, "check_if_in": 234, "chemic": 313, "chemistri": [239, 240, 241, 242, 243, 244, 245, 246], "class": 316, "classproperti": 224, "clone": 313, "closer_el": 264, "closest_el": 265, "cluster": [134, 323], "code": 316, "compar": 306, "condit": [29, 30, 320], "config": [307, 308, 319], "configur": [296, 297, 307, 325], "constraint": [24, 25, 26, 29, 33, 36, 45, 46, 284, 285, 286, 287, 288, 289, 290, 291, 292, 320, 324], "construct": [274, 275, 276, 277, 278, 279, 280, 285, 286, 301, 302, 303, 304, 321, 324], "constructor": [324, 325], "continu": [33, 146, 284, 286, 301, 302, 320, 322, 324], "continuousconstraint": 27, "continuouslinearequalityconstraint": [34, 320], "continuouslinearinequalityconstraint": [35, 320], "continuousparamet": 84, "contribut": 316, "contributor": 317, "conveni": 321, "convers": [321, 325], "convert": [163, 296], "convert_acqf": 20, "convert_bound": 259, "copi": 325, "core": [148, 151, 160, 161, 162, 163, 164, 165, 166, 173, 174], "creat": [274, 275, 276, 277, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 296, 297, 299, 301, 302, 303, 306, 307, 310, 311, 319, 324], "create_example_plot": 268, "creation": [276, 277, 279, 319], "custom": [90, 184, 186, 275, 278, 280, 288, 293, 294, 295, 296, 297, 302, 327], "customdiscreteparamet": [91, 322], "customencod": 94, "customonnxsurrog": 185, "data": [276, 277, 279, 324], "datafram": [247, 248, 249, 250, 251, 252, 253, 254, 255, 324, 325, 326], "de": [306, 325], "default": [324, 325], "defaultscal": 143, "defin": [274, 275, 278, 280, 285, 286, 299, 301, 302, 303, 304, 308, 310, 311, 313], "definit": [294, 295], "depend": [289, 313, 322], "deprec": [112, 113, 315], "deprecationerror": 48, "descript": 299, "deseri": 325, "deserialize_datafram": 170, "design": [313, 316], "desir": [75, 77], "desirabilityobject": [76, 321], "develop": 316, "df_drop_single_value_column": 250, "df_drop_string_column": 251, "df_uncorrelated_featur": 252, "dictionari": [307, 308], "differ": 283, "dimens": 304, "discret": [36, 152, 154, 155, 287, 288, 289, 290, 291, 303, 320, 322, 323, 324], "discreteconstraint": 28, "discretecustomconstraint": [37, 320], "discretedependenciesconstraint": [38, 320], "discreteexcludeconstraint": [39, 320], "discretelinkedparametersconstraint": [40, 320], "discretenolabelduplicatesconstraint": [41, 320], "discreteparamet": 85, "discretepermutationinvarianceconstraint": [42, 320], "discreteproductconstraint": [43, 320], "discretesumconstraint": [44, 320], "do": 326, "docstr": 316, "document": 297, "doe": [294, 295], "dtypefloatnumpi": 262, "dtypefloatonnx": 263, "dtypefloattorch": 272, "dummi": 223, "emptysearchspaceerror": 49, "encod": 322, "encount": 314, "end": 313, "enum": [78, 92, 207], "equival": 325, "exampl": [275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 312, 313], "except": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "exceptiongroup": 314, "exclus": [290, 292], "expectedimprov": 3, "experi": [288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306, 313, 326], "experiment": 319, "explicit": 324, "extend": 316, "farthest_point_sampl": 270, "field": 325, "file": [307, 308], "filter_attribut": 225, "find_subclass": 226, "fix": 315, "fpsrecommend": 140, "from": [307, 313, 319, 324, 325], "full": [274, 275, 276, 277, 278, 279, 280, 324], "function": [274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 299, 301, 302, 303, 304, 316, 326], "further": 319, "fuzzy_row_match": 253, "gammaprior": 68, "gaussian_process": 187, "gaussianmixtureclusteringrecommend": 135, "gaussianprocesssurrog": 188, "gener": [310, 311, 316, 323], "geom_mean": 266, "get": [282, 319], "get_base_structure_hook": 164, "get_canonical_smil": 240, "get_model_params_valid": 202, "get_parameters_from_datafram": 104, "get_subclass": 227, "get_user_detail": 217, "github": 313, "group_duplicate_valu": 228, "guid": 330, "hilberts_factori": 229, "how": 314, "hybrid": [278, 285, 304, 320], "implicit": 321, "import": [274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311], "inclus": 276, "incompatiblesearchspaceerror": 50, "incomplet": 279, "incorpor": 292, "index": 313, "indic": 313, "inequ": 320, "infiniteintervalerror": 257, "inform": [319, 323], "initi": [276, 283], "instal": 313, "instead": [296, 297], "interv": [256, 257, 258, 259, 260], "invok": 325, "is_abstract": 235, "is_en": 218, "is_valid_smil": 241, "issu": 313, "iter": [285, 286, 294, 295, 296, 297, 299], "json": [319, 325], "kernel": [59, 60, 61, 62, 64, 65, 67], "kmeansclusteringrecommend": 136, "known": 313, "learn": [309, 311, 326, 329], "licens": [313, 318], "limit": 328, "linear": [189, 286], "linear_transform": 214, "link": 297, "local": 313, "logexpectedimprov": 4, "lookup": [175, 276, 277, 279, 310, 311, 326], "loop": [274, 275, 276, 277, 278, 279, 280, 310, 311, 313], "mandatori": 321, "manual": [288, 289, 290, 291, 292], "match": 328, "maternkernel": 63, "max": 328, "mean": 326, "meanpredictionsurrog": 192, "measur": [282, 296, 297, 319], "mechan": [276, 277, 279], "meta": [114, 115, 117, 323], "metadata": 324, "metarecommend": 116, "min": 328, "mixin": 167, "mixtur": 291, "mode": [280, 299, 328], "model": [283, 294, 295, 296, 297, 327], "multi": [280, 298, 299], "multipl": [280, 326], "naiv": [121, 191], "naivehybridspacerecommend": 122, "name": 322, "name_to_smil": 242, "necessari": [275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308], "nest": 325, "ngboost": 193, "ngboostsurrog": 194, "nomcacquisitionfunctionerror": 51, "nonpredict": [131, 132, 134, 139], "nonpredictiverecommend": 133, "norecommenderslefterror": 52, "notenoughpointslefterror": 53, "nothingtosimulateerror": 54, "numer": [97, 210, 261, 262, 263, 264, 265, 266], "numericalcontinuousparamet": [98, 322], "numericaldiscreteparamet": [99, 322], "numericaltarget": [211, 328], "numericalunderflowerror": 55, "object": [69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 274, 275, 276, 277, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 299, 301, 302, 303, 306, 310, 311, 313, 321, 325], "onnx": 296, "optim": [310, 311, 313, 319], "option": [313, 322, 323], "optionalimporterror": 56, "other": 283, "output": [296, 297], "packag": 313, "pamclusteringrecommend": 137, "parallel": 319, "paramet": [82, 83, 86, 87, 90, 92, 97, 100, 101, 103, 104, 105, 106, 107, 108, 274, 275, 276, 277, 278, 279, 280, 283, 297, 319, 322, 324], "parameter_cartesian_prod_to_df": 154, "parameterencod": 95, "partial": 17, "partialacquisitionfunct": 18, "pass": 297, "perform": [274, 275, 276, 280, 299, 301, 302, 303, 304], "plot": [267, 268], "posteriormean": 5, "pre": 296, "pretrain": 296, "pretty_print_df": 254, "print": [288, 289, 291, 292, 299], "prior": [64, 65, 66, 67], "probabilityofimprov": 6, "problem": 314, "product": [292, 324], "pull": 316, "pure": [123, 124, 126, 127, 129, 131, 132, 134, 139, 323], "purerecommend": 125, "pycharm": 314, "pytorch": 295, "qexpectedimprov": 8, "qlogexpectedimprov": 9, "qlognoisyexpectedimprov": 10, "qnoisyexpectedimprov": 11, "qprobabilityofimprov": 12, "qsimpleregret": 13, "quick": 313, "qupperconfidencebound": 14, "random_forest": 195, "randomforestsurrog": 196, "randomrecommend": 141, "recommend": [109, 110, 112, 113, 114, 115, 117, 121, 123, 124, 126, 127, 129, 131, 132, 134, 139, 282, 283, 296, 297, 301, 302, 303, 304, 306, 319, 323], "recommenderprotocol": 111, "refers_to": 230, "register_custom_architectur": 186, "registr": [294, 295], "remov": 315, "represent": 324, "request": 316, "restrict": 324, "revers": 320, "role": 329, "run": [285, 286, 294, 295], "sampl": [139, 323], "sampling_algorithm": [269, 270], "scalar": [77, 79], "scaler": [142, 144], "scenario": [176, 177, 326], "search": [310, 313, 323, 324], "searchspac": [145, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 274, 275, 276, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 299, 300, 301, 302, 303, 304, 311], "searchspacetyp": 150, "see": 329, "select_constructor_hook": 165, "sequenti": [117, 319], "sequential_greedi": 129, "sequentialgreedyrecommend": 130, "sequentialmetarecommend": 118, "serial": [159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 294, 295, 305, 306, 319, 325], "serialize_datafram": 171, "serialmixin": 168, "set": [310, 311], "set_random_se": 231, "setup": [282, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 306], "simplex": 324, "simul": [172, 173, 174, 175, 176, 177, 178, 179, 274, 275, 276, 277, 278, 279, 280, 310, 311, 326], "simulate_experi": 174, "simulate_scenario": 177, "simulate_transfer_learn": 179, "singl": [80, 326], "singletargetobject": [81, 321], "sklearn": 294, "sklearnclusteringrecommend": 138, "smile": 101, "smiles_to_fp_featur": 243, "smiles_to_molecul": 244, "smiles_to_mordred_featur": 245, "smiles_to_rdkit_featur": 246, "some": [285, 286, 299], "space": [304, 310, 313, 323, 324], "stage": 296, "start": 313, "str_to_acqf": 21, "strategi": [180, 283, 313], "streamingsequentialmetarecommend": 119, "string": [307, 325], "strtobool": 236, "structure_recommender_protocol": 113, "subselectioncondit": [31, 320], "subspac": 324, "subspacecontinu": 147, "subspacediscret": 153, "substanc": [100, 101, 313], "substanceencod": 96, "substanceparamet": [102, 322], "suitabl": 283, "sum": 292, "surrog": [181, 182, 183, 184, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 283, 293, 294, 295, 296, 297, 327], "synchron": 316, "synthet": [301, 303, 304], "tabl": [276, 277, 279, 310, 311, 313], "target": [204, 205, 206, 207, 210, 212, 213, 214, 215, 280, 298, 299, 321, 328], "targetmod": 208, "targettransform": 209, "task": [310, 311], "taskparamet": [89, 322, 329], "telemetri": [216, 217, 218, 219, 220, 313], "telemetry_record_recommended_measurement_percentag": 219, "telemetry_record_valu": 220, "terminologi": [325, 326, 329], "test": [274, 275, 278, 280, 285, 286, 301, 302, 303, 304], "testexcept": 57, "thi": [275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 299, 301, 303, 304], "thresholdcondit": [32, 320], "to_object": 74, "to_tensor": 255, "to_tupl": 232, "toler": 319, "tool": 316, "torch": [271, 272], "train": 296, "transfer": [309, 311, 326, 329], "transfer_learn": [178, 179], "transform": [212, 213, 214, 215, 299], "triangular_transform": 215, "two": 308, "twophasemetarecommend": 120, "type": 325, "unidentifiedsubclasserror": 58, "unreleas": 315, "unstructure_bas": 166, "upperconfidencebound": 7, "us": [274, 275, 276, 277, 278, 279, 280, 282, 283, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 324, 325, 326, 327], "use_fallback_constructor_hook": 260, "user": 330, "util": [19, 20, 21, 103, 104, 169, 170, 171, 197, 198, 199, 200, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "v": [314, 319], "valid": [45, 46, 105, 106, 107, 108, 156, 157, 158, 201, 202, 203, 297, 308], "validate_constraint": 46, "validate_custom_architecture_cl": 203, "validate_decorrel": 106, "validate_is_finit": 107, "validate_paramet": 158, "validate_parameter_nam": 157, "validate_searchspace_from_config": 151, "validate_simplex_subspace_from_config": 155, "validate_unique_valu": 108, "valu": [324, 325], "verif": [288, 289, 290, 291, 292, 308], "verifi": 286, "we": 326, "what": 326, "when": 314, "within": 324, "workflow": 316, "write": 316}})