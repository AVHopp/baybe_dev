Search.setIndex({"alltitles": {"Acquisition function": [[331, "acquisition-function"]], "AcquisitionFunction": [[16, null]], "Added": [[363, "added"], [363, "id6"], [363, "id10"], [363, "id17"], [363, "id22"], [363, "id28"], [363, "id34"], [363, "id38"], [363, "id42"], [363, "id46"], [363, "id51"], [363, "id55"], [363, "id58"], [363, "id62"], [363, "id66"], [363, "id70"], [363, "id73"], [363, "id77"], [363, "id81"], [363, "id85"], [363, "id89"], [363, "id95"], [363, "id98"]], "Addendum: Description of transformation functions": [[347, "addendum-description-of-transformation-functions"]], "Adding measurements": [[367, "adding-measurements"]], "Additional Options for Discrete Search Spaces": [[372, null]], "AdditiveKernel": [[73, null]], "Advanced Example: Chemical Substances": [[361, "advanced-example-chemical-substances"]], "Architecture definition": [[343, "architecture-definition"]], "Automatic field conversion": [[374, "automatic-field-conversion"]], "Available models": [[376, "available-models"]], "Available recommenders suitable for initial recommendation": [[331, "available-recommenders-suitable-for-initial-recommendation"]], "Available surrogate models": [[331, "available-surrogate-models"]], "Backtesting": [[321, null], [358, null]], "Basic Instructions": [[369, "basic-instructions"]], "Basic creation": [[367, "basic-creation"]], "Basic example for using BayBE": [[330, null]], "Basic string assembly": [[374, "basic-string-assembly"]], "Basics": [[329, null], [367, "basics"]], "Batch optimization": [[367, null]], "BayBE \u2014 A Bayesian Back End for Design of Experiments": [[361, null]], "Bayesian Recommenders": [[372, "bayesian-recommenders"]], "BayesianLinearSurrogate": [[225, null]], "BayesianRecommender": [[147, null]], "Building from the Product of Parameter Values": [[373, "building-from-the-product-of-parameter-values"], [373, "id2"]], "Caching of recommendations": [[367, "caching-of-recommendations"]], "Campaign": [[23, null]], "Campaigns": [[367, null]], "CategoricalEncoding": [[102, null]], "CategoricalParameter": [[97, null], [371, "categoricalparameter"]], "Changed": [[363, "changed"], [363, "id3"], [363, "id7"], [363, "id11"], [363, "id14"], [363, "id18"], [363, "id23"], [363, "id29"], [363, "id35"], [363, "id39"], [363, "id43"], [363, "id47"], [363, "id52"], [363, "id56"], [363, "id59"], [363, "id63"], [363, "id67"], [363, "id71"], [363, "id74"], [363, "id78"], [363, "id82"], [363, "id86"], [363, "id90"]], "Changelog": [[363, null]], "Clustering Recommenders": [[372, "clustering-recommenders"]], "Code Design": [[364, "code-design"]], "Comparing recommendations in both objects": [[354, "comparing-recommendations-in-both-objects"]], "Condition": [[30, null]], "Conditions": [[368, "conditions"]], "Constraint": [[26, null]], "Constraints": [[368, null]], "Constraints Continuous": [[332, null]], "Constraints Discrete": [[335, null]], "Construct the campaign and run some iterations": [[333, "construct-the-campaign-and-run-some-iterations"], [334, "construct-the-campaign-and-run-some-iterations"]], "Constructing Full Search Spaces": [[373, "constructing-full-search-spaces"]], "Constructing a campaign and performing the simulation loop": [[328, "constructing-a-campaign-and-performing-the-simulation-loop"]], "Constructing campaigns": [[322, "constructing-campaigns"]], "Constructing campaigns for the simulation loop": [[323, "constructing-campaigns-for-the-simulation-loop"], [324, "constructing-campaigns-for-the-simulation-loop"], [325, "constructing-campaigns-for-the-simulation-loop"], [326, "constructing-campaigns-for-the-simulation-loop"], [327, "constructing-campaigns-for-the-simulation-loop"]], "Constructing from a Dataframe": [[373, "constructing-from-a-dataframe"], [373, "id1"], [373, "id3"]], "Constructing hybrid recommenders": [[352, "constructing-hybrid-recommenders"]], "Constructing the campaign and performing a recommendation": [[349, "constructing-the-campaign-and-performing-a-recommendation"], [350, "constructing-the-campaign-and-performing-a-recommendation"], [351, "constructing-the-campaign-and-performing-a-recommendation"], [352, "constructing-the-campaign-and-performing-a-recommendation"]], "Constructing the hybrid searchspace": [[326, "constructing-the-hybrid-searchspace"], [352, "constructing-the-hybrid-searchspace"]], "Continuous Constraints": [[368, "continuous-constraints"]], "Continuous Constraints in Single Precision": [[369, null]], "Continuous Parameters": [[371, "continuous-parameters"]], "Continuous Subspaces": [[373, "continuous-subspaces"]], "ContinuousConstraint": [[27, null]], "ContinuousLinearEqualityConstraint": [[34, null], [368, "continuouslinearequalityconstraint"]], "ContinuousLinearInequalityConstraint": [[35, null], [368, "continuouslinearinequalityconstraint"]], "ContinuousParameter": [[93, null]], "Contributing to BayBE": [[364, null]], "Contributors": [[365, null], [365, "id1"]], "Convenience construction and implicit conversion": [[370, null]], "Convert model to onnx": [[344, "convert-model-to-onnx"]], "Create a surrogate model with a pretrained model": [[344, "create-a-surrogate-model-with-a-pretrained-model"]], "Create a surrogate model with custom model parameters": [[345, "create-a-surrogate-model-with-custom-model-parameters"]], "Create campaign": [[344, "create-campaign"]], "Creating a Simplex-Bound Discrete Subspace": [[373, "creating-a-simplex-bound-discrete-subspace"]], "Creating a campaign": [[367, "creating-a-campaign"]], "Creating a campaign from the configuration file": [[355, "creating-a-campaign-from-the-configuration-file"]], "Creating and printing the campaign": [[336, "creating-and-printing-the-campaign"], [337, "creating-and-printing-the-campaign"], [339, "creating-and-printing-the-campaign"], [340, "creating-and-printing-the-campaign"], [347, "creating-and-printing-the-campaign"]], "Creating multiple target object": [[328, "creating-multiple-target-object"]], "Creating the Objective": [[325, "creating-the-objective"]], "Creating the Optimization Objective": [[358, "creating-the-optimization-objective"], [359, "creating-the-optimization-objective"]], "Creating the Search Space": [[358, "creating-the-search-space"]], "Creating the Searchspace": [[359, "creating-the-searchspace"]], "Creating the campaign": [[331, "creating-the-campaign"], [345, "creating-the-campaign"], [354, "creating-the-campaign"]], "Creating the constraint": [[336, "creating-the-constraint"], [338, "creating-the-constraint"], [339, "creating-the-constraint"]], "Creating the constraints": [[337, "creating-the-constraints"], [340, "creating-the-constraints"]], "Creating the objective": [[347, "creating-the-objective"]], "Creating the objective object": [[328, "creating-the-objective-object"]], "Creating the recommender object": [[331, "creating-the-recommender-object"]], "Creating the searchspace": [[328, "creating-the-searchspace"]], "Creating the searchspace and the objective": [[322, "creating-the-searchspace-and-the-objective"], [323, "creating-the-searchspace-and-the-objective"], [324, "creating-the-searchspace-and-the-objective"], [327, "creating-the-searchspace-and-the-objective"], [333, "creating-the-searchspace-and-the-objective"], [334, "creating-the-searchspace-and-the-objective"], [336, "creating-the-searchspace-and-the-objective"], [337, "creating-the-searchspace-and-the-objective"], [338, "creating-the-searchspace-and-the-objective"], [339, "creating-the-searchspace-and-the-objective"], [340, "creating-the-searchspace-and-the-objective"], [349, "creating-the-searchspace-and-the-objective"], [350, "creating-the-searchspace-and-the-objective"], [351, "creating-the-searchspace-and-the-objective"]], "Creation from a JSON config": [[367, "creation-from-a-json-config"]], "Custom Surrogates": [[341, null]], "CustomDiscreteParameter": [[100, null], [371, "customdiscreteparameter"]], "CustomEncoding": [[103, null]], "CustomONNXSurrogate": [[209, null]], "Dataframe deserialization": [[374, "dataframe-deserialization"]], "DefaultKernelFactory": [[223, null]], "DefaultScaler": [[162, null]], "Defining config dictionaries": [[356, "defining-config-dictionaries"]], "Defining the Optimization Objective": [[361, "defining-the-optimization-objective"]], "Defining the Search Space": [[361, "defining-the-search-space"]], "Defining the Tasks": [[358, "defining-the-tasks"], [359, "defining-the-tasks"]], "Defining the custom test function": [[350, "defining-the-custom-test-function"]], "Defining the targets": [[347, "defining-the-targets"]], "Defining the test function": [[322, "defining-the-test-function"], [323, "defining-the-test-function"], [328, "defining-the-test-function"], [333, "defining-the-test-function"], [334, "defining-the-test-function"], [349, "defining-the-test-function"], [351, "defining-the-test-function"]], "Defining the test function and the hybrid dimensions": [[352, "defining-the-test-function-and-the-hybrid-dimensions"]], "Defining the test function.": [[326, "defining-the-test-function"]], "Deprecations": [[363, "deprecations"], [363, "id20"], [363, "id26"], [363, "id32"], [363, "id49"]], "Deserialization from configuration strings": [[374, "deserialization-from-configuration-strings"]], "DesirabilityObjective": [[85, null], [370, "desirabilityobjective"]], "Developer Tools": [[364, "developer-tools"]], "Discrete Constraints": [[368, "discrete-constraints"]], "Discrete Parameters": [[371, "discrete-parameters"]], "Discrete Subspaces": [[373, "discrete-subspaces"]], "DiscreteConstraint": [[28, null]], "DiscreteCustomConstraint": [[37, null], [368, "discretecustomconstraint"]], "DiscreteDependenciesConstraint": [[38, null], [368, "discretedependenciesconstraint"]], "DiscreteExcludeConstraint": [[39, null], [368, "discreteexcludeconstraint"]], "DiscreteLinkedParametersConstraint": [[40, null], [368, "discretelinkedparametersconstraint"]], "DiscreteNoLabelDuplicatesConstraint": [[41, null], [368, "discretenolabelduplicatesconstraint"]], "DiscreteParameter": [[94, null]], "DiscretePermutationInvarianceConstraint": [[42, null], [368, "discretepermutationinvarianceconstraint"]], "DiscreteProductConstraint": [[43, null]], "DiscreteSumConstraint": [[44, null]], "DiscreteSumConstraint and DiscreteProductConstraint": [[368, "discretesumconstraint-and-discreteproductconstraint"]], "Disk Caching": [[369, "disk-caching"]], "Dummy": [[258, null]], "Environment Variables": [[369, null]], "Equivalent copies": [[374, null]], "Example Searchspace and objective parameters": [[331, "example-searchspace-and-objective-parameters"]], "Example for constraints in a hybrid searchspace": [[333, null]], "Example for creating campaigns from configs": [[355, null]], "Example for custom parameter passing in surrogate models": [[345, null]], "Example for full simulation loop using a custom analytical test function": [[323, null]], "Example for full simulation loop using a custom analytical test function in a hybrid": [[326, null]], "Example for full simulation loop using a table-based lookup mechanism": [[325, null]], "Example for full simulation loop using a table-based lookup mechanism with incomplete": [[327, null]], "Example for full simulation loop using a table-based lookup mechanism with initial": [[324, null]], "Example for full simulation loop using the multi target mode for custom analytic": [[328, null]], "Example for linear constraints in a continuous searchspace": [[334, null]], "Example for surrogate model with a custom architecture using pytorch": [[343, null]], "Example for surrogate model with a custom architecture using sklearn": [[342, null]], "Example for surrogate model with a custom pretrained model": [[344, null]], "Example for the serialization of a campaign": [[354, null]], "Example for using a custom BoTorch test function in a continuous searchspace": [[350, null]], "Example for using a mixture use case in a discrete searchspace": [[339, null]], "Example for using a synthetic BoTorch test function in a continuous searchspace": [[349, null]], "Example for using a synthetic BoTorch test function in a discrete searchspace": [[351, null]], "Example for using custom constraints in discrete searchspaces": [[336, null]], "Example for using dependency constraints in discrete searchspaces": [[337, null]], "Example for using different strategies": [[331, null]], "Example for using exclusion constraints in discrete searchspaces": [[338, null]], "Example for using exclusion constraints incorporating sums and products": [[340, null]], "Example for using synthetic test functions in hybrid spaces": [[352, null]], "Example for using the multi target mode for the objective": [[347, null]], "Example for validation of a config file": [[356, null]], "Examples": [[360, null]], "ExpectedImprovement": [[3, null]], "Experiment Setup": [[342, "experiment-setup"], [343, "experiment-setup"], [344, "experiment-setup"], [345, "experiment-setup"]], "Experiment setup": [[336, "experiment-setup"], [337, "experiment-setup"], [338, "experiment-setup"], [339, "experiment-setup"], [340, "experiment-setup"], [354, "experiment-setup"]], "Experiment setup and creating the searchspace": [[347, "experiment-setup-and-creating-the-searchspace"]], "Expired Deprecations (from 0.6.*)": [[363, "expired-deprecations-from-0-6"]], "Extending BayBE\u2019s Functionality": [[364, "extending-baybe-s-functionality"]], "FPSRecommender": [[159, null]], "Fixed": [[363, "fixed"], [363, "id4"], [363, "id8"], [363, "id12"], [363, "id19"], [363, "id24"], [363, "id30"], [363, "id36"], [363, "id44"], [363, "id48"], [363, "id53"], [363, "id60"], [363, "id64"], [363, "id68"], [363, "id75"], [363, "id79"], [363, "id83"], [363, "id87"], [363, "id91"], [363, "id93"], [363, "id96"]], "Floating Point Precision": [[369, "floating-point-precision"]], "From GitHub": [[361, "from-github"]], "From Local Clone": [[361, "from-local-clone"]], "From Package Index": [[361, "from-package-index"]], "From the Default Constructor": [[373, "from-the-default-constructor"]], "Further information": [[367, "further-information"]], "GammaPrior": [[122, null]], "GaussianMixtureClusteringRecommender": [[154, null]], "GaussianProcessPreset": [[220, null]], "GaussianProcessSurrogate": [[213, null]], "General Information": [[372, "general-information"]], "General Workflow": [[364, "general-workflow"]], "Generating Lookup Tables": [[358, "generating-lookup-tables"], [359, "generating-lookup-tables"]], "Getting a recommendation and adding measurements": [[330, "getting-a-recommendation-and-adding-measurements"]], "Getting recommendations": [[367, "getting-recommendations"]], "HalfCauchyPrior": [[123, null]], "HalfNormalPrior": [[124, null]], "How to avoid": [[362, "how-to-avoid"]], "Hybrid constraints": [[368, null]], "Imports": [[322, "imports"], [358, "imports"], [359, "imports"]], "Inclusion of initial data": [[324, "inclusion-of-initial-data"]], "Indices and Tables": [[361, "indices-and-tables"]], "Interval": [[295, null]], "Invoking alternative constructors": [[374, "invoking-alternative-constructors"]], "Iterate with recommendations and measurements": [[344, "iterate-with-recommendations-and-measurements"], [345, "iterate-with-recommendations-and-measurements"]], "JSON de-/serialization": [[374, "json-de-serialization"]], "KMeansClusteringRecommender": [[155, null]], "Kernel": [[62, null]], "KernelFactory": [[215, null]], "License": [[366, null]], "Limitations": [[377, "limitations"]], "LinearKernel": [[64, null]], "Links for documentation": [[345, "links-for-documentation"]], "LogExpectedImprovement": [[4, null]], "LogNormalPrior": [[125, null]], "Lookup functionality and data creation": [[324, "lookup-functionality-and-data-creation"], [325, "lookup-functionality-and-data-creation"], [327, "lookup-functionality-and-data-creation"]], "MATCH mode": [[377, "match-mode"]], "MIN and MAX mode": [[377, "min-and-max-mode"]], "Maintainers": [[365, "maintainers"]], "Mandatory target bounds": [[370, null]], "Manual verification of the constraint": [[336, "manual-verification-of-the-constraint"], [339, "manual-verification-of-the-constraint"]], "Manual verification of the constraints": [[337, "manual-verification-of-the-constraints"], [338, "manual-verification-of-the-constraints"], [340, "manual-verification-of-the-constraints"]], "MaternKernel": [[65, null]], "MeanPredictionSurrogate": [[227, null]], "MemorySize": [[172, null]], "Meta Recommenders": [[372, "meta-recommenders"]], "MetaRecommender": [[135, null]], "Metadata": [[373, "metadata"]], "Model Outputs": [[344, "model-outputs"], [345, "model-outputs"]], "Multi Target": [[346, null]], "NGBoostSurrogate": [[229, null]], "NaiveHybridSpaceRecommender": [[141, null]], "Necessary imports": [[342, "necessary-imports"], [343, "necessary-imports"], [344, "necessary-imports"], [345, "necessary-imports"], [350, "necessary-imports"], [354, "necessary-imports"], [355, "necessary-imports"], [356, "necessary-imports"]], "Necessary imports for this example": [[323, "necessary-imports-for-this-example"], [324, "necessary-imports-for-this-example"], [325, "necessary-imports-for-this-example"], [326, "necessary-imports-for-this-example"], [327, "necessary-imports-for-this-example"], [328, "necessary-imports-for-this-example"], [330, "necessary-imports-for-this-example"], [331, "necessary-imports-for-this-example"], [333, "necessary-imports-for-this-example"], [334, "necessary-imports-for-this-example"], [336, "necessary-imports-for-this-example"], [337, "necessary-imports-for-this-example"], [338, "necessary-imports-for-this-example"], [339, "necessary-imports-for-this-example"], [340, "necessary-imports-for-this-example"], [347, "necessary-imports-for-this-example"], [349, "necessary-imports-for-this-example"], [351, "necessary-imports-for-this-example"], [352, "necessary-imports-for-this-example"]], "Nesting objects": [[374, "nesting-objects"]], "NonPredictiveRecommender": [[152, null]], "NormalPrior": [[126, null]], "NumericalContinuousParameter": [[107, null], [371, "numericalcontinuousparameter"]], "NumericalDiscreteParameter": [[108, null], [371, "numericaldiscreteparameter"]], "NumericalTarget": [[246, null], [377, "numericaltarget"]], "Objective": [[80, null], [370, null]], "Optional Dependencies": [[361, "optional-dependencies"]], "Optional dependency": [[371, null]], "Optional: Defining the Optimization Strategy": [[361, "optional-defining-the-optimization-strategy"]], "Other parameters": [[331, "other-parameters"]], "PAMClusteringRecommender": [[156, null]], "Parameter": [[95, null]], "Parameter encoding": [[371, null]], "Parameter names": [[371, null]], "Parameter tolerances": [[367, null]], "ParameterEncoding": [[104, null]], "Parameters": [[371, null]], "Parameters for a full simulation loop": [[322, "parameters-for-a-full-simulation-loop"], [323, "parameters-for-a-full-simulation-loop"], [324, "parameters-for-a-full-simulation-loop"], [325, "parameters-for-a-full-simulation-loop"], [326, "parameters-for-a-full-simulation-loop"], [327, "parameters-for-a-full-simulation-loop"], [328, "parameters-for-a-full-simulation-loop"]], "PartialAcquisitionFunction": [[18, null]], "Performing some iterations": [[347, "performing-some-iterations"]], "Performing the simulation loop": [[322, "performing-the-simulation-loop"], [323, "performing-the-simulation-loop"], [324, "performing-the-simulation-loop"]], "PeriodicKernel": [[66, null]], "PiecewisePolynomialKernel": [[67, null]], "PlainKernelFactory": [[216, null]], "PolynomialKernel": [[68, null]], "PosteriorMean": [[5, null]], "Prior": [[120, null]], "ProbabilityOfImprovement": [[6, null]], "ProductKernel": [[74, null]], "Pure Recommenders": [[372, "pure-recommenders"]], "PureRecommender": [[144, null]], "PyCharm vs. exceptiongroup": [[362, null]], "RBFKernel": [[69, null]], "RFFKernel": [[70, null]], "RQKernel": [[71, null]], "RandomForestSurrogate": [[231, null]], "RandomRecommender": [[160, null]], "RecommenderProtocol": [[130, null]], "Recommenders": [[372, null]], "Removed": [[363, "removed"], [363, "id15"], [363, "id25"], [363, "id31"], [363, "id40"]], "Representation of Data within Discrete Subspaces": [[373, "representation-of-data-within-discrete-subspaces"]], "Restricting Search Spaces Using Constraints": [[373, "restricting-search-spaces-using-constraints"]], "Reversing the inequality": [[368, null]], "Run DOE iterations with custom surrogate": [[342, "run-doe-iterations-with-custom-surrogate"], [343, "run-doe-iterations-with-custom-surrogate"]], "SKLearnClusteringRecommender": [[157, null]], "Sampling Recommenders": [[372, "sampling-recommenders"]], "Scalarizer": [[88, null]], "ScaleKernel": [[75, null]], "Scaler": [[163, null]], "Search Spaces": [[373, null]], "SearchSpace": [[168, null]], "SearchSpaceType": [[169, null]], "Searchspaces": [[348, null]], "Seeing Transfer Learning in Action": [[378, "seeing-transfer-learning-in-action"]], "Sequential vs. parallel experimentation": [[367, null]], "SequentialGreedyRecommender": [[149, null]], "SequentialMetaRecommender": [[137, null]], "SerialMixin": [[188, null]], "Serialization": [[342, "serialization"], [343, "serialization"], [353, null], [367, "serialization"], [374, null]], "Serialization and de-serialization": [[354, "serialization-and-de-serialization"]], "Settings": [[358, "settings"], [359, "settings"]], "Setup": [[330, "setup"]], "Simulating Multiple Scenarios": [[375, "simulating-multiple-scenarios"]], "Simulating Transfer Learning": [[375, "simulating-transfer-learning"]], "Simulating a Single Experiment": [[375, "simulating-a-single-experiment"]], "Simulation": [[375, null]], "Simulation Loop": [[358, "simulation-loop"], [359, "simulation-loop"]], "Simulation loop using a BoTorch test function": [[322, null]], "SingleTargetObjective": [[90, null], [370, "singletargetobjective"]], "SmoothedBoxPrior": [[127, null]], "StreamingSequentialMetaRecommender": [[138, null]], "SubSelectionCondition": [[31, null], [368, "subselectioncondition"]], "SubspaceContinuous": [[166, null]], "SubspaceDiscrete": [[173, null]], "SubstanceEncoding": [[105, null]], "SubstanceParameter": [[111, null], [371, "substanceparameter"]], "Surrogate": [[207, null]], "Surrogate Definition with BayBE Registration": [[342, "surrogate-definition-with-baybe-registration"], [343, "surrogate-definition-with-baybe-registration"]], "Surrogates": [[376, null]], "Synchronizing Pull Requests": [[364, "synchronizing-pull-requests"]], "Target": [[241, null]], "TargetMode": [[243, null]], "TargetTransformation": [[244, null]], "Targets": [[377, null]], "TaskParameter": [[98, null], [371, "taskparameter"]], "Telemetry": [[369, "telemetry"]], "Telemetry Scope": [[369, null]], "Terminology": [[374, null], [378, null]], "Terminology: What do we mean by \u201cSimulation\u201d?": [[375, "terminology-what-do-we-mean-by-simulation"]], "The Lookup Functionality": [[375, "the-lookup-functionality"]], "The Optimization Loop": [[361, "the-optimization-loop"]], "The Problem": [[362, "the-problem"]], "The configuration dictionary as a string": [[355, "the-configuration-dictionary-as-a-string"]], "The role of TaskParameter": [[378, "the-role-of-taskparameter"]], "The type field": [[374, "the-type-field"]], "ThresholdCondition": [[32, null], [368, "thresholdcondition"]], "Transfer Learning": [[357, null], [359, null], [378, null]], "TwoPhaseMetaRecommender": [[139, null]], "Uninstalling Internet Packages": [[369, null]], "UpperConfidenceBound": [[7, null]], "User guide": [[379, null]], "Using Explicit Bounds": [[373, "using-explicit-bounds"]], "Using a Callable": [[375, "using-a-callable"]], "Using a Dataframe": [[375, "using-a-dataframe"]], "Using abbreviations": [[374, "using-abbreviations"]], "Using configuration instead": [[344, "using-configuration-instead"], [345, "using-configuration-instead"]], "Using custom models": [[376, "using-custom-models"]], "Using default values": [[374, "using-default-values"]], "Validation of model parameters": [[345, "validation-of-model-parameters"]], "Verification of the two dictionaries": [[356, "verification-of-the-two-dictionaries"]], "Verify the constraints": [[334, "verify-the-constraints"]], "When to encounter": [[362, "when-to-encounter"]], "Writing Docstrings": [[364, "writing-docstrings"]], "Writing attrs classes": [[364, "writing-attrs-classes"]], "[0.1.0] - 2022-10-01": [[363, "id97"]], "[0.2.0] - 2022-11-10": [[363, "id94"]], "[0.2.1] - 2022-12-01": [[363, "id92"]], "[0.2.2] - 2023-01-13": [[363, "id88"]], "[0.2.3] - 2023-03-14": [[363, "id84"]], "[0.2.4] - 2023-03-24": [[363, "id80"]], "[0.3.0] - 2023-06-27": [[363, "id76"]], "[0.3.1] - 2023-07-17": [[363, "id72"]], "[0.3.2] - 2023-07-24": [[363, "id69"]], "[0.4.0] - 2023-08-16": [[363, "id65"]], "[0.4.1] - 2023-08-23": [[363, "id61"]], "[0.4.2] - 2023-08-29": [[363, "id57"]], "[0.5.0] - 2023-09-15": [[363, "id54"]], "[0.5.1] - 2023-10-19": [[363, "id50"]], "[0.6.0] - 2023-11-17": [[363, "id45"]], "[0.6.1] - 2023-11-27": [[363, "id41"]], "[0.7.0] - 2023-12-04": [[363, "id37"]], "[0.7.1] - 2023-12-07": [[363, "id33"]], "[0.7.2] - 2024-01-24": [[363, "id27"]], "[0.7.3] - 2024-02-09": [[363, "id21"]], "[0.7.4] - 2024-02-28": [[363, "id16"]], "[0.8.0] - 2024-02-29": [[363, "id13"]], "[0.8.1] - 2024-03-11": [[363, "id9"]], "[0.8.2] - 2024-03-27": [[363, "id5"]], "[0.9.0] - 2024-05-21": [[363, "id2"]], "[0.9.1] - 2024-06-04": [[363, "id1"]], "baybe": [[0, null]], "baybe.acquisition": [[1, null]], "baybe.acquisition.acqfs": [[2, null]], "baybe.acquisition.base": [[15, null]], "baybe.acquisition.partial": [[17, null]], "baybe.acquisition.utils": [[19, null]], "baybe.acquisition.utils.convert_acqf": [[20, null]], "baybe.acquisition.utils.str_to_acqf": [[21, null]], "baybe.campaign": [[22, null]], "baybe.constraints": [[24, null]], "baybe.constraints.base": [[25, null]], "baybe.constraints.conditions": [[29, null]], "baybe.constraints.continuous": [[33, null]], "baybe.constraints.discrete": [[36, null]], "baybe.constraints.validation": [[45, null]], "baybe.constraints.validation.validate_constraints": [[46, null]], "baybe.deprecation": [[47, null]], "baybe.deprecation.compatibilize_config": [[48, null]], "baybe.exceptions": [[49, null]], "baybe.exceptions.DeprecationError": [[50, null]], "baybe.exceptions.EmptySearchSpaceError": [[51, null]], "baybe.exceptions.IncompatibleSearchSpaceError": [[52, null]], "baybe.exceptions.NoMCAcquisitionFunctionError": [[53, null]], "baybe.exceptions.NoRecommendersLeftError": [[54, null]], "baybe.exceptions.NotEnoughPointsLeftError": [[55, null]], "baybe.exceptions.NothingToSimulateError": [[56, null]], "baybe.exceptions.NumericalUnderflowError": [[57, null]], "baybe.exceptions.OptionalImportError": [[58, null]], "baybe.exceptions.UnidentifiedSubclassError": [[59, null]], "baybe.kernels": [[60, null]], "baybe.kernels.base": [[61, null]], "baybe.kernels.basic": [[63, null]], "baybe.kernels.composite": [[72, null]], "baybe.objective": [[76, null]], "baybe.objective.Objective": [[77, null]], "baybe.objectives": [[78, null]], "baybe.objectives.base": [[79, null]], "baybe.objectives.base.to_objective": [[81, null]], "baybe.objectives.deprecation": [[82, null]], "baybe.objectives.deprecation.structure_objective": [[83, null]], "baybe.objectives.desirability": [[84, null]], "baybe.objectives.desirability.scalarize": [[86, null]], "baybe.objectives.enum": [[87, null]], "baybe.objectives.single": [[89, null]], "baybe.parameters": [[91, null]], "baybe.parameters.base": [[92, null]], "baybe.parameters.categorical": [[96, null]], "baybe.parameters.custom": [[99, null]], "baybe.parameters.enum": [[101, null]], "baybe.parameters.numerical": [[106, null]], "baybe.parameters.substance": [[109, null]], "baybe.parameters.substance.Smiles": [[110, null]], "baybe.parameters.utils": [[112, null]], "baybe.parameters.utils.get_parameters_from_dataframe": [[113, null]], "baybe.parameters.validation": [[114, null]], "baybe.parameters.validation.validate_decorrelation": [[115, null]], "baybe.parameters.validation.validate_is_finite": [[116, null]], "baybe.parameters.validation.validate_unique_values": [[117, null]], "baybe.priors": [[118, null]], "baybe.priors.base": [[119, null]], "baybe.priors.basic": [[121, null]], "baybe.recommenders": [[128, null]], "baybe.recommenders.base": [[129, null]], "baybe.recommenders.deprecation": [[131, null]], "baybe.recommenders.deprecation.structure_recommender_protocol": [[132, null]], "baybe.recommenders.meta": [[133, null]], "baybe.recommenders.meta.base": [[134, null]], "baybe.recommenders.meta.sequential": [[136, null]], "baybe.recommenders.naive": [[140, null]], "baybe.recommenders.pure": [[142, null]], "baybe.recommenders.pure.base": [[143, null]], "baybe.recommenders.pure.bayesian": [[145, null]], "baybe.recommenders.pure.bayesian.base": [[146, null]], "baybe.recommenders.pure.bayesian.sequential_greedy": [[148, null]], "baybe.recommenders.pure.nonpredictive": [[150, null]], "baybe.recommenders.pure.nonpredictive.base": [[151, null]], "baybe.recommenders.pure.nonpredictive.clustering": [[153, null]], "baybe.recommenders.pure.nonpredictive.sampling": [[158, null]], "baybe.scaler": [[161, null]], "baybe.searchspace": [[164, null]], "baybe.searchspace.continuous": [[165, null]], "baybe.searchspace.core": [[167, null]], "baybe.searchspace.core.validate_searchspace_from_config": [[170, null]], "baybe.searchspace.discrete": [[171, null]], "baybe.searchspace.discrete.parameter_cartesian_prod_to_df": [[174, null]], "baybe.searchspace.discrete.validate_simplex_subspace_from_config": [[175, null]], "baybe.searchspace.validation": [[176, null]], "baybe.searchspace.validation.validate_parameter_names": [[177, null]], "baybe.searchspace.validation.validate_parameters": [[178, null]], "baybe.serialization": [[179, null]], "baybe.serialization.core": [[180, null]], "baybe.serialization.core.block_deserialization_hook": [[181, null]], "baybe.serialization.core.block_serialization_hook": [[182, null]], "baybe.serialization.core.converter": [[183, null]], "baybe.serialization.core.get_base_structure_hook": [[184, null]], "baybe.serialization.core.select_constructor_hook": [[185, null]], "baybe.serialization.core.unstructure_base": [[186, null]], "baybe.serialization.mixin": [[187, null]], "baybe.serialization.utils": [[189, null]], "baybe.serialization.utils.deserialize_dataframe": [[190, null]], "baybe.serialization.utils.serialize_dataframe": [[191, null]], "baybe.simulation": [[192, null]], "baybe.simulation.core": [[193, null]], "baybe.simulation.core.simulate_experiment": [[194, null]], "baybe.simulation.lookup": [[195, null]], "baybe.simulation.scenarios": [[196, null]], "baybe.simulation.scenarios.simulate_scenarios": [[197, null]], "baybe.simulation.transfer_learning": [[198, null]], "baybe.simulation.transfer_learning.simulate_transfer_learning": [[199, null]], "baybe.strategies": [[200, null]], "baybe.strategies.deprecation": [[201, null]], "baybe.strategies.deprecation.SequentialStrategy": [[202, null]], "baybe.strategies.deprecation.StreamingSequentialStrategy": [[203, null]], "baybe.strategies.deprecation.TwoPhaseStrategy": [[204, null]], "baybe.surrogates": [[205, null]], "baybe.surrogates.base": [[206, null]], "baybe.surrogates.custom": [[208, null]], "baybe.surrogates.custom.register_custom_architecture": [[210, null]], "baybe.surrogates.gaussian_process": [[211, null]], "baybe.surrogates.gaussian_process.core": [[212, null]], "baybe.surrogates.gaussian_process.kernel_factory": [[214, null]], "baybe.surrogates.gaussian_process.kernel_factory.to_kernel_factory": [[217, null]], "baybe.surrogates.gaussian_process.presets": [[218, null]], "baybe.surrogates.gaussian_process.presets.core": [[219, null]], "baybe.surrogates.gaussian_process.presets.core.make_gp_from_preset": [[221, null]], "baybe.surrogates.gaussian_process.presets.default": [[222, null]], "baybe.surrogates.linear": [[224, null]], "baybe.surrogates.naive": [[226, null]], "baybe.surrogates.ngboost": [[228, null]], "baybe.surrogates.random_forest": [[230, null]], "baybe.surrogates.utils": [[232, null]], "baybe.surrogates.utils.autoscale": [[233, null]], "baybe.surrogates.utils.batchify": [[234, null]], "baybe.surrogates.utils.catch_constant_targets": [[235, null]], "baybe.surrogates.validation": [[236, null]], "baybe.surrogates.validation.get_model_params_validator": [[237, null]], "baybe.surrogates.validation.validate_custom_architecture_cls": [[238, null]], "baybe.targets": [[239, null]], "baybe.targets.base": [[240, null]], "baybe.targets.enum": [[242, null]], "baybe.targets.numerical": [[245, null]], "baybe.targets.transforms": [[247, null]], "baybe.targets.transforms.bell_transform": [[248, null]], "baybe.targets.transforms.linear_transform": [[249, null]], "baybe.targets.transforms.triangular_transform": [[250, null]], "baybe.telemetry": [[251, null]], "baybe.telemetry.get_user_details": [[252, null]], "baybe.telemetry.is_enabled": [[253, null]], "baybe.telemetry.telemetry_record_recommended_measurement_percentage": [[254, null]], "baybe.telemetry.telemetry_record_value": [[255, null]], "baybe.utils": [[256, null]], "baybe.utils.basic": [[257, null]], "baybe.utils.basic.filter_attributes": [[260, null]], "baybe.utils.basic.find_subclass": [[261, null]], "baybe.utils.basic.get_baseclasses": [[262, null]], "baybe.utils.basic.get_subclasses": [[263, null]], "baybe.utils.basic.group_duplicate_values": [[264, null]], "baybe.utils.basic.hilberts_factory": [[265, null]], "baybe.utils.basic.refers_to": [[266, null]], "baybe.utils.basic.to_tuple": [[267, null]], "baybe.utils.boolean": [[268, null]], "baybe.utils.boolean.check_if_in": [[269, null]], "baybe.utils.boolean.is_abstract": [[270, null]], "baybe.utils.boolean.strtobool": [[271, null]], "baybe.utils.botorch_wrapper": [[272, null]], "baybe.utils.botorch_wrapper.botorch_function_wrapper": [[273, null]], "baybe.utils.chemistry": [[274, null]], "baybe.utils.chemistry.get_canonical_smiles": [[275, null]], "baybe.utils.chemistry.is_valid_smiles": [[276, null]], "baybe.utils.chemistry.name_to_smiles": [[277, null]], "baybe.utils.chemistry.smiles_to_fp_features": [[278, null]], "baybe.utils.chemistry.smiles_to_molecules": [[279, null]], "baybe.utils.chemistry.smiles_to_mordred_features": [[280, null]], "baybe.utils.chemistry.smiles_to_rdkit_features": [[281, null]], "baybe.utils.conversion": [[282, null]], "baybe.utils.conversion.fraction_to_float": [[283, null]], "baybe.utils.dataframe": [[284, null]], "baybe.utils.dataframe.add_fake_results": [[285, null]], "baybe.utils.dataframe.add_parameter_noise": [[286, null]], "baybe.utils.dataframe.df_drop_single_value_columns": [[287, null]], "baybe.utils.dataframe.df_drop_string_columns": [[288, null]], "baybe.utils.dataframe.df_uncorrelated_features": [[289, null]], "baybe.utils.dataframe.fuzzy_row_match": [[290, null]], "baybe.utils.dataframe.pretty_print_df": [[291, null]], "baybe.utils.dataframe.to_tensor": [[292, null]], "baybe.utils.interval": [[293, null]], "baybe.utils.interval.InfiniteIntervalError": [[294, null]], "baybe.utils.interval.convert_bounds": [[296, null]], "baybe.utils.interval.use_fallback_constructor_hook": [[297, null]], "baybe.utils.memory": [[298, null]], "baybe.utils.memory.bytes_to_human_readable": [[299, null]], "baybe.utils.numerical": [[300, null]], "baybe.utils.numerical.DTypeFloatNumpy": [[301, null]], "baybe.utils.numerical.DTypeFloatONNX": [[302, null]], "baybe.utils.numerical.VARNAME_NUMPY_USE_SINGLE_PRECISION": [[303, null]], "baybe.utils.numerical.closer_element": [[304, null]], "baybe.utils.numerical.closest_element": [[305, null]], "baybe.utils.numerical.geom_mean": [[306, null]], "baybe.utils.plotting": [[307, null]], "baybe.utils.plotting.create_example_plots": [[308, null]], "baybe.utils.random": [[309, null]], "baybe.utils.random.set_random_seed": [[310, null]], "baybe.utils.random.temporary_seed": [[311, null]], "baybe.utils.sampling_algorithms": [[312, null]], "baybe.utils.sampling_algorithms.farthest_point_sampling": [[313, null]], "baybe.utils.torch": [[314, null]], "baybe.utils.torch.DTypeFloatTorch": [[315, null]], "baybe.utils.torch.VARNAME_TORCH_USE_SINGLE_PRECISION": [[316, null]], "baybe.utils.validation": [[317, null]], "baybe.utils.validation.finite_float": [[318, null]], "baybe.utils.validation.non_inf_float": [[319, null]], "baybe.utils.validation.non_nan_float": [[320, null]], "classproperty": [[259, null]], "qExpectedImprovement": [[8, null]], "qLogExpectedImprovement": [[9, null]], "qLogNoisyExpectedImprovement": [[10, null]], "qNoisyExpectedImprovement": [[11, null]], "qProbabilityOfImprovement": [[12, null]], "qSimpleRegret": [[13, null]], "qUpperConfidenceBound": [[14, null]], "\u201cPre-training\u201d stage": [[344, "pre-training-stage"]], "\u26a1 Quick Start": [[361, "quick-start"]], "\ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 Maintainers": [[361, "maintainers"]], "\ud83d\udcbb Installation": [[361, "installation"]], "\ud83d\udcc4 License": [[361, "license"]], "\ud83d\udce1 Telemetry": [[361, "telemetry"]], "\ud83d\udee0\ufe0f Known Issues": [[361, "known-issues"]]}, "docnames": ["_autosummary/baybe", "_autosummary/baybe.acquisition", "_autosummary/baybe.acquisition.acqfs", "_autosummary/baybe.acquisition.acqfs.ExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.LogExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.PosteriorMean", "_autosummary/baybe.acquisition.acqfs.ProbabilityOfImprovement", "_autosummary/baybe.acquisition.acqfs.UpperConfidenceBound", "_autosummary/baybe.acquisition.acqfs.qExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qLogExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qLogNoisyExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qNoisyExpectedImprovement", "_autosummary/baybe.acquisition.acqfs.qProbabilityOfImprovement", "_autosummary/baybe.acquisition.acqfs.qSimpleRegret", "_autosummary/baybe.acquisition.acqfs.qUpperConfidenceBound", "_autosummary/baybe.acquisition.base", "_autosummary/baybe.acquisition.base.AcquisitionFunction", "_autosummary/baybe.acquisition.partial", "_autosummary/baybe.acquisition.partial.PartialAcquisitionFunction", "_autosummary/baybe.acquisition.utils", "_autosummary/baybe.acquisition.utils.convert_acqf", "_autosummary/baybe.acquisition.utils.str_to_acqf", "_autosummary/baybe.campaign", "_autosummary/baybe.campaign.Campaign", "_autosummary/baybe.constraints", "_autosummary/baybe.constraints.base", "_autosummary/baybe.constraints.base.Constraint", "_autosummary/baybe.constraints.base.ContinuousConstraint", "_autosummary/baybe.constraints.base.DiscreteConstraint", "_autosummary/baybe.constraints.conditions", "_autosummary/baybe.constraints.conditions.Condition", "_autosummary/baybe.constraints.conditions.SubSelectionCondition", "_autosummary/baybe.constraints.conditions.ThresholdCondition", "_autosummary/baybe.constraints.continuous", "_autosummary/baybe.constraints.continuous.ContinuousLinearEqualityConstraint", "_autosummary/baybe.constraints.continuous.ContinuousLinearInequalityConstraint", "_autosummary/baybe.constraints.discrete", "_autosummary/baybe.constraints.discrete.DiscreteCustomConstraint", "_autosummary/baybe.constraints.discrete.DiscreteDependenciesConstraint", "_autosummary/baybe.constraints.discrete.DiscreteExcludeConstraint", "_autosummary/baybe.constraints.discrete.DiscreteLinkedParametersConstraint", "_autosummary/baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint", "_autosummary/baybe.constraints.discrete.DiscretePermutationInvarianceConstraint", "_autosummary/baybe.constraints.discrete.DiscreteProductConstraint", "_autosummary/baybe.constraints.discrete.DiscreteSumConstraint", "_autosummary/baybe.constraints.validation", "_autosummary/baybe.constraints.validation.validate_constraints", "_autosummary/baybe.deprecation", "_autosummary/baybe.deprecation.compatibilize_config", "_autosummary/baybe.exceptions", "_autosummary/baybe.exceptions.DeprecationError", "_autosummary/baybe.exceptions.EmptySearchSpaceError", "_autosummary/baybe.exceptions.IncompatibleSearchSpaceError", "_autosummary/baybe.exceptions.NoMCAcquisitionFunctionError", "_autosummary/baybe.exceptions.NoRecommendersLeftError", "_autosummary/baybe.exceptions.NotEnoughPointsLeftError", "_autosummary/baybe.exceptions.NothingToSimulateError", "_autosummary/baybe.exceptions.NumericalUnderflowError", "_autosummary/baybe.exceptions.OptionalImportError", "_autosummary/baybe.exceptions.UnidentifiedSubclassError", "_autosummary/baybe.kernels", "_autosummary/baybe.kernels.base", "_autosummary/baybe.kernels.base.Kernel", "_autosummary/baybe.kernels.basic", "_autosummary/baybe.kernels.basic.LinearKernel", "_autosummary/baybe.kernels.basic.MaternKernel", "_autosummary/baybe.kernels.basic.PeriodicKernel", "_autosummary/baybe.kernels.basic.PiecewisePolynomialKernel", "_autosummary/baybe.kernels.basic.PolynomialKernel", "_autosummary/baybe.kernels.basic.RBFKernel", "_autosummary/baybe.kernels.basic.RFFKernel", "_autosummary/baybe.kernels.basic.RQKernel", "_autosummary/baybe.kernels.composite", "_autosummary/baybe.kernels.composite.AdditiveKernel", "_autosummary/baybe.kernels.composite.ProductKernel", "_autosummary/baybe.kernels.composite.ScaleKernel", "_autosummary/baybe.objective", "_autosummary/baybe.objective.Objective", "_autosummary/baybe.objectives", "_autosummary/baybe.objectives.base", "_autosummary/baybe.objectives.base.Objective", "_autosummary/baybe.objectives.base.to_objective", "_autosummary/baybe.objectives.deprecation", "_autosummary/baybe.objectives.deprecation.structure_objective", "_autosummary/baybe.objectives.desirability", "_autosummary/baybe.objectives.desirability.DesirabilityObjective", "_autosummary/baybe.objectives.desirability.scalarize", "_autosummary/baybe.objectives.enum", "_autosummary/baybe.objectives.enum.Scalarizer", "_autosummary/baybe.objectives.single", "_autosummary/baybe.objectives.single.SingleTargetObjective", "_autosummary/baybe.parameters", "_autosummary/baybe.parameters.base", "_autosummary/baybe.parameters.base.ContinuousParameter", "_autosummary/baybe.parameters.base.DiscreteParameter", "_autosummary/baybe.parameters.base.Parameter", "_autosummary/baybe.parameters.categorical", "_autosummary/baybe.parameters.categorical.CategoricalParameter", "_autosummary/baybe.parameters.categorical.TaskParameter", "_autosummary/baybe.parameters.custom", "_autosummary/baybe.parameters.custom.CustomDiscreteParameter", "_autosummary/baybe.parameters.enum", "_autosummary/baybe.parameters.enum.CategoricalEncoding", "_autosummary/baybe.parameters.enum.CustomEncoding", "_autosummary/baybe.parameters.enum.ParameterEncoding", "_autosummary/baybe.parameters.enum.SubstanceEncoding", "_autosummary/baybe.parameters.numerical", "_autosummary/baybe.parameters.numerical.NumericalContinuousParameter", "_autosummary/baybe.parameters.numerical.NumericalDiscreteParameter", "_autosummary/baybe.parameters.substance", "_autosummary/baybe.parameters.substance.Smiles", "_autosummary/baybe.parameters.substance.SubstanceParameter", "_autosummary/baybe.parameters.utils", "_autosummary/baybe.parameters.utils.get_parameters_from_dataframe", "_autosummary/baybe.parameters.validation", "_autosummary/baybe.parameters.validation.validate_decorrelation", "_autosummary/baybe.parameters.validation.validate_is_finite", "_autosummary/baybe.parameters.validation.validate_unique_values", "_autosummary/baybe.priors", "_autosummary/baybe.priors.base", "_autosummary/baybe.priors.base.Prior", "_autosummary/baybe.priors.basic", "_autosummary/baybe.priors.basic.GammaPrior", "_autosummary/baybe.priors.basic.HalfCauchyPrior", "_autosummary/baybe.priors.basic.HalfNormalPrior", "_autosummary/baybe.priors.basic.LogNormalPrior", "_autosummary/baybe.priors.basic.NormalPrior", "_autosummary/baybe.priors.basic.SmoothedBoxPrior", "_autosummary/baybe.recommenders", "_autosummary/baybe.recommenders.base", "_autosummary/baybe.recommenders.base.RecommenderProtocol", "_autosummary/baybe.recommenders.deprecation", "_autosummary/baybe.recommenders.deprecation.structure_recommender_protocol", "_autosummary/baybe.recommenders.meta", "_autosummary/baybe.recommenders.meta.base", "_autosummary/baybe.recommenders.meta.base.MetaRecommender", "_autosummary/baybe.recommenders.meta.sequential", "_autosummary/baybe.recommenders.meta.sequential.SequentialMetaRecommender", "_autosummary/baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender", "_autosummary/baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender", "_autosummary/baybe.recommenders.naive", "_autosummary/baybe.recommenders.naive.NaiveHybridSpaceRecommender", "_autosummary/baybe.recommenders.pure", "_autosummary/baybe.recommenders.pure.base", "_autosummary/baybe.recommenders.pure.base.PureRecommender", "_autosummary/baybe.recommenders.pure.bayesian", "_autosummary/baybe.recommenders.pure.bayesian.base", "_autosummary/baybe.recommenders.pure.bayesian.base.BayesianRecommender", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive", "_autosummary/baybe.recommenders.pure.nonpredictive.base", "_autosummary/baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender", "_autosummary/baybe.scaler", "_autosummary/baybe.scaler.DefaultScaler", "_autosummary/baybe.scaler.Scaler", "_autosummary/baybe.searchspace", "_autosummary/baybe.searchspace.continuous", "_autosummary/baybe.searchspace.continuous.SubspaceContinuous", "_autosummary/baybe.searchspace.core", "_autosummary/baybe.searchspace.core.SearchSpace", "_autosummary/baybe.searchspace.core.SearchSpaceType", "_autosummary/baybe.searchspace.core.validate_searchspace_from_config", "_autosummary/baybe.searchspace.discrete", "_autosummary/baybe.searchspace.discrete.MemorySize", "_autosummary/baybe.searchspace.discrete.SubspaceDiscrete", "_autosummary/baybe.searchspace.discrete.parameter_cartesian_prod_to_df", "_autosummary/baybe.searchspace.discrete.validate_simplex_subspace_from_config", "_autosummary/baybe.searchspace.validation", "_autosummary/baybe.searchspace.validation.validate_parameter_names", "_autosummary/baybe.searchspace.validation.validate_parameters", "_autosummary/baybe.serialization", "_autosummary/baybe.serialization.core", "_autosummary/baybe.serialization.core.block_deserialization_hook", "_autosummary/baybe.serialization.core.block_serialization_hook", "_autosummary/baybe.serialization.core.converter", "_autosummary/baybe.serialization.core.get_base_structure_hook", "_autosummary/baybe.serialization.core.select_constructor_hook", "_autosummary/baybe.serialization.core.unstructure_base", "_autosummary/baybe.serialization.mixin", "_autosummary/baybe.serialization.mixin.SerialMixin", "_autosummary/baybe.serialization.utils", "_autosummary/baybe.serialization.utils.deserialize_dataframe", "_autosummary/baybe.serialization.utils.serialize_dataframe", "_autosummary/baybe.simulation", "_autosummary/baybe.simulation.core", "_autosummary/baybe.simulation.core.simulate_experiment", "_autosummary/baybe.simulation.lookup", "_autosummary/baybe.simulation.scenarios", "_autosummary/baybe.simulation.scenarios.simulate_scenarios", "_autosummary/baybe.simulation.transfer_learning", "_autosummary/baybe.simulation.transfer_learning.simulate_transfer_learning", "_autosummary/baybe.strategies", "_autosummary/baybe.strategies.deprecation", "_autosummary/baybe.strategies.deprecation.SequentialStrategy", "_autosummary/baybe.strategies.deprecation.StreamingSequentialStrategy", "_autosummary/baybe.strategies.deprecation.TwoPhaseStrategy", "_autosummary/baybe.surrogates", "_autosummary/baybe.surrogates.base", "_autosummary/baybe.surrogates.base.Surrogate", "_autosummary/baybe.surrogates.custom", "_autosummary/baybe.surrogates.custom.CustomONNXSurrogate", "_autosummary/baybe.surrogates.custom.register_custom_architecture", "_autosummary/baybe.surrogates.gaussian_process", "_autosummary/baybe.surrogates.gaussian_process.core", "_autosummary/baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.KernelFactory", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.to_kernel_factory", "_autosummary/baybe.surrogates.gaussian_process.presets", "_autosummary/baybe.surrogates.gaussian_process.presets.core", "_autosummary/baybe.surrogates.gaussian_process.presets.core.GaussianProcessPreset", "_autosummary/baybe.surrogates.gaussian_process.presets.core.make_gp_from_preset", "_autosummary/baybe.surrogates.gaussian_process.presets.default", "_autosummary/baybe.surrogates.gaussian_process.presets.default.DefaultKernelFactory", "_autosummary/baybe.surrogates.linear", "_autosummary/baybe.surrogates.linear.BayesianLinearSurrogate", "_autosummary/baybe.surrogates.naive", "_autosummary/baybe.surrogates.naive.MeanPredictionSurrogate", "_autosummary/baybe.surrogates.ngboost", "_autosummary/baybe.surrogates.ngboost.NGBoostSurrogate", "_autosummary/baybe.surrogates.random_forest", "_autosummary/baybe.surrogates.random_forest.RandomForestSurrogate", "_autosummary/baybe.surrogates.utils", "_autosummary/baybe.surrogates.utils.autoscale", "_autosummary/baybe.surrogates.utils.batchify", "_autosummary/baybe.surrogates.utils.catch_constant_targets", "_autosummary/baybe.surrogates.validation", "_autosummary/baybe.surrogates.validation.get_model_params_validator", "_autosummary/baybe.surrogates.validation.validate_custom_architecture_cls", "_autosummary/baybe.targets", "_autosummary/baybe.targets.base", "_autosummary/baybe.targets.base.Target", "_autosummary/baybe.targets.enum", "_autosummary/baybe.targets.enum.TargetMode", "_autosummary/baybe.targets.enum.TargetTransformation", "_autosummary/baybe.targets.numerical", "_autosummary/baybe.targets.numerical.NumericalTarget", "_autosummary/baybe.targets.transforms", "_autosummary/baybe.targets.transforms.bell_transform", "_autosummary/baybe.targets.transforms.linear_transform", "_autosummary/baybe.targets.transforms.triangular_transform", "_autosummary/baybe.telemetry", "_autosummary/baybe.telemetry.get_user_details", "_autosummary/baybe.telemetry.is_enabled", "_autosummary/baybe.telemetry.telemetry_record_recommended_measurement_percentage", "_autosummary/baybe.telemetry.telemetry_record_value", "_autosummary/baybe.utils", "_autosummary/baybe.utils.basic", "_autosummary/baybe.utils.basic.Dummy", "_autosummary/baybe.utils.basic.classproperty", "_autosummary/baybe.utils.basic.filter_attributes", "_autosummary/baybe.utils.basic.find_subclass", "_autosummary/baybe.utils.basic.get_baseclasses", "_autosummary/baybe.utils.basic.get_subclasses", "_autosummary/baybe.utils.basic.group_duplicate_values", "_autosummary/baybe.utils.basic.hilberts_factory", "_autosummary/baybe.utils.basic.refers_to", "_autosummary/baybe.utils.basic.to_tuple", "_autosummary/baybe.utils.boolean", "_autosummary/baybe.utils.boolean.check_if_in", "_autosummary/baybe.utils.boolean.is_abstract", "_autosummary/baybe.utils.boolean.strtobool", "_autosummary/baybe.utils.botorch_wrapper", "_autosummary/baybe.utils.botorch_wrapper.botorch_function_wrapper", "_autosummary/baybe.utils.chemistry", "_autosummary/baybe.utils.chemistry.get_canonical_smiles", "_autosummary/baybe.utils.chemistry.is_valid_smiles", "_autosummary/baybe.utils.chemistry.name_to_smiles", "_autosummary/baybe.utils.chemistry.smiles_to_fp_features", "_autosummary/baybe.utils.chemistry.smiles_to_molecules", "_autosummary/baybe.utils.chemistry.smiles_to_mordred_features", "_autosummary/baybe.utils.chemistry.smiles_to_rdkit_features", "_autosummary/baybe.utils.conversion", "_autosummary/baybe.utils.conversion.fraction_to_float", "_autosummary/baybe.utils.dataframe", "_autosummary/baybe.utils.dataframe.add_fake_results", "_autosummary/baybe.utils.dataframe.add_parameter_noise", "_autosummary/baybe.utils.dataframe.df_drop_single_value_columns", "_autosummary/baybe.utils.dataframe.df_drop_string_columns", "_autosummary/baybe.utils.dataframe.df_uncorrelated_features", "_autosummary/baybe.utils.dataframe.fuzzy_row_match", "_autosummary/baybe.utils.dataframe.pretty_print_df", "_autosummary/baybe.utils.dataframe.to_tensor", "_autosummary/baybe.utils.interval", "_autosummary/baybe.utils.interval.InfiniteIntervalError", "_autosummary/baybe.utils.interval.Interval", "_autosummary/baybe.utils.interval.convert_bounds", "_autosummary/baybe.utils.interval.use_fallback_constructor_hook", "_autosummary/baybe.utils.memory", "_autosummary/baybe.utils.memory.bytes_to_human_readable", "_autosummary/baybe.utils.numerical", "_autosummary/baybe.utils.numerical.DTypeFloatNumpy", "_autosummary/baybe.utils.numerical.DTypeFloatONNX", "_autosummary/baybe.utils.numerical.VARNAME_NUMPY_USE_SINGLE_PRECISION", "_autosummary/baybe.utils.numerical.closer_element", "_autosummary/baybe.utils.numerical.closest_element", "_autosummary/baybe.utils.numerical.geom_mean", "_autosummary/baybe.utils.plotting", "_autosummary/baybe.utils.plotting.create_example_plots", "_autosummary/baybe.utils.random", "_autosummary/baybe.utils.random.set_random_seed", "_autosummary/baybe.utils.random.temporary_seed", "_autosummary/baybe.utils.sampling_algorithms", "_autosummary/baybe.utils.sampling_algorithms.farthest_point_sampling", "_autosummary/baybe.utils.torch", "_autosummary/baybe.utils.torch.DTypeFloatTorch", "_autosummary/baybe.utils.torch.VARNAME_TORCH_USE_SINGLE_PRECISION", "_autosummary/baybe.utils.validation", "_autosummary/baybe.utils.validation.finite_float", "_autosummary/baybe.utils.validation.non_inf_float", "_autosummary/baybe.utils.validation.non_nan_float", "examples/Backtesting/Backtesting", "examples/Backtesting/botorch_analytical", "examples/Backtesting/custom_analytical", "examples/Backtesting/full_initial_data", "examples/Backtesting/full_lookup", "examples/Backtesting/hybrid", "examples/Backtesting/impute_mode", "examples/Backtesting/multi_target", "examples/Basics/Basics", "examples/Basics/campaign", "examples/Basics/recommenders", "examples/Constraints_Continuous/Constraints_Continuous", "examples/Constraints_Continuous/hybrid_space", "examples/Constraints_Continuous/linear_constraints", "examples/Constraints_Discrete/Constraints_Discrete", "examples/Constraints_Discrete/custom_constraints", "examples/Constraints_Discrete/dependency_constraints", "examples/Constraints_Discrete/exclusion_constraints", "examples/Constraints_Discrete/mixture_constraints", "examples/Constraints_Discrete/prodsum_constraints", "examples/Custom_Surrogates/Custom_Surrogates", "examples/Custom_Surrogates/custom_architecture_sklearn", "examples/Custom_Surrogates/custom_architecture_torch", "examples/Custom_Surrogates/custom_pretrained", "examples/Custom_Surrogates/surrogate_params", "examples/Multi_Target/Multi_Target", "examples/Multi_Target/desirability", "examples/Searchspaces/Searchspaces", "examples/Searchspaces/continuous_space_botorch_function", "examples/Searchspaces/continuous_space_custom_function", "examples/Searchspaces/discrete_space", "examples/Searchspaces/hybrid_space", "examples/Serialization/Serialization", "examples/Serialization/basic_serialization", "examples/Serialization/create_from_config", "examples/Serialization/validate_config", "examples/Transfer_Learning/Transfer_Learning", "examples/Transfer_Learning/backtesting", "examples/Transfer_Learning/basic_transfer_learning", "examples/examples", "index", "known_issues", "misc/changelog_link", "misc/contributing_link", "misc/contributors_link", "misc/license_link", "userguide/campaigns", "userguide/constraints", "userguide/envvars", "userguide/objectives", "userguide/parameters", "userguide/recommenders", "userguide/searchspace", "userguide/serialization", "userguide/simulation", "userguide/surrogates", "userguide/targets", "userguide/transfer_learning", "userguide/userguide"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/baybe.rst", "_autosummary/baybe.acquisition.rst", "_autosummary/baybe.acquisition.acqfs.rst", "_autosummary/baybe.acquisition.acqfs.ExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.LogExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.PosteriorMean.rst", "_autosummary/baybe.acquisition.acqfs.ProbabilityOfImprovement.rst", "_autosummary/baybe.acquisition.acqfs.UpperConfidenceBound.rst", "_autosummary/baybe.acquisition.acqfs.qExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qLogExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qNoisyExpectedImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qProbabilityOfImprovement.rst", "_autosummary/baybe.acquisition.acqfs.qSimpleRegret.rst", "_autosummary/baybe.acquisition.acqfs.qUpperConfidenceBound.rst", "_autosummary/baybe.acquisition.base.rst", "_autosummary/baybe.acquisition.base.AcquisitionFunction.rst", "_autosummary/baybe.acquisition.partial.rst", "_autosummary/baybe.acquisition.partial.PartialAcquisitionFunction.rst", "_autosummary/baybe.acquisition.utils.rst", "_autosummary/baybe.acquisition.utils.convert_acqf.rst", "_autosummary/baybe.acquisition.utils.str_to_acqf.rst", "_autosummary/baybe.campaign.rst", "_autosummary/baybe.campaign.Campaign.rst", "_autosummary/baybe.constraints.rst", "_autosummary/baybe.constraints.base.rst", "_autosummary/baybe.constraints.base.Constraint.rst", "_autosummary/baybe.constraints.base.ContinuousConstraint.rst", "_autosummary/baybe.constraints.base.DiscreteConstraint.rst", "_autosummary/baybe.constraints.conditions.rst", "_autosummary/baybe.constraints.conditions.Condition.rst", "_autosummary/baybe.constraints.conditions.SubSelectionCondition.rst", "_autosummary/baybe.constraints.conditions.ThresholdCondition.rst", "_autosummary/baybe.constraints.continuous.rst", "_autosummary/baybe.constraints.continuous.ContinuousLinearEqualityConstraint.rst", "_autosummary/baybe.constraints.continuous.ContinuousLinearInequalityConstraint.rst", "_autosummary/baybe.constraints.discrete.rst", "_autosummary/baybe.constraints.discrete.DiscreteCustomConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteDependenciesConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteExcludeConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteLinkedParametersConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteProductConstraint.rst", "_autosummary/baybe.constraints.discrete.DiscreteSumConstraint.rst", "_autosummary/baybe.constraints.validation.rst", "_autosummary/baybe.constraints.validation.validate_constraints.rst", "_autosummary/baybe.deprecation.rst", "_autosummary/baybe.deprecation.compatibilize_config.rst", "_autosummary/baybe.exceptions.rst", "_autosummary/baybe.exceptions.DeprecationError.rst", "_autosummary/baybe.exceptions.EmptySearchSpaceError.rst", "_autosummary/baybe.exceptions.IncompatibleSearchSpaceError.rst", "_autosummary/baybe.exceptions.NoMCAcquisitionFunctionError.rst", "_autosummary/baybe.exceptions.NoRecommendersLeftError.rst", "_autosummary/baybe.exceptions.NotEnoughPointsLeftError.rst", "_autosummary/baybe.exceptions.NothingToSimulateError.rst", "_autosummary/baybe.exceptions.NumericalUnderflowError.rst", "_autosummary/baybe.exceptions.OptionalImportError.rst", "_autosummary/baybe.exceptions.UnidentifiedSubclassError.rst", "_autosummary/baybe.kernels.rst", "_autosummary/baybe.kernels.base.rst", "_autosummary/baybe.kernels.base.Kernel.rst", "_autosummary/baybe.kernels.basic.rst", "_autosummary/baybe.kernels.basic.LinearKernel.rst", "_autosummary/baybe.kernels.basic.MaternKernel.rst", "_autosummary/baybe.kernels.basic.PeriodicKernel.rst", "_autosummary/baybe.kernels.basic.PiecewisePolynomialKernel.rst", "_autosummary/baybe.kernels.basic.PolynomialKernel.rst", "_autosummary/baybe.kernels.basic.RBFKernel.rst", "_autosummary/baybe.kernels.basic.RFFKernel.rst", "_autosummary/baybe.kernels.basic.RQKernel.rst", "_autosummary/baybe.kernels.composite.rst", "_autosummary/baybe.kernels.composite.AdditiveKernel.rst", "_autosummary/baybe.kernels.composite.ProductKernel.rst", "_autosummary/baybe.kernels.composite.ScaleKernel.rst", "_autosummary/baybe.objective.rst", "_autosummary/baybe.objective.Objective.rst", "_autosummary/baybe.objectives.rst", "_autosummary/baybe.objectives.base.rst", "_autosummary/baybe.objectives.base.Objective.rst", "_autosummary/baybe.objectives.base.to_objective.rst", "_autosummary/baybe.objectives.deprecation.rst", "_autosummary/baybe.objectives.deprecation.structure_objective.rst", "_autosummary/baybe.objectives.desirability.rst", "_autosummary/baybe.objectives.desirability.DesirabilityObjective.rst", "_autosummary/baybe.objectives.desirability.scalarize.rst", "_autosummary/baybe.objectives.enum.rst", "_autosummary/baybe.objectives.enum.Scalarizer.rst", "_autosummary/baybe.objectives.single.rst", "_autosummary/baybe.objectives.single.SingleTargetObjective.rst", "_autosummary/baybe.parameters.rst", "_autosummary/baybe.parameters.base.rst", "_autosummary/baybe.parameters.base.ContinuousParameter.rst", "_autosummary/baybe.parameters.base.DiscreteParameter.rst", "_autosummary/baybe.parameters.base.Parameter.rst", "_autosummary/baybe.parameters.categorical.rst", "_autosummary/baybe.parameters.categorical.CategoricalParameter.rst", "_autosummary/baybe.parameters.categorical.TaskParameter.rst", "_autosummary/baybe.parameters.custom.rst", "_autosummary/baybe.parameters.custom.CustomDiscreteParameter.rst", "_autosummary/baybe.parameters.enum.rst", "_autosummary/baybe.parameters.enum.CategoricalEncoding.rst", "_autosummary/baybe.parameters.enum.CustomEncoding.rst", "_autosummary/baybe.parameters.enum.ParameterEncoding.rst", "_autosummary/baybe.parameters.enum.SubstanceEncoding.rst", "_autosummary/baybe.parameters.numerical.rst", "_autosummary/baybe.parameters.numerical.NumericalContinuousParameter.rst", "_autosummary/baybe.parameters.numerical.NumericalDiscreteParameter.rst", "_autosummary/baybe.parameters.substance.rst", "_autosummary/baybe.parameters.substance.Smiles.rst", "_autosummary/baybe.parameters.substance.SubstanceParameter.rst", "_autosummary/baybe.parameters.utils.rst", "_autosummary/baybe.parameters.utils.get_parameters_from_dataframe.rst", "_autosummary/baybe.parameters.validation.rst", "_autosummary/baybe.parameters.validation.validate_decorrelation.rst", "_autosummary/baybe.parameters.validation.validate_is_finite.rst", "_autosummary/baybe.parameters.validation.validate_unique_values.rst", "_autosummary/baybe.priors.rst", "_autosummary/baybe.priors.base.rst", "_autosummary/baybe.priors.base.Prior.rst", "_autosummary/baybe.priors.basic.rst", "_autosummary/baybe.priors.basic.GammaPrior.rst", "_autosummary/baybe.priors.basic.HalfCauchyPrior.rst", "_autosummary/baybe.priors.basic.HalfNormalPrior.rst", "_autosummary/baybe.priors.basic.LogNormalPrior.rst", "_autosummary/baybe.priors.basic.NormalPrior.rst", "_autosummary/baybe.priors.basic.SmoothedBoxPrior.rst", "_autosummary/baybe.recommenders.rst", "_autosummary/baybe.recommenders.base.rst", "_autosummary/baybe.recommenders.base.RecommenderProtocol.rst", "_autosummary/baybe.recommenders.deprecation.rst", "_autosummary/baybe.recommenders.deprecation.structure_recommender_protocol.rst", "_autosummary/baybe.recommenders.meta.rst", "_autosummary/baybe.recommenders.meta.base.rst", "_autosummary/baybe.recommenders.meta.base.MetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.rst", "_autosummary/baybe.recommenders.meta.sequential.SequentialMetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.rst", "_autosummary/baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.rst", "_autosummary/baybe.recommenders.naive.rst", "_autosummary/baybe.recommenders.naive.NaiveHybridSpaceRecommender.rst", "_autosummary/baybe.recommenders.pure.rst", "_autosummary/baybe.recommenders.pure.base.rst", "_autosummary/baybe.recommenders.pure.base.PureRecommender.rst", "_autosummary/baybe.recommenders.pure.bayesian.rst", "_autosummary/baybe.recommenders.pure.bayesian.base.rst", "_autosummary/baybe.recommenders.pure.bayesian.base.BayesianRecommender.rst", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.rst", "_autosummary/baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.base.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.rst", "_autosummary/baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.rst", "_autosummary/baybe.scaler.rst", "_autosummary/baybe.scaler.DefaultScaler.rst", "_autosummary/baybe.scaler.Scaler.rst", "_autosummary/baybe.searchspace.rst", "_autosummary/baybe.searchspace.continuous.rst", "_autosummary/baybe.searchspace.continuous.SubspaceContinuous.rst", "_autosummary/baybe.searchspace.core.rst", "_autosummary/baybe.searchspace.core.SearchSpace.rst", "_autosummary/baybe.searchspace.core.SearchSpaceType.rst", "_autosummary/baybe.searchspace.core.validate_searchspace_from_config.rst", "_autosummary/baybe.searchspace.discrete.rst", "_autosummary/baybe.searchspace.discrete.MemorySize.rst", "_autosummary/baybe.searchspace.discrete.SubspaceDiscrete.rst", "_autosummary/baybe.searchspace.discrete.parameter_cartesian_prod_to_df.rst", "_autosummary/baybe.searchspace.discrete.validate_simplex_subspace_from_config.rst", "_autosummary/baybe.searchspace.validation.rst", "_autosummary/baybe.searchspace.validation.validate_parameter_names.rst", "_autosummary/baybe.searchspace.validation.validate_parameters.rst", "_autosummary/baybe.serialization.rst", "_autosummary/baybe.serialization.core.rst", "_autosummary/baybe.serialization.core.block_deserialization_hook.rst", "_autosummary/baybe.serialization.core.block_serialization_hook.rst", "_autosummary/baybe.serialization.core.converter.rst", "_autosummary/baybe.serialization.core.get_base_structure_hook.rst", "_autosummary/baybe.serialization.core.select_constructor_hook.rst", "_autosummary/baybe.serialization.core.unstructure_base.rst", "_autosummary/baybe.serialization.mixin.rst", "_autosummary/baybe.serialization.mixin.SerialMixin.rst", "_autosummary/baybe.serialization.utils.rst", "_autosummary/baybe.serialization.utils.deserialize_dataframe.rst", "_autosummary/baybe.serialization.utils.serialize_dataframe.rst", "_autosummary/baybe.simulation.rst", "_autosummary/baybe.simulation.core.rst", "_autosummary/baybe.simulation.core.simulate_experiment.rst", "_autosummary/baybe.simulation.lookup.rst", "_autosummary/baybe.simulation.scenarios.rst", "_autosummary/baybe.simulation.scenarios.simulate_scenarios.rst", "_autosummary/baybe.simulation.transfer_learning.rst", "_autosummary/baybe.simulation.transfer_learning.simulate_transfer_learning.rst", "_autosummary/baybe.strategies.rst", "_autosummary/baybe.strategies.deprecation.rst", "_autosummary/baybe.strategies.deprecation.SequentialStrategy.rst", "_autosummary/baybe.strategies.deprecation.StreamingSequentialStrategy.rst", "_autosummary/baybe.strategies.deprecation.TwoPhaseStrategy.rst", "_autosummary/baybe.surrogates.rst", "_autosummary/baybe.surrogates.base.rst", "_autosummary/baybe.surrogates.base.Surrogate.rst", "_autosummary/baybe.surrogates.custom.rst", "_autosummary/baybe.surrogates.custom.CustomONNXSurrogate.rst", "_autosummary/baybe.surrogates.custom.register_custom_architecture.rst", "_autosummary/baybe.surrogates.gaussian_process.rst", "_autosummary/baybe.surrogates.gaussian_process.core.rst", "_autosummary/baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.rst", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.rst", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.KernelFactory.rst", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.rst", "_autosummary/baybe.surrogates.gaussian_process.kernel_factory.to_kernel_factory.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.core.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.core.GaussianProcessPreset.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.core.make_gp_from_preset.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.default.rst", "_autosummary/baybe.surrogates.gaussian_process.presets.default.DefaultKernelFactory.rst", "_autosummary/baybe.surrogates.linear.rst", "_autosummary/baybe.surrogates.linear.BayesianLinearSurrogate.rst", "_autosummary/baybe.surrogates.naive.rst", "_autosummary/baybe.surrogates.naive.MeanPredictionSurrogate.rst", "_autosummary/baybe.surrogates.ngboost.rst", "_autosummary/baybe.surrogates.ngboost.NGBoostSurrogate.rst", "_autosummary/baybe.surrogates.random_forest.rst", "_autosummary/baybe.surrogates.random_forest.RandomForestSurrogate.rst", "_autosummary/baybe.surrogates.utils.rst", "_autosummary/baybe.surrogates.utils.autoscale.rst", "_autosummary/baybe.surrogates.utils.batchify.rst", "_autosummary/baybe.surrogates.utils.catch_constant_targets.rst", "_autosummary/baybe.surrogates.validation.rst", "_autosummary/baybe.surrogates.validation.get_model_params_validator.rst", "_autosummary/baybe.surrogates.validation.validate_custom_architecture_cls.rst", "_autosummary/baybe.targets.rst", "_autosummary/baybe.targets.base.rst", "_autosummary/baybe.targets.base.Target.rst", "_autosummary/baybe.targets.enum.rst", "_autosummary/baybe.targets.enum.TargetMode.rst", "_autosummary/baybe.targets.enum.TargetTransformation.rst", "_autosummary/baybe.targets.numerical.rst", "_autosummary/baybe.targets.numerical.NumericalTarget.rst", "_autosummary/baybe.targets.transforms.rst", "_autosummary/baybe.targets.transforms.bell_transform.rst", "_autosummary/baybe.targets.transforms.linear_transform.rst", "_autosummary/baybe.targets.transforms.triangular_transform.rst", "_autosummary/baybe.telemetry.rst", "_autosummary/baybe.telemetry.get_user_details.rst", "_autosummary/baybe.telemetry.is_enabled.rst", "_autosummary/baybe.telemetry.telemetry_record_recommended_measurement_percentage.rst", "_autosummary/baybe.telemetry.telemetry_record_value.rst", "_autosummary/baybe.utils.rst", "_autosummary/baybe.utils.basic.rst", "_autosummary/baybe.utils.basic.Dummy.rst", "_autosummary/baybe.utils.basic.classproperty.rst", "_autosummary/baybe.utils.basic.filter_attributes.rst", "_autosummary/baybe.utils.basic.find_subclass.rst", "_autosummary/baybe.utils.basic.get_baseclasses.rst", "_autosummary/baybe.utils.basic.get_subclasses.rst", "_autosummary/baybe.utils.basic.group_duplicate_values.rst", "_autosummary/baybe.utils.basic.hilberts_factory.rst", "_autosummary/baybe.utils.basic.refers_to.rst", "_autosummary/baybe.utils.basic.to_tuple.rst", "_autosummary/baybe.utils.boolean.rst", "_autosummary/baybe.utils.boolean.check_if_in.rst", "_autosummary/baybe.utils.boolean.is_abstract.rst", "_autosummary/baybe.utils.boolean.strtobool.rst", "_autosummary/baybe.utils.botorch_wrapper.rst", "_autosummary/baybe.utils.botorch_wrapper.botorch_function_wrapper.rst", "_autosummary/baybe.utils.chemistry.rst", "_autosummary/baybe.utils.chemistry.get_canonical_smiles.rst", "_autosummary/baybe.utils.chemistry.is_valid_smiles.rst", "_autosummary/baybe.utils.chemistry.name_to_smiles.rst", "_autosummary/baybe.utils.chemistry.smiles_to_fp_features.rst", "_autosummary/baybe.utils.chemistry.smiles_to_molecules.rst", "_autosummary/baybe.utils.chemistry.smiles_to_mordred_features.rst", "_autosummary/baybe.utils.chemistry.smiles_to_rdkit_features.rst", "_autosummary/baybe.utils.conversion.rst", "_autosummary/baybe.utils.conversion.fraction_to_float.rst", "_autosummary/baybe.utils.dataframe.rst", "_autosummary/baybe.utils.dataframe.add_fake_results.rst", "_autosummary/baybe.utils.dataframe.add_parameter_noise.rst", "_autosummary/baybe.utils.dataframe.df_drop_single_value_columns.rst", "_autosummary/baybe.utils.dataframe.df_drop_string_columns.rst", "_autosummary/baybe.utils.dataframe.df_uncorrelated_features.rst", "_autosummary/baybe.utils.dataframe.fuzzy_row_match.rst", "_autosummary/baybe.utils.dataframe.pretty_print_df.rst", "_autosummary/baybe.utils.dataframe.to_tensor.rst", "_autosummary/baybe.utils.interval.rst", "_autosummary/baybe.utils.interval.InfiniteIntervalError.rst", "_autosummary/baybe.utils.interval.Interval.rst", "_autosummary/baybe.utils.interval.convert_bounds.rst", "_autosummary/baybe.utils.interval.use_fallback_constructor_hook.rst", "_autosummary/baybe.utils.memory.rst", "_autosummary/baybe.utils.memory.bytes_to_human_readable.rst", "_autosummary/baybe.utils.numerical.rst", "_autosummary/baybe.utils.numerical.DTypeFloatNumpy.rst", "_autosummary/baybe.utils.numerical.DTypeFloatONNX.rst", "_autosummary/baybe.utils.numerical.VARNAME_NUMPY_USE_SINGLE_PRECISION.rst", "_autosummary/baybe.utils.numerical.closer_element.rst", "_autosummary/baybe.utils.numerical.closest_element.rst", "_autosummary/baybe.utils.numerical.geom_mean.rst", "_autosummary/baybe.utils.plotting.rst", "_autosummary/baybe.utils.plotting.create_example_plots.rst", "_autosummary/baybe.utils.random.rst", "_autosummary/baybe.utils.random.set_random_seed.rst", "_autosummary/baybe.utils.random.temporary_seed.rst", "_autosummary/baybe.utils.sampling_algorithms.rst", "_autosummary/baybe.utils.sampling_algorithms.farthest_point_sampling.rst", "_autosummary/baybe.utils.torch.rst", "_autosummary/baybe.utils.torch.DTypeFloatTorch.rst", "_autosummary/baybe.utils.torch.VARNAME_TORCH_USE_SINGLE_PRECISION.rst", "_autosummary/baybe.utils.validation.rst", "_autosummary/baybe.utils.validation.finite_float.rst", "_autosummary/baybe.utils.validation.non_inf_float.rst", "_autosummary/baybe.utils.validation.non_nan_float.rst", "examples/Backtesting/Backtesting.md", "examples/Backtesting/botorch_analytical.md", "examples/Backtesting/custom_analytical.md", "examples/Backtesting/full_initial_data.md", "examples/Backtesting/full_lookup.md", "examples/Backtesting/hybrid.md", "examples/Backtesting/impute_mode.md", "examples/Backtesting/multi_target.md", "examples/Basics/Basics.md", "examples/Basics/campaign.md", "examples/Basics/recommenders.md", "examples/Constraints_Continuous/Constraints_Continuous.md", "examples/Constraints_Continuous/hybrid_space.md", "examples/Constraints_Continuous/linear_constraints.md", "examples/Constraints_Discrete/Constraints_Discrete.md", "examples/Constraints_Discrete/custom_constraints.md", "examples/Constraints_Discrete/dependency_constraints.md", "examples/Constraints_Discrete/exclusion_constraints.md", "examples/Constraints_Discrete/mixture_constraints.md", "examples/Constraints_Discrete/prodsum_constraints.md", "examples/Custom_Surrogates/Custom_Surrogates.md", "examples/Custom_Surrogates/custom_architecture_sklearn.md", "examples/Custom_Surrogates/custom_architecture_torch.md", "examples/Custom_Surrogates/custom_pretrained.md", "examples/Custom_Surrogates/surrogate_params.md", "examples/Multi_Target/Multi_Target.md", "examples/Multi_Target/desirability.md", "examples/Searchspaces/Searchspaces.md", "examples/Searchspaces/continuous_space_botorch_function.md", "examples/Searchspaces/continuous_space_custom_function.md", "examples/Searchspaces/discrete_space.md", "examples/Searchspaces/hybrid_space.md", "examples/Serialization/Serialization.md", "examples/Serialization/basic_serialization.md", "examples/Serialization/create_from_config.md", "examples/Serialization/validate_config.md", "examples/Transfer_Learning/Transfer_Learning.md", "examples/Transfer_Learning/backtesting.md", "examples/Transfer_Learning/basic_transfer_learning.md", "examples/examples.md", "index.md", "known_issues.md", "misc/changelog_link.md", "misc/contributing_link.md", "misc/contributors_link.md", "misc/license_link.md", "userguide/campaigns.md", "userguide/constraints.md", "userguide/envvars.md", "userguide/objectives.md", "userguide/parameters.md", "userguide/recommenders.md", "userguide/searchspace.md", "userguide/serialization.md", "userguide/simulation.md", "userguide/surrogates.md", "userguide/targets.md", "userguide/transfer_learning.md", "userguide/userguide.md"], "indexentries": {"__init__() (baybe.acquisition.acqfs.expectedimprovement method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.logexpectedimprovement method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.posteriormean method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.__init__", false]], "__init__() (baybe.acquisition.acqfs.probabilityofimprovement method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qexpectedimprovement method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qlogexpectedimprovement method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qnoisyexpectedimprovement method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qprobabilityofimprovement method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.__init__", false]], "__init__() (baybe.acquisition.acqfs.qsimpleregret method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.__init__", false]], "__init__() (baybe.acquisition.acqfs.qupperconfidencebound method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.__init__", false]], "__init__() (baybe.acquisition.acqfs.upperconfidencebound method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.__init__", false]], "__init__() (baybe.acquisition.base.acquisitionfunction method)": [[16, "baybe.acquisition.base.AcquisitionFunction.__init__", false]], "__init__() (baybe.acquisition.partial.partialacquisitionfunction method)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction.__init__", false]], "__init__() (baybe.campaign.campaign method)": [[23, "baybe.campaign.Campaign.__init__", false]], "__init__() (baybe.constraints.base.constraint method)": [[26, "baybe.constraints.base.Constraint.__init__", false]], "__init__() (baybe.constraints.base.continuousconstraint method)": [[27, "baybe.constraints.base.ContinuousConstraint.__init__", false]], "__init__() (baybe.constraints.base.discreteconstraint method)": [[28, "baybe.constraints.base.DiscreteConstraint.__init__", false]], "__init__() (baybe.constraints.conditions.subselectioncondition method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.__init__", false]], "__init__() (baybe.constraints.conditions.thresholdcondition method)": [[32, "baybe.constraints.conditions.ThresholdCondition.__init__", false]], "__init__() (baybe.constraints.continuous.continuouslinearequalityconstraint method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.__init__", false]], "__init__() (baybe.constraints.continuous.continuouslinearinequalityconstraint method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretecustomconstraint method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretedependenciesconstraint method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discreteexcludeconstraint method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretelinkedparametersconstraint method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretenolabelduplicatesconstraint method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretepermutationinvarianceconstraint method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discreteproductconstraint method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.__init__", false]], "__init__() (baybe.constraints.discrete.discretesumconstraint method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.__init__", false]], "__init__() (baybe.exceptions.deprecationerror method)": [[50, "baybe.exceptions.DeprecationError.__init__", false]], "__init__() (baybe.exceptions.emptysearchspaceerror method)": [[51, "baybe.exceptions.EmptySearchSpaceError.__init__", false]], "__init__() (baybe.exceptions.incompatiblesearchspaceerror method)": [[52, "baybe.exceptions.IncompatibleSearchSpaceError.__init__", false]], "__init__() (baybe.exceptions.nomcacquisitionfunctionerror method)": [[53, "baybe.exceptions.NoMCAcquisitionFunctionError.__init__", false]], "__init__() (baybe.exceptions.norecommenderslefterror method)": [[54, "baybe.exceptions.NoRecommendersLeftError.__init__", false]], "__init__() (baybe.exceptions.notenoughpointslefterror method)": [[55, "baybe.exceptions.NotEnoughPointsLeftError.__init__", false]], "__init__() (baybe.exceptions.nothingtosimulateerror method)": [[56, "baybe.exceptions.NothingToSimulateError.__init__", false]], "__init__() (baybe.exceptions.numericalunderflowerror method)": [[57, "baybe.exceptions.NumericalUnderflowError.__init__", false]], "__init__() (baybe.exceptions.optionalimporterror method)": [[58, "baybe.exceptions.OptionalImportError.__init__", false]], "__init__() (baybe.exceptions.unidentifiedsubclasserror method)": [[59, "baybe.exceptions.UnidentifiedSubclassError.__init__", false]], "__init__() (baybe.kernels.base.kernel method)": [[62, "baybe.kernels.base.Kernel.__init__", false]], "__init__() (baybe.kernels.basic.linearkernel method)": [[64, "baybe.kernels.basic.LinearKernel.__init__", false]], "__init__() (baybe.kernels.basic.maternkernel method)": [[65, "baybe.kernels.basic.MaternKernel.__init__", false]], "__init__() (baybe.kernels.basic.periodickernel method)": [[66, "baybe.kernels.basic.PeriodicKernel.__init__", false]], "__init__() (baybe.kernels.basic.piecewisepolynomialkernel method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.__init__", false]], "__init__() (baybe.kernels.basic.polynomialkernel method)": [[68, "baybe.kernels.basic.PolynomialKernel.__init__", false]], "__init__() (baybe.kernels.basic.rbfkernel method)": [[69, "baybe.kernels.basic.RBFKernel.__init__", false]], "__init__() (baybe.kernels.basic.rffkernel method)": [[70, "baybe.kernels.basic.RFFKernel.__init__", false]], "__init__() (baybe.kernels.basic.rqkernel method)": [[71, "baybe.kernels.basic.RQKernel.__init__", false]], "__init__() (baybe.kernels.composite.additivekernel method)": [[73, "baybe.kernels.composite.AdditiveKernel.__init__", false]], "__init__() (baybe.kernels.composite.productkernel method)": [[74, "baybe.kernels.composite.ProductKernel.__init__", false]], "__init__() (baybe.kernels.composite.scalekernel method)": [[75, "baybe.kernels.composite.ScaleKernel.__init__", false]], "__init__() (baybe.objectives.base.objective method)": [[80, "baybe.objectives.base.Objective.__init__", false]], "__init__() (baybe.objectives.desirability.desirabilityobjective method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.__init__", false]], "__init__() (baybe.objectives.single.singletargetobjective method)": [[90, "baybe.objectives.single.SingleTargetObjective.__init__", false]], "__init__() (baybe.parameters.base.continuousparameter method)": [[93, "baybe.parameters.base.ContinuousParameter.__init__", false]], "__init__() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.__init__", false]], "__init__() (baybe.parameters.base.parameter method)": [[95, "baybe.parameters.base.Parameter.__init__", false]], "__init__() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.__init__", false]], "__init__() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.__init__", false]], "__init__() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.__init__", false]], "__init__() (baybe.parameters.numerical.numericalcontinuousparameter method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.__init__", false]], "__init__() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.__init__", false]], "__init__() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.__init__", false]], "__init__() (baybe.priors.base.prior method)": [[120, "baybe.priors.base.Prior.__init__", false]], "__init__() (baybe.priors.basic.gammaprior method)": [[122, "baybe.priors.basic.GammaPrior.__init__", false]], "__init__() (baybe.priors.basic.halfcauchyprior method)": [[123, "baybe.priors.basic.HalfCauchyPrior.__init__", false]], "__init__() (baybe.priors.basic.halfnormalprior method)": [[124, "baybe.priors.basic.HalfNormalPrior.__init__", false]], "__init__() (baybe.priors.basic.lognormalprior method)": [[125, "baybe.priors.basic.LogNormalPrior.__init__", false]], "__init__() (baybe.priors.basic.normalprior method)": [[126, "baybe.priors.basic.NormalPrior.__init__", false]], "__init__() (baybe.priors.basic.smoothedboxprior method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.__init__", false]], "__init__() (baybe.recommenders.base.recommenderprotocol method)": [[130, "baybe.recommenders.base.RecommenderProtocol.__init__", false]], "__init__() (baybe.recommenders.meta.base.metarecommender method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.__init__", false]], "__init__() (baybe.recommenders.meta.sequential.sequentialmetarecommender method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.__init__", false]], "__init__() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.__init__", false]], "__init__() (baybe.recommenders.meta.sequential.twophasemetarecommender method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.__init__", false]], "__init__() (baybe.recommenders.naive.naivehybridspacerecommender method)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.base.purerecommender method)": [[144, "baybe.recommenders.pure.base.PureRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.bayesian.base.bayesianrecommender method)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender method)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.base.nonpredictiverecommender method)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender method)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender method)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender method)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender method)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.sampling.fpsrecommender method)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.__init__", false]], "__init__() (baybe.recommenders.pure.nonpredictive.sampling.randomrecommender method)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.__init__", false]], "__init__() (baybe.scaler.defaultscaler method)": [[162, "baybe.scaler.DefaultScaler.__init__", false]], "__init__() (baybe.scaler.scaler method)": [[163, "baybe.scaler.Scaler.__init__", false]], "__init__() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.__init__", false]], "__init__() (baybe.searchspace.core.searchspace method)": [[168, "baybe.searchspace.core.SearchSpace.__init__", false]], "__init__() (baybe.searchspace.discrete.memorysize method)": [[172, "baybe.searchspace.discrete.MemorySize.__init__", false]], "__init__() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.__init__", false]], "__init__() (baybe.surrogates.base.surrogate method)": [[207, "baybe.surrogates.base.Surrogate.__init__", false]], "__init__() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.__init__", false]], "__init__() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.__init__", false]], "__init__() (baybe.surrogates.gaussian_process.kernel_factory.kernelfactory method)": [[215, "baybe.surrogates.gaussian_process.kernel_factory.KernelFactory.__init__", false]], "__init__() (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory method)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.__init__", false]], "__init__() (baybe.surrogates.gaussian_process.presets.default.defaultkernelfactory method)": [[223, "baybe.surrogates.gaussian_process.presets.default.DefaultKernelFactory.__init__", false]], "__init__() (baybe.surrogates.linear.bayesianlinearsurrogate method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.__init__", false]], "__init__() (baybe.surrogates.naive.meanpredictionsurrogate method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.__init__", false]], "__init__() (baybe.surrogates.ngboost.ngboostsurrogate method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.__init__", false]], "__init__() (baybe.surrogates.random_forest.randomforestsurrogate method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.__init__", false]], "__init__() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.__init__", false]], "__init__() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.__init__", false]], "__init__() (baybe.utils.basic.classproperty method)": [[259, "baybe.utils.basic.classproperty.__init__", false]], "__init__() (baybe.utils.basic.dummy method)": [[258, "baybe.utils.basic.Dummy.__init__", false]], "__init__() (baybe.utils.interval.infiniteintervalerror method)": [[294, "baybe.utils.interval.InfiniteIntervalError.__init__", false]], "__init__() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.__init__", false]], "__new__() (baybe.exceptions.deprecationerror method)": [[50, "baybe.exceptions.DeprecationError.__new__", false]], "__new__() (baybe.exceptions.emptysearchspaceerror method)": [[51, "baybe.exceptions.EmptySearchSpaceError.__new__", false]], "__new__() (baybe.exceptions.incompatiblesearchspaceerror method)": [[52, "baybe.exceptions.IncompatibleSearchSpaceError.__new__", false]], "__new__() (baybe.exceptions.nomcacquisitionfunctionerror method)": [[53, "baybe.exceptions.NoMCAcquisitionFunctionError.__new__", false]], "__new__() (baybe.exceptions.norecommenderslefterror method)": [[54, "baybe.exceptions.NoRecommendersLeftError.__new__", false]], "__new__() (baybe.exceptions.notenoughpointslefterror method)": [[55, "baybe.exceptions.NotEnoughPointsLeftError.__new__", false]], "__new__() (baybe.exceptions.nothingtosimulateerror method)": [[56, "baybe.exceptions.NothingToSimulateError.__new__", false]], "__new__() (baybe.exceptions.numericalunderflowerror method)": [[57, "baybe.exceptions.NumericalUnderflowError.__new__", false]], "__new__() (baybe.exceptions.optionalimporterror method)": [[58, "baybe.exceptions.OptionalImportError.__new__", false]], "__new__() (baybe.exceptions.unidentifiedsubclasserror method)": [[59, "baybe.exceptions.UnidentifiedSubclassError.__new__", false]], "__new__() (baybe.parameters.enum.categoricalencoding method)": [[102, "baybe.parameters.enum.CategoricalEncoding.__new__", false]], "__new__() (baybe.parameters.enum.customencoding method)": [[103, "baybe.parameters.enum.CustomEncoding.__new__", false]], "__new__() (baybe.parameters.enum.substanceencoding method)": [[105, "baybe.parameters.enum.SubstanceEncoding.__new__", false]], "__new__() (baybe.utils.interval.infiniteintervalerror method)": [[294, "baybe.utils.interval.InfiniteIntervalError.__new__", false]], "a (baybe.priors.basic.smoothedboxprior attribute)": [[127, "baybe.priors.basic.SmoothedBoxPrior.a", false]], "abbreviation (baybe.acquisition.acqfs.expectedimprovement attribute)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.logexpectedimprovement attribute)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.posteriormean attribute)": [[5, "baybe.acquisition.acqfs.PosteriorMean.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.probabilityofimprovement attribute)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qexpectedimprovement attribute)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qlogexpectedimprovement attribute)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qlognoisyexpectedimprovement attribute)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qnoisyexpectedimprovement attribute)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qprobabilityofimprovement attribute)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qsimpleregret attribute)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.qupperconfidencebound attribute)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.abbreviation", false]], "abbreviation (baybe.acquisition.acqfs.upperconfidencebound attribute)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.abbreviation", false]], "abbreviation (baybe.acquisition.base.acquisitionfunction attribute)": [[16, "baybe.acquisition.base.AcquisitionFunction.abbreviation", false]], "acquisition_function (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.acquisition_function", false]], "acquisition_function (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.acquisition_function", false]], "acquisition_function_cls (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.acquisition_function_cls", false]], "acquisition_function_cls (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.acquisition_function_cls", false]], "acquisitionfunction (class in baybe.acquisition.base)": [[16, "baybe.acquisition.base.AcquisitionFunction", false]], "active_values (baybe.parameters.categorical.taskparameter attribute)": [[98, "baybe.parameters.categorical.TaskParameter.active_values", false]], "add_fake_results() (in module baybe.utils.dataframe)": [[285, "baybe.utils.dataframe.add_fake_results", false]], "add_measurements() (baybe.campaign.campaign method)": [[23, "baybe.campaign.Campaign.add_measurements", false]], "add_parameter_noise() (in module baybe.utils.dataframe)": [[286, "baybe.utils.dataframe.add_parameter_noise", false]], "additivekernel (class in baybe.kernels.composite)": [[73, "baybe.kernels.composite.AdditiveKernel", false]], "affected_parameters (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.affected_parameters", false]], "allow_recommending_already_measured (baybe.recommenders.meta.base.metarecommender attribute)": [[135, "baybe.recommenders.meta.base.MetaRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.meta.sequential.sequentialmetarecommender attribute)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender attribute)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.meta.sequential.twophasemetarecommender attribute)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.naive.naivehybridspacerecommender attribute)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.base.purerecommender attribute)": [[144, "baybe.recommenders.pure.base.PureRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.base.nonpredictiverecommender attribute)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.sampling.fpsrecommender attribute)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.allow_recommending_already_measured", false]], "allow_recommending_already_measured (baybe.recommenders.pure.nonpredictive.sampling.randomrecommender attribute)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.allow_recommending_already_measured", false]], "allow_repeated_recommendations (baybe.recommenders.meta.base.metarecommender attribute)": [[135, "baybe.recommenders.meta.base.MetaRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.meta.sequential.sequentialmetarecommender attribute)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender attribute)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.meta.sequential.twophasemetarecommender attribute)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.naive.naivehybridspacerecommender attribute)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.base.purerecommender attribute)": [[144, "baybe.recommenders.pure.base.PureRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.base.nonpredictiverecommender attribute)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.sampling.fpsrecommender attribute)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.allow_repeated_recommendations", false]], "allow_repeated_recommendations (baybe.recommenders.pure.nonpredictive.sampling.randomrecommender attribute)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.allow_repeated_recommendations", false]], "autoscale() (in module baybe.surrogates.utils)": [[233, "baybe.surrogates.utils.autoscale", false]], "b (baybe.priors.basic.smoothedboxprior attribute)": [[127, "baybe.priors.basic.SmoothedBoxPrior.b", false]], "base_kernel (baybe.kernels.composite.scalekernel attribute)": [[75, "baybe.kernels.composite.ScaleKernel.base_kernel", false]], "base_kernels (baybe.kernels.composite.additivekernel attribute)": [[73, "baybe.kernels.composite.AdditiveKernel.base_kernels", false]], "base_kernels (baybe.kernels.composite.productkernel attribute)": [[74, "baybe.kernels.composite.ProductKernel.base_kernels", false]], "batchify() (in module baybe.surrogates.utils)": [[234, "baybe.surrogates.utils.batchify", false]], "baybe": [[0, "module-baybe", false]], "baybe (baybe.surrogates.gaussian_process.presets.core.gaussianprocesspreset attribute)": [[220, "baybe.surrogates.gaussian_process.presets.core.GaussianProcessPreset.BAYBE", false]], "baybe.acquisition": [[1, "module-baybe.acquisition", false]], "baybe.acquisition.acqfs": [[2, "module-baybe.acquisition.acqfs", false]], "baybe.acquisition.base": [[15, "module-baybe.acquisition.base", false]], "baybe.acquisition.partial": [[17, "module-baybe.acquisition.partial", false]], "baybe.acquisition.utils": [[19, "module-baybe.acquisition.utils", false]], "baybe.campaign": [[22, "module-baybe.campaign", false]], "baybe.constraints": [[24, "module-baybe.constraints", false]], "baybe.constraints.base": [[25, "module-baybe.constraints.base", false]], "baybe.constraints.conditions": [[29, "module-baybe.constraints.conditions", false]], "baybe.constraints.continuous": [[33, "module-baybe.constraints.continuous", false]], "baybe.constraints.discrete": [[36, "module-baybe.constraints.discrete", false]], "baybe.constraints.validation": [[45, "module-baybe.constraints.validation", false]], "baybe.deprecation": [[47, "module-baybe.deprecation", false]], "baybe.exceptions": [[49, "module-baybe.exceptions", false]], "baybe.kernels": [[60, "module-baybe.kernels", false]], "baybe.kernels.base": [[61, "module-baybe.kernels.base", false]], "baybe.kernels.basic": [[63, "module-baybe.kernels.basic", false]], "baybe.kernels.composite": [[72, "module-baybe.kernels.composite", false]], "baybe.objective": [[76, "module-baybe.objective", false]], "baybe.objectives": [[78, "module-baybe.objectives", false]], "baybe.objectives.base": [[79, "module-baybe.objectives.base", false]], "baybe.objectives.deprecation": [[82, "module-baybe.objectives.deprecation", false]], "baybe.objectives.desirability": [[84, "module-baybe.objectives.desirability", false]], "baybe.objectives.enum": [[87, "module-baybe.objectives.enum", false]], "baybe.objectives.single": [[89, "module-baybe.objectives.single", false]], "baybe.parameters": [[91, "module-baybe.parameters", false]], "baybe.parameters.base": [[92, "module-baybe.parameters.base", false]], "baybe.parameters.categorical": [[96, "module-baybe.parameters.categorical", false]], "baybe.parameters.custom": [[99, "module-baybe.parameters.custom", false]], "baybe.parameters.enum": [[101, "module-baybe.parameters.enum", false]], "baybe.parameters.numerical": [[106, "module-baybe.parameters.numerical", false]], "baybe.parameters.substance": [[109, "module-baybe.parameters.substance", false]], "baybe.parameters.utils": [[112, "module-baybe.parameters.utils", false]], "baybe.parameters.validation": [[114, "module-baybe.parameters.validation", false]], "baybe.priors": [[118, "module-baybe.priors", false]], "baybe.priors.base": [[119, "module-baybe.priors.base", false]], "baybe.priors.basic": [[121, "module-baybe.priors.basic", false]], "baybe.recommenders": [[128, "module-baybe.recommenders", false]], "baybe.recommenders.base": [[129, "module-baybe.recommenders.base", false]], "baybe.recommenders.deprecation": [[131, "module-baybe.recommenders.deprecation", false]], "baybe.recommenders.meta": [[133, "module-baybe.recommenders.meta", false]], "baybe.recommenders.meta.base": [[134, "module-baybe.recommenders.meta.base", false]], "baybe.recommenders.meta.sequential": [[136, "module-baybe.recommenders.meta.sequential", false]], "baybe.recommenders.naive": [[140, "module-baybe.recommenders.naive", false]], "baybe.recommenders.pure": [[142, "module-baybe.recommenders.pure", false]], "baybe.recommenders.pure.base": [[143, "module-baybe.recommenders.pure.base", false]], "baybe.recommenders.pure.bayesian": [[145, "module-baybe.recommenders.pure.bayesian", false]], "baybe.recommenders.pure.bayesian.base": [[146, "module-baybe.recommenders.pure.bayesian.base", false]], "baybe.recommenders.pure.bayesian.sequential_greedy": [[148, "module-baybe.recommenders.pure.bayesian.sequential_greedy", false]], "baybe.recommenders.pure.nonpredictive": [[150, "module-baybe.recommenders.pure.nonpredictive", false]], "baybe.recommenders.pure.nonpredictive.base": [[151, "module-baybe.recommenders.pure.nonpredictive.base", false]], "baybe.recommenders.pure.nonpredictive.clustering": [[153, "module-baybe.recommenders.pure.nonpredictive.clustering", false]], "baybe.recommenders.pure.nonpredictive.sampling": [[158, "module-baybe.recommenders.pure.nonpredictive.sampling", false]], "baybe.scaler": [[161, "module-baybe.scaler", false]], "baybe.searchspace": [[164, "module-baybe.searchspace", false]], "baybe.searchspace.continuous": [[165, "module-baybe.searchspace.continuous", false]], "baybe.searchspace.core": [[167, "module-baybe.searchspace.core", false]], "baybe.searchspace.discrete": [[171, "module-baybe.searchspace.discrete", false]], "baybe.searchspace.validation": [[176, "module-baybe.searchspace.validation", false]], "baybe.serialization": [[179, "module-baybe.serialization", false]], "baybe.serialization.core": [[180, "module-baybe.serialization.core", false]], "baybe.serialization.mixin": [[187, "module-baybe.serialization.mixin", false]], "baybe.serialization.utils": [[189, "module-baybe.serialization.utils", false]], "baybe.simulation": [[192, "module-baybe.simulation", false]], "baybe.simulation.core": [[193, "module-baybe.simulation.core", false]], "baybe.simulation.lookup": [[195, "module-baybe.simulation.lookup", false]], "baybe.simulation.scenarios": [[196, "module-baybe.simulation.scenarios", false]], "baybe.simulation.transfer_learning": [[198, "module-baybe.simulation.transfer_learning", false]], "baybe.strategies": [[200, "module-baybe.strategies", false]], "baybe.strategies.deprecation": [[201, "module-baybe.strategies.deprecation", false]], "baybe.surrogates": [[205, "module-baybe.surrogates", false]], "baybe.surrogates.base": [[206, "module-baybe.surrogates.base", false]], "baybe.surrogates.custom": [[208, "module-baybe.surrogates.custom", false]], "baybe.surrogates.gaussian_process": [[211, "module-baybe.surrogates.gaussian_process", false]], "baybe.surrogates.gaussian_process.core": [[212, "module-baybe.surrogates.gaussian_process.core", false]], "baybe.surrogates.gaussian_process.kernel_factory": [[214, "module-baybe.surrogates.gaussian_process.kernel_factory", false]], "baybe.surrogates.gaussian_process.presets": [[218, "module-baybe.surrogates.gaussian_process.presets", false]], "baybe.surrogates.gaussian_process.presets.core": [[219, "module-baybe.surrogates.gaussian_process.presets.core", false]], "baybe.surrogates.gaussian_process.presets.default": [[222, "module-baybe.surrogates.gaussian_process.presets.default", false]], "baybe.surrogates.linear": [[224, "module-baybe.surrogates.linear", false]], "baybe.surrogates.naive": [[226, "module-baybe.surrogates.naive", false]], "baybe.surrogates.ngboost": [[228, "module-baybe.surrogates.ngboost", false]], "baybe.surrogates.random_forest": [[230, "module-baybe.surrogates.random_forest", false]], "baybe.surrogates.utils": [[232, "module-baybe.surrogates.utils", false]], "baybe.surrogates.validation": [[236, "module-baybe.surrogates.validation", false]], "baybe.targets": [[239, "module-baybe.targets", false]], "baybe.targets.base": [[240, "module-baybe.targets.base", false]], "baybe.targets.enum": [[242, "module-baybe.targets.enum", false]], "baybe.targets.numerical": [[245, "module-baybe.targets.numerical", false]], "baybe.targets.transforms": [[247, "module-baybe.targets.transforms", false]], "baybe.telemetry": [[251, "module-baybe.telemetry", false]], "baybe.utils": [[256, "module-baybe.utils", false]], "baybe.utils.basic": [[257, "module-baybe.utils.basic", false]], "baybe.utils.boolean": [[268, "module-baybe.utils.boolean", false]], "baybe.utils.botorch_wrapper": [[272, "module-baybe.utils.botorch_wrapper", false]], "baybe.utils.chemistry": [[274, "module-baybe.utils.chemistry", false]], "baybe.utils.conversion": [[282, "module-baybe.utils.conversion", false]], "baybe.utils.dataframe": [[284, "module-baybe.utils.dataframe", false]], "baybe.utils.interval": [[293, "module-baybe.utils.interval", false]], "baybe.utils.memory": [[298, "module-baybe.utils.memory", false]], "baybe.utils.numerical": [[300, "module-baybe.utils.numerical", false]], "baybe.utils.plotting": [[307, "module-baybe.utils.plotting", false]], "baybe.utils.random": [[309, "module-baybe.utils.random", false]], "baybe.utils.sampling_algorithms": [[312, "module-baybe.utils.sampling_algorithms", false]], "baybe.utils.torch": [[314, "module-baybe.utils.torch", false]], "baybe.utils.validation": [[317, "module-baybe.utils.validation", false]], "bayesianlinearsurrogate (class in baybe.surrogates.linear)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate", false]], "bayesianrecommender (class in baybe.recommenders.pure.bayesian.base)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender", false]], "bell (baybe.targets.enum.targettransformation attribute)": [[244, "baybe.targets.enum.TargetTransformation.BELL", false]], "bell_transform() (in module baybe.targets.transforms)": [[248, "baybe.targets.transforms.bell_transform", false]], "beta (baybe.acquisition.acqfs.qupperconfidencebound attribute)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.beta", false]], "beta (baybe.acquisition.acqfs.upperconfidencebound attribute)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.beta", false]], "block_deserialization_hook() (in module baybe.serialization.core)": [[181, "baybe.serialization.core.block_deserialization_hook", false]], "block_serialization_hook() (in module baybe.serialization.core)": [[182, "baybe.serialization.core.block_serialization_hook", false]], "botorch_acqf (baybe.acquisition.partial.partialacquisitionfunction attribute)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction.botorch_acqf", false]], "botorch_function_wrapper() (in module baybe.utils.botorch_wrapper)": [[273, "baybe.utils.botorch_wrapper.botorch_function_wrapper", false]], "bounds (baybe.parameters.numerical.numericalcontinuousparameter attribute)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.bounds", false]], "bounds (baybe.targets.numerical.numericaltarget attribute)": [[246, "baybe.targets.numerical.NumericalTarget.bounds", false]], "bytes_to_human_readable() (in module baybe.utils.memory)": [[299, "baybe.utils.memory.bytes_to_human_readable", false]], "campaign (class in baybe.campaign)": [[23, "baybe.campaign.Campaign", false]], "catch_constant_targets() (in module baybe.surrogates.utils)": [[235, "baybe.surrogates.utils.catch_constant_targets", false]], "categoricalencoding (class in baybe.parameters.enum)": [[102, "baybe.parameters.enum.CategoricalEncoding", false]], "categoricalparameter (class in baybe.parameters.categorical)": [[97, "baybe.parameters.categorical.CategoricalParameter", false]], "center (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.center", false]], "check_if_in() (in module baybe.utils.boolean)": [[269, "baybe.utils.boolean.check_if_in", false]], "classproperty (class in baybe.utils.basic)": [[259, "baybe.utils.basic.classproperty", false]], "closer_element() (in module baybe.utils.numerical)": [[304, "baybe.utils.numerical.closer_element", false]], "closest_element() (in module baybe.utils.numerical)": [[305, "baybe.utils.numerical.closest_element", false]], "coefficients (baybe.constraints.base.continuousconstraint attribute)": [[27, "baybe.constraints.base.ContinuousConstraint.coefficients", false]], "coefficients (baybe.constraints.continuous.continuouslinearequalityconstraint attribute)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.coefficients", false]], "coefficients (baybe.constraints.continuous.continuouslinearinequalityconstraint attribute)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.coefficients", false]], "combiner (baybe.constraints.discrete.discreteexcludeconstraint attribute)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.combiner", false]], "comp_df (baybe.parameters.base.discreteparameter property)": [[94, "baybe.parameters.base.DiscreteParameter.comp_df", false]], "comp_df (baybe.parameters.categorical.categoricalparameter property)": [[97, "baybe.parameters.categorical.CategoricalParameter.comp_df", false]], "comp_df (baybe.parameters.categorical.taskparameter property)": [[98, "baybe.parameters.categorical.TaskParameter.comp_df", false]], "comp_df (baybe.parameters.custom.customdiscreteparameter property)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.comp_df", false]], "comp_df (baybe.parameters.numerical.numericaldiscreteparameter property)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.comp_df", false]], "comp_df (baybe.parameters.substance.substanceparameter property)": [[111, "baybe.parameters.substance.SubstanceParameter.comp_df", false]], "comp_rep (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.comp_rep", false]], "comp_rep_bytes (baybe.searchspace.discrete.memorysize attribute)": [[172, "baybe.searchspace.discrete.MemorySize.comp_rep_bytes", false]], "comp_rep_human_readable (baybe.searchspace.discrete.memorysize property)": [[172, "baybe.searchspace.discrete.MemorySize.comp_rep_human_readable", false]], "comp_rep_shape (baybe.searchspace.discrete.memorysize attribute)": [[172, "baybe.searchspace.discrete.MemorySize.comp_rep_shape", false]], "compatibility (baybe.recommenders.naive.naivehybridspacerecommender attribute)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.base.purerecommender attribute)": [[144, "baybe.recommenders.pure.base.PureRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.base.nonpredictiverecommender attribute)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.sampling.fpsrecommender attribute)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.compatibility", false]], "compatibility (baybe.recommenders.pure.nonpredictive.sampling.randomrecommender attribute)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.compatibility", false]], "compatibilize_config() (in module baybe.deprecation)": [[48, "baybe.deprecation.compatibilize_config", false]], "concentration (baybe.priors.basic.gammaprior attribute)": [[122, "baybe.priors.basic.GammaPrior.concentration", false]], "condition (baybe.constraints.discrete.discreteproductconstraint attribute)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.condition", false]], "condition (baybe.constraints.discrete.discretesumconstraint attribute)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.condition", false]], "condition (class in baybe.constraints.conditions)": [[30, "baybe.constraints.conditions.Condition", false]], "conditions (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.conditions", false]], "conditions (baybe.constraints.discrete.discreteexcludeconstraint attribute)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.conditions", false]], "constraint (class in baybe.constraints.base)": [[26, "baybe.constraints.base.Constraint", false]], "constraints (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.constraints", false]], "constraints (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.constraints", false]], "constraints_lin_eq (baybe.searchspace.continuous.subspacecontinuous attribute)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.constraints_lin_eq", false]], "constraints_lin_ineq (baybe.searchspace.continuous.subspacecontinuous attribute)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.constraints_lin_ineq", false]], "cont_recommender (baybe.recommenders.naive.naivehybridspacerecommender attribute)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.cont_recommender", false]], "contains() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.contains", false]], "contains_mordred (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.contains_mordred", false]], "contains_rdkit (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.contains_rdkit", false]], "continuous (baybe.searchspace.core.searchspace attribute)": [[168, "baybe.searchspace.core.SearchSpace.continuous", false]], "continuous (baybe.searchspace.core.searchspacetype attribute)": [[169, "baybe.searchspace.core.SearchSpaceType.CONTINUOUS", false]], "continuousconstraint (class in baybe.constraints.base)": [[27, "baybe.constraints.base.ContinuousConstraint", false]], "continuouslinearequalityconstraint (class in baybe.constraints.continuous)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint", false]], "continuouslinearinequalityconstraint (class in baybe.constraints.continuous)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint", false]], "continuousparameter (class in baybe.parameters.base)": [[93, "baybe.parameters.base.ContinuousParameter", false]], "convert_acqf() (in module baybe.acquisition.utils)": [[20, "baybe.acquisition.utils.convert_acqf", false]], "convert_bounds() (in module baybe.utils.interval)": [[296, "baybe.utils.interval.convert_bounds", false]], "converter (in module baybe.serialization.core)": [[183, "baybe.serialization.core.converter", false]], "create() (baybe.utils.interval.interval class method)": [[295, "baybe.utils.interval.Interval.create", false]], "create_example_plots() (in module baybe.utils.plotting)": [[308, "baybe.utils.plotting.create_example_plots", false]], "custom (baybe.parameters.enum.customencoding attribute)": [[103, "baybe.parameters.enum.CustomEncoding.CUSTOM", false]], "customdiscreteparameter (class in baybe.parameters.custom)": [[100, "baybe.parameters.custom.CustomDiscreteParameter", false]], "customencoding (class in baybe.parameters.enum)": [[103, "baybe.parameters.enum.CustomEncoding", false]], "customonnxsurrogate (class in baybe.surrogates.custom)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate", false]], "data (baybe.parameters.custom.customdiscreteparameter attribute)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.data", false]], "data (baybe.parameters.substance.substanceparameter attribute)": [[111, "baybe.parameters.substance.SubstanceParameter.data", false]], "decorrelate (baybe.parameters.custom.customdiscreteparameter attribute)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.decorrelate", false]], "decorrelate (baybe.parameters.substance.substanceparameter attribute)": [[111, "baybe.parameters.substance.SubstanceParameter.decorrelate", false]], "default_iterator() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.default_iterator", false]], "default_model() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.default_model", false]], "defaultkernelfactory (class in baybe.surrogates.gaussian_process.presets.default)": [[223, "baybe.surrogates.gaussian_process.presets.default.DefaultKernelFactory", false]], "defaultscaler (class in baybe.scaler)": [[162, "baybe.scaler.DefaultScaler", false]], "dependencies (baybe.constraints.discrete.discretepermutationinvarianceconstraint attribute)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.dependencies", false]], "deprecationerror": [[50, "baybe.exceptions.DeprecationError", false]], "deserialize_dataframe() (in module baybe.serialization.utils)": [[190, "baybe.serialization.utils.deserialize_dataframe", false]], "desirabilityobjective (class in baybe.objectives.desirability)": [[85, "baybe.objectives.desirability.DesirabilityObjective", false]], "df_drop_single_value_columns() (in module baybe.utils.dataframe)": [[287, "baybe.utils.dataframe.df_drop_single_value_columns", false]], "df_drop_string_columns() (in module baybe.utils.dataframe)": [[288, "baybe.utils.dataframe.df_drop_string_columns", false]], "df_uncorrelated_features() (in module baybe.utils.dataframe)": [[289, "baybe.utils.dataframe.df_uncorrelated_features", false]], "disc_recommender (baybe.recommenders.naive.naivehybridspacerecommender attribute)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.disc_recommender", false]], "discrete (baybe.searchspace.core.searchspace attribute)": [[168, "baybe.searchspace.core.SearchSpace.discrete", false]], "discrete (baybe.searchspace.core.searchspacetype attribute)": [[169, "baybe.searchspace.core.SearchSpaceType.DISCRETE", false]], "discreteconstraint (class in baybe.constraints.base)": [[28, "baybe.constraints.base.DiscreteConstraint", false]], "discretecustomconstraint (class in baybe.constraints.discrete)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint", false]], "discretedependenciesconstraint (class in baybe.constraints.discrete)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint", false]], "discreteexcludeconstraint (class in baybe.constraints.discrete)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint", false]], "discretelinkedparametersconstraint (class in baybe.constraints.discrete)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint", false]], "discretenolabelduplicatesconstraint (class in baybe.constraints.discrete)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint", false]], "discreteparameter (class in baybe.parameters.base)": [[94, "baybe.parameters.base.DiscreteParameter", false]], "discretepermutationinvarianceconstraint (class in baybe.constraints.discrete)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint", false]], "discreteproductconstraint (class in baybe.constraints.discrete)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint", false]], "discretesumconstraint (class in baybe.constraints.discrete)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint", false]], "dtypefloatnumpy (in module baybe.utils.numerical)": [[301, "baybe.utils.numerical.DTypeFloatNumpy", false]], "dtypefloatonnx (in module baybe.utils.numerical)": [[302, "baybe.utils.numerical.DTypeFloatONNX", false]], "dtypefloattorch (in module baybe.utils.torch)": [[315, "baybe.utils.torch.DTypeFloatTorch", false]], "dummy (class in baybe.utils.basic)": [[258, "baybe.utils.basic.Dummy", false]], "either (baybe.searchspace.core.searchspacetype attribute)": [[169, "baybe.searchspace.core.SearchSpaceType.EITHER", false]], "empty() (baybe.searchspace.continuous.subspacecontinuous class method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.empty", false]], "empty() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.empty", false]], "empty_encoding (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.empty_encoding", false]], "emptysearchspaceerror": [[51, "baybe.exceptions.EmptySearchSpaceError", false]], "encoding (baybe.parameters.base.discreteparameter attribute)": [[94, "baybe.parameters.base.DiscreteParameter.encoding", false]], "encoding (baybe.parameters.categorical.categoricalparameter attribute)": [[97, "baybe.parameters.categorical.CategoricalParameter.encoding", false]], "encoding (baybe.parameters.categorical.taskparameter attribute)": [[98, "baybe.parameters.categorical.TaskParameter.encoding", false]], "encoding (baybe.parameters.custom.customdiscreteparameter attribute)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.encoding", false]], "encoding (baybe.parameters.numerical.numericaldiscreteparameter attribute)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.encoding", false]], "encoding (baybe.parameters.substance.substanceparameter attribute)": [[111, "baybe.parameters.substance.SubstanceParameter.encoding", false]], "estimate_product_space_size() (baybe.searchspace.core.searchspace static method)": [[168, "baybe.searchspace.core.SearchSpace.estimate_product_space_size", false]], "estimate_product_space_size() (baybe.searchspace.discrete.subspacediscrete static method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.estimate_product_space_size", false]], "eval_during_creation (baybe.constraints.base.constraint attribute)": [[26, "baybe.constraints.base.Constraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.base.continuousconstraint attribute)": [[27, "baybe.constraints.base.ContinuousConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.base.discreteconstraint attribute)": [[28, "baybe.constraints.base.DiscreteConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.continuous.continuouslinearequalityconstraint attribute)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.continuous.continuouslinearinequalityconstraint attribute)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretecustomconstraint attribute)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discreteexcludeconstraint attribute)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretelinkedparametersconstraint attribute)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretenolabelduplicatesconstraint attribute)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretepermutationinvarianceconstraint attribute)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discreteproductconstraint attribute)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.eval_during_creation", false]], "eval_during_creation (baybe.constraints.discrete.discretesumconstraint attribute)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.eval_during_creation", false]], "eval_during_modeling (baybe.constraints.base.constraint attribute)": [[26, "baybe.constraints.base.Constraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.base.continuousconstraint attribute)": [[27, "baybe.constraints.base.ContinuousConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.base.discreteconstraint attribute)": [[28, "baybe.constraints.base.DiscreteConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.continuous.continuouslinearequalityconstraint attribute)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.continuous.continuouslinearinequalityconstraint attribute)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretecustomconstraint attribute)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discreteexcludeconstraint attribute)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretelinkedparametersconstraint attribute)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretenolabelduplicatesconstraint attribute)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretepermutationinvarianceconstraint attribute)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discreteproductconstraint attribute)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.eval_during_modeling", false]], "eval_during_modeling (baybe.constraints.discrete.discretesumconstraint attribute)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.eval_during_modeling", false]], "evaluate() (baybe.constraints.conditions.condition method)": [[30, "baybe.constraints.conditions.Condition.evaluate", false]], "evaluate() (baybe.constraints.conditions.subselectioncondition method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.evaluate", false]], "evaluate() (baybe.constraints.conditions.thresholdcondition method)": [[32, "baybe.constraints.conditions.ThresholdCondition.evaluate", false]], "exp_rep (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.exp_rep", false]], "exp_rep_bytes (baybe.searchspace.discrete.memorysize attribute)": [[172, "baybe.searchspace.discrete.MemorySize.exp_rep_bytes", false]], "exp_rep_human_readable (baybe.searchspace.discrete.memorysize property)": [[172, "baybe.searchspace.discrete.MemorySize.exp_rep_human_readable", false]], "exp_rep_shape (baybe.searchspace.discrete.memorysize attribute)": [[172, "baybe.searchspace.discrete.MemorySize.exp_rep_shape", false]], "expectedimprovement (class in baybe.acquisition.acqfs)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement", false]], "farthest_point_sampling() (in module baybe.utils.sampling_algorithms)": [[313, "baybe.utils.sampling_algorithms.farthest_point_sampling", false]], "filter_attributes() (in module baybe.utils.basic)": [[260, "baybe.utils.basic.filter_attributes", false]], "find_subclass() (in module baybe.utils.basic)": [[261, "baybe.utils.basic.find_subclass", false]], "finite_float() (in module baybe.utils.validation)": [[318, "baybe.utils.validation.finite_float", false]], "fit() (baybe.surrogates.base.surrogate method)": [[207, "baybe.surrogates.base.Surrogate.fit", false]], "fit() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.fit", false]], "fit() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.fit", false]], "fit() (baybe.surrogates.linear.bayesianlinearsurrogate method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.fit", false]], "fit() (baybe.surrogates.naive.meanpredictionsurrogate method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.fit", false]], "fit() (baybe.surrogates.ngboost.ngboostsurrogate method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.fit", false]], "fit() (baybe.surrogates.random_forest.randomforestsurrogate method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.fit", false]], "fit_transform() (baybe.scaler.defaultscaler method)": [[162, "baybe.scaler.DefaultScaler.fit_transform", false]], "fit_transform() (baybe.scaler.scaler method)": [[163, "baybe.scaler.Scaler.fit_transform", false]], "fpsrecommender (class in baybe.recommenders.pure.nonpredictive.sampling)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender", false]], "fraction_to_float() (in module baybe.utils.conversion)": [[283, "baybe.utils.conversion.fraction_to_float", false]], "from_bounds() (baybe.searchspace.continuous.subspacecontinuous class method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.from_bounds", false]], "from_config() (baybe.campaign.campaign class method)": [[23, "baybe.campaign.Campaign.from_config", false]], "from_dataframe() (baybe.searchspace.continuous.subspacecontinuous class method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.from_dataframe", false]], "from_dataframe() (baybe.searchspace.core.searchspace class method)": [[168, "baybe.searchspace.core.SearchSpace.from_dataframe", false]], "from_dataframe() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.from_dataframe", false]], "from_dict() (baybe.acquisition.acqfs.expectedimprovement class method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.logexpectedimprovement class method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.posteriormean class method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.probabilityofimprovement class method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qexpectedimprovement class method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qlogexpectedimprovement class method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement class method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qnoisyexpectedimprovement class method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qprobabilityofimprovement class method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qsimpleregret class method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.qupperconfidencebound class method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.from_dict", false]], "from_dict() (baybe.acquisition.acqfs.upperconfidencebound class method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.from_dict", false]], "from_dict() (baybe.acquisition.base.acquisitionfunction class method)": [[16, "baybe.acquisition.base.AcquisitionFunction.from_dict", false]], "from_dict() (baybe.campaign.campaign class method)": [[23, "baybe.campaign.Campaign.from_dict", false]], "from_dict() (baybe.constraints.base.constraint class method)": [[26, "baybe.constraints.base.Constraint.from_dict", false]], "from_dict() (baybe.constraints.base.continuousconstraint class method)": [[27, "baybe.constraints.base.ContinuousConstraint.from_dict", false]], "from_dict() (baybe.constraints.base.discreteconstraint class method)": [[28, "baybe.constraints.base.DiscreteConstraint.from_dict", false]], "from_dict() (baybe.constraints.conditions.condition class method)": [[30, "baybe.constraints.conditions.Condition.from_dict", false]], "from_dict() (baybe.constraints.conditions.subselectioncondition class method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.from_dict", false]], "from_dict() (baybe.constraints.conditions.thresholdcondition class method)": [[32, "baybe.constraints.conditions.ThresholdCondition.from_dict", false]], "from_dict() (baybe.constraints.continuous.continuouslinearequalityconstraint class method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.from_dict", false]], "from_dict() (baybe.constraints.continuous.continuouslinearinequalityconstraint class method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretecustomconstraint class method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretedependenciesconstraint class method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discreteexcludeconstraint class method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretelinkedparametersconstraint class method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretenolabelduplicatesconstraint class method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretepermutationinvarianceconstraint class method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discreteproductconstraint class method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.from_dict", false]], "from_dict() (baybe.constraints.discrete.discretesumconstraint class method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.from_dict", false]], "from_dict() (baybe.kernels.base.kernel class method)": [[62, "baybe.kernels.base.Kernel.from_dict", false]], "from_dict() (baybe.kernels.basic.linearkernel class method)": [[64, "baybe.kernels.basic.LinearKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.maternkernel class method)": [[65, "baybe.kernels.basic.MaternKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.periodickernel class method)": [[66, "baybe.kernels.basic.PeriodicKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.piecewisepolynomialkernel class method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.polynomialkernel class method)": [[68, "baybe.kernels.basic.PolynomialKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.rbfkernel class method)": [[69, "baybe.kernels.basic.RBFKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.rffkernel class method)": [[70, "baybe.kernels.basic.RFFKernel.from_dict", false]], "from_dict() (baybe.kernels.basic.rqkernel class method)": [[71, "baybe.kernels.basic.RQKernel.from_dict", false]], "from_dict() (baybe.kernels.composite.additivekernel class method)": [[73, "baybe.kernels.composite.AdditiveKernel.from_dict", false]], "from_dict() (baybe.kernels.composite.productkernel class method)": [[74, "baybe.kernels.composite.ProductKernel.from_dict", false]], "from_dict() (baybe.kernels.composite.scalekernel class method)": [[75, "baybe.kernels.composite.ScaleKernel.from_dict", false]], "from_dict() (baybe.objectives.base.objective class method)": [[80, "baybe.objectives.base.Objective.from_dict", false]], "from_dict() (baybe.objectives.desirability.desirabilityobjective class method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.from_dict", false]], "from_dict() (baybe.objectives.single.singletargetobjective class method)": [[90, "baybe.objectives.single.SingleTargetObjective.from_dict", false]], "from_dict() (baybe.parameters.base.continuousparameter class method)": [[93, "baybe.parameters.base.ContinuousParameter.from_dict", false]], "from_dict() (baybe.parameters.base.discreteparameter class method)": [[94, "baybe.parameters.base.DiscreteParameter.from_dict", false]], "from_dict() (baybe.parameters.base.parameter class method)": [[95, "baybe.parameters.base.Parameter.from_dict", false]], "from_dict() (baybe.parameters.categorical.categoricalparameter class method)": [[97, "baybe.parameters.categorical.CategoricalParameter.from_dict", false]], "from_dict() (baybe.parameters.categorical.taskparameter class method)": [[98, "baybe.parameters.categorical.TaskParameter.from_dict", false]], "from_dict() (baybe.parameters.custom.customdiscreteparameter class method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.from_dict", false]], "from_dict() (baybe.parameters.numerical.numericalcontinuousparameter class method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.from_dict", false]], "from_dict() (baybe.parameters.numerical.numericaldiscreteparameter class method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.from_dict", false]], "from_dict() (baybe.parameters.substance.substanceparameter class method)": [[111, "baybe.parameters.substance.SubstanceParameter.from_dict", false]], "from_dict() (baybe.priors.base.prior class method)": [[120, "baybe.priors.base.Prior.from_dict", false]], "from_dict() (baybe.priors.basic.gammaprior class method)": [[122, "baybe.priors.basic.GammaPrior.from_dict", false]], "from_dict() (baybe.priors.basic.halfcauchyprior class method)": [[123, "baybe.priors.basic.HalfCauchyPrior.from_dict", false]], "from_dict() (baybe.priors.basic.halfnormalprior class method)": [[124, "baybe.priors.basic.HalfNormalPrior.from_dict", false]], "from_dict() (baybe.priors.basic.lognormalprior class method)": [[125, "baybe.priors.basic.LogNormalPrior.from_dict", false]], "from_dict() (baybe.priors.basic.normalprior class method)": [[126, "baybe.priors.basic.NormalPrior.from_dict", false]], "from_dict() (baybe.priors.basic.smoothedboxprior class method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.from_dict", false]], "from_dict() (baybe.recommenders.meta.base.metarecommender class method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.from_dict", false]], "from_dict() (baybe.recommenders.meta.sequential.sequentialmetarecommender class method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.from_dict", false]], "from_dict() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender class method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.from_dict", false]], "from_dict() (baybe.recommenders.meta.sequential.twophasemetarecommender class method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.from_dict", false]], "from_dict() (baybe.searchspace.continuous.subspacecontinuous class method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.from_dict", false]], "from_dict() (baybe.searchspace.core.searchspace class method)": [[168, "baybe.searchspace.core.SearchSpace.from_dict", false]], "from_dict() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.from_dict", false]], "from_dict() (baybe.serialization.mixin.serialmixin class method)": [[188, "baybe.serialization.mixin.SerialMixin.from_dict", false]], "from_dict() (baybe.surrogates.base.surrogate class method)": [[207, "baybe.surrogates.base.Surrogate.from_dict", false]], "from_dict() (baybe.surrogates.custom.customonnxsurrogate class method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.from_dict", false]], "from_dict() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate class method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.from_dict", false]], "from_dict() (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory class method)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.from_dict", false]], "from_dict() (baybe.surrogates.linear.bayesianlinearsurrogate class method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.from_dict", false]], "from_dict() (baybe.surrogates.naive.meanpredictionsurrogate class method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.from_dict", false]], "from_dict() (baybe.surrogates.ngboost.ngboostsurrogate class method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.from_dict", false]], "from_dict() (baybe.surrogates.random_forest.randomforestsurrogate class method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.from_dict", false]], "from_dict() (baybe.targets.base.target class method)": [[241, "baybe.targets.base.Target.from_dict", false]], "from_dict() (baybe.targets.numerical.numericaltarget class method)": [[246, "baybe.targets.numerical.NumericalTarget.from_dict", false]], "from_dict() (baybe.utils.interval.interval class method)": [[295, "baybe.utils.interval.Interval.from_dict", false]], "from_json() (baybe.acquisition.acqfs.expectedimprovement class method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.logexpectedimprovement class method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.posteriormean class method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.from_json", false]], "from_json() (baybe.acquisition.acqfs.probabilityofimprovement class method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qexpectedimprovement class method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qlogexpectedimprovement class method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement class method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qnoisyexpectedimprovement class method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qprobabilityofimprovement class method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.from_json", false]], "from_json() (baybe.acquisition.acqfs.qsimpleregret class method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.from_json", false]], "from_json() (baybe.acquisition.acqfs.qupperconfidencebound class method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.from_json", false]], "from_json() (baybe.acquisition.acqfs.upperconfidencebound class method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.from_json", false]], "from_json() (baybe.acquisition.base.acquisitionfunction class method)": [[16, "baybe.acquisition.base.AcquisitionFunction.from_json", false]], "from_json() (baybe.campaign.campaign class method)": [[23, "baybe.campaign.Campaign.from_json", false]], "from_json() (baybe.constraints.base.constraint class method)": [[26, "baybe.constraints.base.Constraint.from_json", false]], "from_json() (baybe.constraints.base.continuousconstraint class method)": [[27, "baybe.constraints.base.ContinuousConstraint.from_json", false]], "from_json() (baybe.constraints.base.discreteconstraint class method)": [[28, "baybe.constraints.base.DiscreteConstraint.from_json", false]], "from_json() (baybe.constraints.conditions.condition class method)": [[30, "baybe.constraints.conditions.Condition.from_json", false]], "from_json() (baybe.constraints.conditions.subselectioncondition class method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.from_json", false]], "from_json() (baybe.constraints.conditions.thresholdcondition class method)": [[32, "baybe.constraints.conditions.ThresholdCondition.from_json", false]], "from_json() (baybe.constraints.continuous.continuouslinearequalityconstraint class method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.from_json", false]], "from_json() (baybe.constraints.continuous.continuouslinearinequalityconstraint class method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretecustomconstraint class method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretedependenciesconstraint class method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discreteexcludeconstraint class method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretelinkedparametersconstraint class method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretenolabelduplicatesconstraint class method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretepermutationinvarianceconstraint class method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discreteproductconstraint class method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.from_json", false]], "from_json() (baybe.constraints.discrete.discretesumconstraint class method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.from_json", false]], "from_json() (baybe.kernels.base.kernel class method)": [[62, "baybe.kernels.base.Kernel.from_json", false]], "from_json() (baybe.kernels.basic.linearkernel class method)": [[64, "baybe.kernels.basic.LinearKernel.from_json", false]], "from_json() (baybe.kernels.basic.maternkernel class method)": [[65, "baybe.kernels.basic.MaternKernel.from_json", false]], "from_json() (baybe.kernels.basic.periodickernel class method)": [[66, "baybe.kernels.basic.PeriodicKernel.from_json", false]], "from_json() (baybe.kernels.basic.piecewisepolynomialkernel class method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.from_json", false]], "from_json() (baybe.kernels.basic.polynomialkernel class method)": [[68, "baybe.kernels.basic.PolynomialKernel.from_json", false]], "from_json() (baybe.kernels.basic.rbfkernel class method)": [[69, "baybe.kernels.basic.RBFKernel.from_json", false]], "from_json() (baybe.kernels.basic.rffkernel class method)": [[70, "baybe.kernels.basic.RFFKernel.from_json", false]], "from_json() (baybe.kernels.basic.rqkernel class method)": [[71, "baybe.kernels.basic.RQKernel.from_json", false]], "from_json() (baybe.kernels.composite.additivekernel class method)": [[73, "baybe.kernels.composite.AdditiveKernel.from_json", false]], "from_json() (baybe.kernels.composite.productkernel class method)": [[74, "baybe.kernels.composite.ProductKernel.from_json", false]], "from_json() (baybe.kernels.composite.scalekernel class method)": [[75, "baybe.kernels.composite.ScaleKernel.from_json", false]], "from_json() (baybe.objectives.base.objective class method)": [[80, "baybe.objectives.base.Objective.from_json", false]], "from_json() (baybe.objectives.desirability.desirabilityobjective class method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.from_json", false]], "from_json() (baybe.objectives.single.singletargetobjective class method)": [[90, "baybe.objectives.single.SingleTargetObjective.from_json", false]], "from_json() (baybe.parameters.base.continuousparameter class method)": [[93, "baybe.parameters.base.ContinuousParameter.from_json", false]], "from_json() (baybe.parameters.base.discreteparameter class method)": [[94, "baybe.parameters.base.DiscreteParameter.from_json", false]], "from_json() (baybe.parameters.base.parameter class method)": [[95, "baybe.parameters.base.Parameter.from_json", false]], "from_json() (baybe.parameters.categorical.categoricalparameter class method)": [[97, "baybe.parameters.categorical.CategoricalParameter.from_json", false]], "from_json() (baybe.parameters.categorical.taskparameter class method)": [[98, "baybe.parameters.categorical.TaskParameter.from_json", false]], "from_json() (baybe.parameters.custom.customdiscreteparameter class method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.from_json", false]], "from_json() (baybe.parameters.numerical.numericalcontinuousparameter class method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.from_json", false]], "from_json() (baybe.parameters.numerical.numericaldiscreteparameter class method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.from_json", false]], "from_json() (baybe.parameters.substance.substanceparameter class method)": [[111, "baybe.parameters.substance.SubstanceParameter.from_json", false]], "from_json() (baybe.priors.base.prior class method)": [[120, "baybe.priors.base.Prior.from_json", false]], "from_json() (baybe.priors.basic.gammaprior class method)": [[122, "baybe.priors.basic.GammaPrior.from_json", false]], "from_json() (baybe.priors.basic.halfcauchyprior class method)": [[123, "baybe.priors.basic.HalfCauchyPrior.from_json", false]], "from_json() (baybe.priors.basic.halfnormalprior class method)": [[124, "baybe.priors.basic.HalfNormalPrior.from_json", false]], "from_json() (baybe.priors.basic.lognormalprior class method)": [[125, "baybe.priors.basic.LogNormalPrior.from_json", false]], "from_json() (baybe.priors.basic.normalprior class method)": [[126, "baybe.priors.basic.NormalPrior.from_json", false]], "from_json() (baybe.priors.basic.smoothedboxprior class method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.from_json", false]], "from_json() (baybe.recommenders.meta.base.metarecommender class method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.from_json", false]], "from_json() (baybe.recommenders.meta.sequential.sequentialmetarecommender class method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.from_json", false]], "from_json() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender class method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.from_json", false]], "from_json() (baybe.recommenders.meta.sequential.twophasemetarecommender class method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.from_json", false]], "from_json() (baybe.searchspace.continuous.subspacecontinuous class method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.from_json", false]], "from_json() (baybe.searchspace.core.searchspace class method)": [[168, "baybe.searchspace.core.SearchSpace.from_json", false]], "from_json() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.from_json", false]], "from_json() (baybe.serialization.mixin.serialmixin class method)": [[188, "baybe.serialization.mixin.SerialMixin.from_json", false]], "from_json() (baybe.surrogates.base.surrogate class method)": [[207, "baybe.surrogates.base.Surrogate.from_json", false]], "from_json() (baybe.surrogates.custom.customonnxsurrogate class method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.from_json", false]], "from_json() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate class method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.from_json", false]], "from_json() (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory class method)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.from_json", false]], "from_json() (baybe.surrogates.linear.bayesianlinearsurrogate class method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.from_json", false]], "from_json() (baybe.surrogates.naive.meanpredictionsurrogate class method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.from_json", false]], "from_json() (baybe.surrogates.ngboost.ngboostsurrogate class method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.from_json", false]], "from_json() (baybe.surrogates.random_forest.randomforestsurrogate class method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.from_json", false]], "from_json() (baybe.targets.base.target class method)": [[241, "baybe.targets.base.Target.from_json", false]], "from_json() (baybe.targets.numerical.numericaltarget class method)": [[246, "baybe.targets.numerical.NumericalTarget.from_json", false]], "from_json() (baybe.utils.interval.interval class method)": [[295, "baybe.utils.interval.Interval.from_json", false]], "from_preset() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate class method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.from_preset", false]], "from_product() (baybe.searchspace.core.searchspace class method)": [[168, "baybe.searchspace.core.SearchSpace.from_product", false]], "from_product() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.from_product", false]], "from_simplex() (baybe.searchspace.discrete.subspacediscrete class method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.from_simplex", false]], "full_factorial (baybe.searchspace.continuous.subspacecontinuous property)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.full_factorial", false]], "fuzzy_row_match() (in module baybe.utils.dataframe)": [[290, "baybe.utils.dataframe.fuzzy_row_match", false]], "gammaprior (class in baybe.priors.basic)": [[122, "baybe.priors.basic.GammaPrior", false]], "gaussianmixtureclusteringrecommender (class in baybe.recommenders.pure.nonpredictive.clustering)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender", false]], "gaussianprocesspreset (class in baybe.surrogates.gaussian_process.presets.core)": [[220, "baybe.surrogates.gaussian_process.presets.core.GaussianProcessPreset", false]], "gaussianprocesssurrogate (class in baybe.surrogates.gaussian_process.core)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate", false]], "geom_mean (baybe.objectives.enum.scalarizer attribute)": [[88, "baybe.objectives.enum.Scalarizer.GEOM_MEAN", false]], "geom_mean() (in module baybe.utils.numerical)": [[306, "baybe.utils.numerical.geom_mean", false]], "get_base_structure_hook() (in module baybe.serialization.core)": [[184, "baybe.serialization.core.get_base_structure_hook", false]], "get_baseclasses() (in module baybe.utils.basic)": [[262, "baybe.utils.basic.get_baseclasses", false]], "get_candidates() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.get_candidates", false]], "get_canonical_smiles() (in module baybe.utils.chemistry)": [[275, "baybe.utils.chemistry.get_canonical_smiles", false]], "get_invalid() (baybe.constraints.base.discreteconstraint method)": [[28, "baybe.constraints.base.DiscreteConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretecustomconstraint method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretedependenciesconstraint method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discreteexcludeconstraint method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretelinkedparametersconstraint method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretenolabelduplicatesconstraint method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretepermutationinvarianceconstraint method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discreteproductconstraint method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.get_invalid", false]], "get_invalid() (baybe.constraints.discrete.discretesumconstraint method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.get_invalid", false]], "get_model_params_validator() (in module baybe.surrogates.validation)": [[237, "baybe.surrogates.validation.get_model_params_validator", false]], "get_parameters_from_dataframe() (in module baybe.parameters.utils)": [[113, "baybe.parameters.utils.get_parameters_from_dataframe", false]], "get_subclasses() (in module baybe.utils.basic)": [[263, "baybe.utils.basic.get_subclasses", false]], "get_user_details() (in module baybe.telemetry)": [[252, "baybe.telemetry.get_user_details", false]], "group_duplicate_values() (in module baybe.utils.basic)": [[264, "baybe.utils.basic.group_duplicate_values", false]], "halfcauchyprior (class in baybe.priors.basic)": [[123, "baybe.priors.basic.HalfCauchyPrior", false]], "halfnormalprior (class in baybe.priors.basic)": [[124, "baybe.priors.basic.HalfNormalPrior", false]], "hilberts_factory() (in module baybe.utils.basic)": [[265, "baybe.utils.basic.hilberts_factory", false]], "hybrid (baybe.searchspace.core.searchspacetype attribute)": [[169, "baybe.searchspace.core.SearchSpaceType.HYBRID", false]], "hybrid_sampler (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.hybrid_sampler", false]], "incompatiblesearchspaceerror": [[52, "baybe.exceptions.IncompatibleSearchSpaceError", false]], "infiniteintervalerror": [[294, "baybe.utils.interval.InfiniteIntervalError", false]], "initial_recommender (baybe.recommenders.meta.sequential.twophasemetarecommender attribute)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.initial_recommender", false]], "int (baybe.parameters.enum.categoricalencoding attribute)": [[102, "baybe.parameters.enum.CategoricalEncoding.INT", false]], "interval (class in baybe.utils.interval)": [[295, "baybe.utils.interval.Interval", false]], "is_abstract() (in module baybe.utils.boolean)": [[270, "baybe.utils.boolean.is_abstract", false]], "is_bounded (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_bounded", false]], "is_continuous (baybe.constraints.base.constraint property)": [[26, "baybe.constraints.base.Constraint.is_continuous", false]], "is_continuous (baybe.constraints.base.continuousconstraint property)": [[27, "baybe.constraints.base.ContinuousConstraint.is_continuous", false]], "is_continuous (baybe.constraints.base.discreteconstraint property)": [[28, "baybe.constraints.base.DiscreteConstraint.is_continuous", false]], "is_continuous (baybe.constraints.continuous.continuouslinearequalityconstraint property)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.is_continuous", false]], "is_continuous (baybe.constraints.continuous.continuouslinearinequalityconstraint property)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretecustomconstraint property)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretedependenciesconstraint property)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discreteexcludeconstraint property)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretelinkedparametersconstraint property)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretenolabelduplicatesconstraint property)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretepermutationinvarianceconstraint property)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discreteproductconstraint property)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.is_continuous", false]], "is_continuous (baybe.constraints.discrete.discretesumconstraint property)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.is_continuous", false]], "is_continuous (baybe.parameters.base.continuousparameter property)": [[93, "baybe.parameters.base.ContinuousParameter.is_continuous", false]], "is_continuous (baybe.parameters.base.discreteparameter property)": [[94, "baybe.parameters.base.DiscreteParameter.is_continuous", false]], "is_continuous (baybe.parameters.base.parameter property)": [[95, "baybe.parameters.base.Parameter.is_continuous", false]], "is_continuous (baybe.parameters.categorical.categoricalparameter property)": [[97, "baybe.parameters.categorical.CategoricalParameter.is_continuous", false]], "is_continuous (baybe.parameters.categorical.taskparameter property)": [[98, "baybe.parameters.categorical.TaskParameter.is_continuous", false]], "is_continuous (baybe.parameters.custom.customdiscreteparameter property)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.is_continuous", false]], "is_continuous (baybe.parameters.numerical.numericalcontinuousparameter property)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.is_continuous", false]], "is_continuous (baybe.parameters.numerical.numericaldiscreteparameter property)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.is_continuous", false]], "is_continuous (baybe.parameters.substance.substanceparameter property)": [[111, "baybe.parameters.substance.SubstanceParameter.is_continuous", false]], "is_discrete (baybe.constraints.base.constraint property)": [[26, "baybe.constraints.base.Constraint.is_discrete", false]], "is_discrete (baybe.constraints.base.continuousconstraint property)": [[27, "baybe.constraints.base.ContinuousConstraint.is_discrete", false]], "is_discrete (baybe.constraints.base.discreteconstraint property)": [[28, "baybe.constraints.base.DiscreteConstraint.is_discrete", false]], "is_discrete (baybe.constraints.continuous.continuouslinearequalityconstraint property)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.is_discrete", false]], "is_discrete (baybe.constraints.continuous.continuouslinearinequalityconstraint property)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretecustomconstraint property)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretedependenciesconstraint property)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discreteexcludeconstraint property)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretelinkedparametersconstraint property)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretenolabelduplicatesconstraint property)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretepermutationinvarianceconstraint property)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discreteproductconstraint property)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.is_discrete", false]], "is_discrete (baybe.constraints.discrete.discretesumconstraint property)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.is_discrete", false]], "is_discrete (baybe.parameters.base.continuousparameter property)": [[93, "baybe.parameters.base.ContinuousParameter.is_discrete", false]], "is_discrete (baybe.parameters.base.discreteparameter property)": [[94, "baybe.parameters.base.DiscreteParameter.is_discrete", false]], "is_discrete (baybe.parameters.base.parameter property)": [[95, "baybe.parameters.base.Parameter.is_discrete", false]], "is_discrete (baybe.parameters.categorical.categoricalparameter property)": [[97, "baybe.parameters.categorical.CategoricalParameter.is_discrete", false]], "is_discrete (baybe.parameters.categorical.taskparameter property)": [[98, "baybe.parameters.categorical.TaskParameter.is_discrete", false]], "is_discrete (baybe.parameters.custom.customdiscreteparameter property)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.is_discrete", false]], "is_discrete (baybe.parameters.numerical.numericalcontinuousparameter property)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.is_discrete", false]], "is_discrete (baybe.parameters.numerical.numericaldiscreteparameter property)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.is_discrete", false]], "is_discrete (baybe.parameters.substance.substanceparameter property)": [[111, "baybe.parameters.substance.SubstanceParameter.is_discrete", false]], "is_empty (baybe.searchspace.continuous.subspacecontinuous property)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.is_empty", false]], "is_empty (baybe.searchspace.discrete.subspacediscrete property)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.is_empty", false]], "is_enabled() (in module baybe.telemetry)": [[253, "baybe.telemetry.is_enabled", false]], "is_finite (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_finite", false]], "is_fully_unbounded (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_fully_unbounded", false]], "is_half_bounded (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_half_bounded", false]], "is_in_range() (baybe.parameters.base.continuousparameter method)": [[93, "baybe.parameters.base.ContinuousParameter.is_in_range", false]], "is_in_range() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.is_in_range", false]], "is_in_range() (baybe.parameters.base.parameter method)": [[95, "baybe.parameters.base.Parameter.is_in_range", false]], "is_in_range() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.is_in_range", false]], "is_in_range() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.is_in_range", false]], "is_in_range() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.is_in_range", false]], "is_in_range() (baybe.parameters.numerical.numericalcontinuousparameter method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.is_in_range", false]], "is_in_range() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.is_in_range", false]], "is_in_range() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.is_in_range", false]], "is_left_bounded (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_left_bounded", false]], "is_numeric (baybe.parameters.base.continuousparameter attribute)": [[93, "baybe.parameters.base.ContinuousParameter.is_numeric", false]], "is_numeric (baybe.parameters.base.discreteparameter attribute)": [[94, "baybe.parameters.base.DiscreteParameter.is_numeric", false]], "is_numeric (baybe.parameters.base.parameter attribute)": [[95, "baybe.parameters.base.Parameter.is_numeric", false]], "is_numeric (baybe.parameters.categorical.categoricalparameter attribute)": [[97, "baybe.parameters.categorical.CategoricalParameter.is_numeric", false]], "is_numeric (baybe.parameters.categorical.taskparameter attribute)": [[98, "baybe.parameters.categorical.TaskParameter.is_numeric", false]], "is_numeric (baybe.parameters.custom.customdiscreteparameter attribute)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.is_numeric", false]], "is_numeric (baybe.parameters.numerical.numericalcontinuousparameter attribute)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.is_numeric", false]], "is_numeric (baybe.parameters.numerical.numericaldiscreteparameter attribute)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.is_numeric", false]], "is_numeric (baybe.parameters.substance.substanceparameter attribute)": [[111, "baybe.parameters.substance.SubstanceParameter.is_numeric", false]], "is_right_bounded (baybe.utils.interval.interval property)": [[295, "baybe.utils.interval.Interval.is_right_bounded", false]], "is_valid_smiles() (in module baybe.utils.chemistry)": [[276, "baybe.utils.chemistry.is_valid_smiles", false]], "joint_posterior (baybe.surrogates.base.surrogate attribute)": [[207, "baybe.surrogates.base.Surrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.custom.customonnxsurrogate attribute)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate attribute)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.linear.bayesianlinearsurrogate attribute)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.naive.meanpredictionsurrogate attribute)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.ngboost.ngboostsurrogate attribute)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.joint_posterior", false]], "joint_posterior (baybe.surrogates.random_forest.randomforestsurrogate attribute)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.joint_posterior", false]], "kernel (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory attribute)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.kernel", false]], "kernel (class in baybe.kernels.base)": [[62, "baybe.kernels.base.Kernel", false]], "kernel_factory (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate attribute)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.kernel_factory", false]], "kernelfactory (class in baybe.surrogates.gaussian_process.kernel_factory)": [[215, "baybe.surrogates.gaussian_process.kernel_factory.KernelFactory", false]], "kmeansclusteringrecommender (class in baybe.recommenders.pure.nonpredictive.clustering)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender", false]], "lengthscale_initial_value (baybe.kernels.basic.maternkernel attribute)": [[65, "baybe.kernels.basic.MaternKernel.lengthscale_initial_value", false]], "lengthscale_initial_value (baybe.kernels.basic.periodickernel attribute)": [[66, "baybe.kernels.basic.PeriodicKernel.lengthscale_initial_value", false]], "lengthscale_initial_value (baybe.kernels.basic.piecewisepolynomialkernel attribute)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.lengthscale_initial_value", false]], "lengthscale_initial_value (baybe.kernels.basic.rbfkernel attribute)": [[69, "baybe.kernels.basic.RBFKernel.lengthscale_initial_value", false]], "lengthscale_initial_value (baybe.kernels.basic.rffkernel attribute)": [[70, "baybe.kernels.basic.RFFKernel.lengthscale_initial_value", false]], "lengthscale_initial_value (baybe.kernels.basic.rqkernel attribute)": [[71, "baybe.kernels.basic.RQKernel.lengthscale_initial_value", false]], "lengthscale_prior (baybe.kernels.basic.maternkernel attribute)": [[65, "baybe.kernels.basic.MaternKernel.lengthscale_prior", false]], "lengthscale_prior (baybe.kernels.basic.periodickernel attribute)": [[66, "baybe.kernels.basic.PeriodicKernel.lengthscale_prior", false]], "lengthscale_prior (baybe.kernels.basic.piecewisepolynomialkernel attribute)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.lengthscale_prior", false]], "lengthscale_prior (baybe.kernels.basic.rbfkernel attribute)": [[69, "baybe.kernels.basic.RBFKernel.lengthscale_prior", false]], "lengthscale_prior (baybe.kernels.basic.rffkernel attribute)": [[70, "baybe.kernels.basic.RFFKernel.lengthscale_prior", false]], "lengthscale_prior (baybe.kernels.basic.rqkernel attribute)": [[71, "baybe.kernels.basic.RQKernel.lengthscale_prior", false]], "linear (baybe.targets.enum.targettransformation attribute)": [[244, "baybe.targets.enum.TargetTransformation.LINEAR", false]], "linear_transform() (in module baybe.targets.transforms)": [[249, "baybe.targets.transforms.linear_transform", false]], "linearkernel (class in baybe.kernels.basic)": [[64, "baybe.kernels.basic.LinearKernel", false]], "loc (baybe.priors.basic.lognormalprior attribute)": [[125, "baybe.priors.basic.LogNormalPrior.loc", false]], "loc (baybe.priors.basic.normalprior attribute)": [[126, "baybe.priors.basic.NormalPrior.loc", false]], "logexpectedimprovement (class in baybe.acquisition.acqfs)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement", false]], "lognormalprior (class in baybe.priors.basic)": [[125, "baybe.priors.basic.LogNormalPrior", false]], "lower (baybe.utils.interval.interval attribute)": [[295, "baybe.utils.interval.Interval.lower", false]], "make_gp_from_preset() (in module baybe.surrogates.gaussian_process.presets.core)": [[221, "baybe.surrogates.gaussian_process.presets.core.make_gp_from_preset", false]], "mark_as_measured() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.mark_as_measured", false]], "match (baybe.targets.enum.targetmode attribute)": [[243, "baybe.targets.enum.TargetMode.MATCH", false]], "maternkernel (class in baybe.kernels.basic)": [[65, "baybe.kernels.basic.MaternKernel", false]], "max (baybe.targets.enum.targetmode attribute)": [[243, "baybe.targets.enum.TargetMode.MAX", false]], "mean (baybe.objectives.enum.scalarizer attribute)": [[88, "baybe.objectives.enum.Scalarizer.MEAN", false]], "meanpredictionsurrogate (class in baybe.surrogates.naive)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate", false]], "measurements (baybe.campaign.campaign property)": [[23, "baybe.campaign.Campaign.measurements", false]], "memorysize (class in baybe.searchspace.discrete)": [[172, "baybe.searchspace.discrete.MemorySize", false]], "metadata (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.metadata", false]], "metarecommender (class in baybe.recommenders.meta.base)": [[135, "baybe.recommenders.meta.base.MetaRecommender", false]], "min (baybe.targets.enum.targetmode attribute)": [[243, "baybe.targets.enum.TargetMode.MIN", false]], "mode (baybe.recommenders.meta.sequential.sequentialmetarecommender attribute)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.mode", false]], "mode (baybe.targets.numerical.numericaltarget attribute)": [[246, "baybe.targets.numerical.NumericalTarget.mode", false]], "model_class (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.model_class", false]], "model_class (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.model_class", false]], "model_class (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.model_class", false]], "model_class (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.model_class", false]], "model_cluster_num_parameter_name (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.model_cluster_num_parameter_name", false]], "model_cluster_num_parameter_name (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.model_cluster_num_parameter_name", false]], "model_cluster_num_parameter_name (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.model_cluster_num_parameter_name", false]], "model_cluster_num_parameter_name (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.model_cluster_num_parameter_name", false]], "model_params (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender attribute)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.model_params", false]], "model_params (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender attribute)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.model_params", false]], "model_params (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender attribute)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.model_params", false]], "model_params (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender attribute)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.model_params", false]], "model_params (baybe.surrogates.linear.bayesianlinearsurrogate attribute)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.model_params", false]], "model_params (baybe.surrogates.ngboost.ngboostsurrogate attribute)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.model_params", false]], "model_params (baybe.surrogates.random_forest.randomforestsurrogate attribute)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.model_params", false]], "module": [[0, "module-baybe", false], [1, "module-baybe.acquisition", false], [2, "module-baybe.acquisition.acqfs", false], [15, "module-baybe.acquisition.base", false], [17, "module-baybe.acquisition.partial", false], [19, "module-baybe.acquisition.utils", false], [22, "module-baybe.campaign", false], [24, "module-baybe.constraints", false], [25, "module-baybe.constraints.base", false], [29, "module-baybe.constraints.conditions", false], [33, "module-baybe.constraints.continuous", false], [36, "module-baybe.constraints.discrete", false], [45, "module-baybe.constraints.validation", false], [47, "module-baybe.deprecation", false], [49, "module-baybe.exceptions", false], [60, "module-baybe.kernels", false], [61, "module-baybe.kernels.base", false], [63, "module-baybe.kernels.basic", false], [72, "module-baybe.kernels.composite", false], [76, "module-baybe.objective", false], [78, "module-baybe.objectives", false], [79, "module-baybe.objectives.base", false], [82, "module-baybe.objectives.deprecation", false], [84, "module-baybe.objectives.desirability", false], [87, "module-baybe.objectives.enum", false], [89, "module-baybe.objectives.single", false], [91, "module-baybe.parameters", false], [92, "module-baybe.parameters.base", false], [96, "module-baybe.parameters.categorical", false], [99, "module-baybe.parameters.custom", false], [101, "module-baybe.parameters.enum", false], [106, "module-baybe.parameters.numerical", false], [109, "module-baybe.parameters.substance", false], [112, "module-baybe.parameters.utils", false], [114, "module-baybe.parameters.validation", false], [118, "module-baybe.priors", false], [119, "module-baybe.priors.base", false], [121, "module-baybe.priors.basic", false], [128, "module-baybe.recommenders", false], [129, "module-baybe.recommenders.base", false], [131, "module-baybe.recommenders.deprecation", false], [133, "module-baybe.recommenders.meta", false], [134, "module-baybe.recommenders.meta.base", false], [136, "module-baybe.recommenders.meta.sequential", false], [140, "module-baybe.recommenders.naive", false], [142, "module-baybe.recommenders.pure", false], [143, "module-baybe.recommenders.pure.base", false], [145, "module-baybe.recommenders.pure.bayesian", false], [146, "module-baybe.recommenders.pure.bayesian.base", false], [148, "module-baybe.recommenders.pure.bayesian.sequential_greedy", false], [150, "module-baybe.recommenders.pure.nonpredictive", false], [151, "module-baybe.recommenders.pure.nonpredictive.base", false], [153, "module-baybe.recommenders.pure.nonpredictive.clustering", false], [158, "module-baybe.recommenders.pure.nonpredictive.sampling", false], [161, "module-baybe.scaler", false], [164, "module-baybe.searchspace", false], [165, "module-baybe.searchspace.continuous", false], [167, "module-baybe.searchspace.core", false], [171, "module-baybe.searchspace.discrete", false], [176, "module-baybe.searchspace.validation", false], [179, "module-baybe.serialization", false], [180, "module-baybe.serialization.core", false], [187, "module-baybe.serialization.mixin", false], [189, "module-baybe.serialization.utils", false], [192, "module-baybe.simulation", false], [193, "module-baybe.simulation.core", false], [195, "module-baybe.simulation.lookup", false], [196, "module-baybe.simulation.scenarios", false], [198, "module-baybe.simulation.transfer_learning", false], [200, "module-baybe.strategies", false], [201, "module-baybe.strategies.deprecation", false], [205, "module-baybe.surrogates", false], [206, "module-baybe.surrogates.base", false], [208, "module-baybe.surrogates.custom", false], [211, "module-baybe.surrogates.gaussian_process", false], [212, "module-baybe.surrogates.gaussian_process.core", false], [214, "module-baybe.surrogates.gaussian_process.kernel_factory", false], [218, "module-baybe.surrogates.gaussian_process.presets", false], [219, "module-baybe.surrogates.gaussian_process.presets.core", false], [222, "module-baybe.surrogates.gaussian_process.presets.default", false], [224, "module-baybe.surrogates.linear", false], [226, "module-baybe.surrogates.naive", false], [228, "module-baybe.surrogates.ngboost", false], [230, "module-baybe.surrogates.random_forest", false], [232, "module-baybe.surrogates.utils", false], [236, "module-baybe.surrogates.validation", false], [239, "module-baybe.targets", false], [240, "module-baybe.targets.base", false], [242, "module-baybe.targets.enum", false], [245, "module-baybe.targets.numerical", false], [247, "module-baybe.targets.transforms", false], [251, "module-baybe.telemetry", false], [256, "module-baybe.utils", false], [257, "module-baybe.utils.basic", false], [268, "module-baybe.utils.boolean", false], [272, "module-baybe.utils.botorch_wrapper", false], [274, "module-baybe.utils.chemistry", false], [282, "module-baybe.utils.conversion", false], [284, "module-baybe.utils.dataframe", false], [293, "module-baybe.utils.interval", false], [298, "module-baybe.utils.memory", false], [300, "module-baybe.utils.numerical", false], [307, "module-baybe.utils.plotting", false], [309, "module-baybe.utils.random", false], [312, "module-baybe.utils.sampling_algorithms", false], [314, "module-baybe.utils.torch", false], [317, "module-baybe.utils.validation", false]], "mordred (baybe.parameters.enum.substanceencoding attribute)": [[105, "baybe.parameters.enum.SubstanceEncoding.MORDRED", false]], "morgan_fp (baybe.parameters.enum.substanceencoding attribute)": [[105, "baybe.parameters.enum.SubstanceEncoding.MORGAN_FP", false]], "n_batches_done (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.n_batches_done", false]], "n_fits_done (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.n_fits_done", false]], "n_tasks (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.n_tasks", false]], "naivehybridspacerecommender (class in baybe.recommenders.naive)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender", false]], "name (baybe.parameters.base.continuousparameter attribute)": [[93, "baybe.parameters.base.ContinuousParameter.name", false]], "name (baybe.parameters.base.discreteparameter attribute)": [[94, "baybe.parameters.base.DiscreteParameter.name", false]], "name (baybe.parameters.base.parameter attribute)": [[95, "baybe.parameters.base.Parameter.name", false]], "name (baybe.parameters.categorical.categoricalparameter attribute)": [[97, "baybe.parameters.categorical.CategoricalParameter.name", false]], "name (baybe.parameters.categorical.taskparameter attribute)": [[98, "baybe.parameters.categorical.TaskParameter.name", false]], "name (baybe.parameters.custom.customdiscreteparameter attribute)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.name", false]], "name (baybe.parameters.numerical.numericalcontinuousparameter attribute)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.name", false]], "name (baybe.parameters.numerical.numericaldiscreteparameter attribute)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.name", false]], "name (baybe.parameters.substance.substanceparameter attribute)": [[111, "baybe.parameters.substance.SubstanceParameter.name", false]], "name (baybe.targets.base.target attribute)": [[241, "baybe.targets.base.Target.name", false]], "name (baybe.targets.numerical.numericaltarget attribute)": [[246, "baybe.targets.numerical.NumericalTarget.name", false]], "name_to_smiles() (in module baybe.utils.chemistry)": [[277, "baybe.utils.chemistry.name_to_smiles", false]], "ngboostsurrogate (class in baybe.surrogates.ngboost)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate", false]], "nomcacquisitionfunctionerror": [[53, "baybe.exceptions.NoMCAcquisitionFunctionError", false]], "non_inf_float() (in module baybe.utils.validation)": [[319, "baybe.utils.validation.non_inf_float", false]], "non_nan_float() (in module baybe.utils.validation)": [[320, "baybe.utils.validation.non_nan_float", false]], "nonpredictiverecommender (class in baybe.recommenders.pure.nonpredictive.base)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender", false]], "norecommenderslefterror": [[54, "baybe.exceptions.NoRecommendersLeftError", false]], "normalprior (class in baybe.priors.basic)": [[126, "baybe.priors.basic.NormalPrior", false]], "notenoughpointslefterror": [[55, "baybe.exceptions.NotEnoughPointsLeftError", false]], "nothingtosimulateerror": [[56, "baybe.exceptions.NothingToSimulateError", false]], "nu (baybe.kernels.basic.maternkernel attribute)": [[65, "baybe.kernels.basic.MaternKernel.nu", false]], "num_samples (baybe.kernels.basic.rffkernel attribute)": [[70, "baybe.kernels.basic.RFFKernel.num_samples", false]], "numerical_measurements_must_be_within_tolerance (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.numerical_measurements_must_be_within_tolerance", false]], "numericalcontinuousparameter (class in baybe.parameters.numerical)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter", false]], "numericaldiscreteparameter (class in baybe.parameters.numerical)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter", false]], "numericaltarget (class in baybe.targets.numerical)": [[246, "baybe.targets.numerical.NumericalTarget", false]], "numericalunderflowerror": [[57, "baybe.exceptions.NumericalUnderflowError", false]], "objective (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.objective", false]], "objective (class in baybe.objectives.base)": [[80, "baybe.objectives.base.Objective", false]], "objective() (in module baybe.objective)": [[77, "baybe.objective.Objective", false]], "offset_initial_value (baybe.kernels.basic.polynomialkernel attribute)": [[68, "baybe.kernels.basic.PolynomialKernel.offset_initial_value", false]], "offset_prior (baybe.kernels.basic.polynomialkernel attribute)": [[68, "baybe.kernels.basic.PolynomialKernel.offset_prior", false]], "ohe (baybe.parameters.enum.categoricalencoding attribute)": [[102, "baybe.parameters.enum.CategoricalEncoding.OHE", false]], "onnx_input_name (baybe.surrogates.custom.customonnxsurrogate attribute)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.onnx_input_name", false]], "onnx_str (baybe.surrogates.custom.customonnxsurrogate attribute)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.onnx_str", false]], "operator (baybe.constraints.conditions.thresholdcondition attribute)": [[32, "baybe.constraints.conditions.ThresholdCondition.operator", false]], "optionalimporterror": [[58, "baybe.exceptions.OptionalImportError", false]], "outputscale_initial_value (baybe.kernels.composite.scalekernel attribute)": [[75, "baybe.kernels.composite.ScaleKernel.outputscale_initial_value", false]], "outputscale_prior (baybe.kernels.composite.scalekernel attribute)": [[75, "baybe.kernels.composite.ScaleKernel.outputscale_prior", false]], "pamclusteringrecommender (class in baybe.recommenders.pure.nonpredictive.clustering)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender", false]], "param_bounds_comp (baybe.searchspace.continuous.subspacecontinuous property)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.param_bounds_comp", false]], "param_bounds_comp (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.param_bounds_comp", false]], "param_bounds_comp (baybe.searchspace.discrete.subspacediscrete property)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.param_bounds_comp", false]], "param_names (baybe.searchspace.continuous.subspacecontinuous property)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.param_names", false]], "parameter (class in baybe.parameters.base)": [[95, "baybe.parameters.base.Parameter", false]], "parameter_cartesian_prod_to_df() (in module baybe.searchspace.discrete)": [[174, "baybe.searchspace.discrete.parameter_cartesian_prod_to_df", false]], "parameterencoding (class in baybe.parameters.enum)": [[104, "baybe.parameters.enum.ParameterEncoding", false]], "parameters (baybe.campaign.campaign property)": [[23, "baybe.campaign.Campaign.parameters", false]], "parameters (baybe.constraints.base.constraint attribute)": [[26, "baybe.constraints.base.Constraint.parameters", false]], "parameters (baybe.constraints.base.continuousconstraint attribute)": [[27, "baybe.constraints.base.ContinuousConstraint.parameters", false]], "parameters (baybe.constraints.base.discreteconstraint attribute)": [[28, "baybe.constraints.base.DiscreteConstraint.parameters", false]], "parameters (baybe.constraints.continuous.continuouslinearequalityconstraint attribute)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.parameters", false]], "parameters (baybe.constraints.continuous.continuouslinearinequalityconstraint attribute)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretecustomconstraint attribute)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discreteexcludeconstraint attribute)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretelinkedparametersconstraint attribute)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretenolabelduplicatesconstraint attribute)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretepermutationinvarianceconstraint attribute)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discreteproductconstraint attribute)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.parameters", false]], "parameters (baybe.constraints.discrete.discretesumconstraint attribute)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.parameters", false]], "parameters (baybe.searchspace.continuous.subspacecontinuous attribute)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.parameters", false]], "parameters (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.parameters", false]], "parameters (baybe.searchspace.discrete.subspacediscrete attribute)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.parameters", false]], "partialacquisitionfunction (class in baybe.acquisition.partial)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction", false]], "period_length_initial_value (baybe.kernels.basic.periodickernel attribute)": [[66, "baybe.kernels.basic.PeriodicKernel.period_length_initial_value", false]], "period_length_prior (baybe.kernels.basic.periodickernel attribute)": [[66, "baybe.kernels.basic.PeriodicKernel.period_length_prior", false]], "periodickernel (class in baybe.kernels.basic)": [[66, "baybe.kernels.basic.PeriodicKernel", false]], "permutation_invariant (baybe.constraints.discrete.discretedependenciesconstraint attribute)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.permutation_invariant", false]], "piecewisepolynomialkernel (class in baybe.kernels.basic)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel", false]], "pin_discrete (baybe.acquisition.partial.partialacquisitionfunction attribute)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction.pin_discrete", false]], "pinned_part (baybe.acquisition.partial.partialacquisitionfunction attribute)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction.pinned_part", false]], "plainkernelfactory (class in baybe.surrogates.gaussian_process.kernel_factory)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory", false]], "polynomialkernel (class in baybe.kernels.basic)": [[68, "baybe.kernels.basic.PolynomialKernel", false]], "posterior() (baybe.surrogates.base.surrogate method)": [[207, "baybe.surrogates.base.Surrogate.posterior", false]], "posterior() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.posterior", false]], "posterior() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.posterior", false]], "posterior() (baybe.surrogates.linear.bayesianlinearsurrogate method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.posterior", false]], "posterior() (baybe.surrogates.naive.meanpredictionsurrogate method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.posterior", false]], "posterior() (baybe.surrogates.ngboost.ngboostsurrogate method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.posterior", false]], "posterior() (baybe.surrogates.random_forest.randomforestsurrogate method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.posterior", false]], "posteriormean (class in baybe.acquisition.acqfs)": [[5, "baybe.acquisition.acqfs.PosteriorMean", false]], "power (baybe.kernels.basic.polynomialkernel attribute)": [[68, "baybe.kernels.basic.PolynomialKernel.power", false]], "pretty_print_df() (in module baybe.utils.dataframe)": [[291, "baybe.utils.dataframe.pretty_print_df", false]], "prior (class in baybe.priors.base)": [[120, "baybe.priors.base.Prior", false]], "probabilityofimprovement (class in baybe.acquisition.acqfs)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement", false]], "productkernel (class in baybe.kernels.composite)": [[74, "baybe.kernels.composite.ProductKernel", false]], "prune_baseline (baybe.acquisition.acqfs.qlognoisyexpectedimprovement attribute)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.prune_baseline", false]], "prune_baseline (baybe.acquisition.acqfs.qnoisyexpectedimprovement attribute)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.prune_baseline", false]], "purerecommender (class in baybe.recommenders.pure.base)": [[144, "baybe.recommenders.pure.base.PureRecommender", false]], "q (baybe.kernels.basic.piecewisepolynomialkernel attribute)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.q", false]], "qexpectedimprovement (class in baybe.acquisition.acqfs)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement", false]], "qlogexpectedimprovement (class in baybe.acquisition.acqfs)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement", false]], "qlognoisyexpectedimprovement (class in baybe.acquisition.acqfs)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement", false]], "qnoisyexpectedimprovement (class in baybe.acquisition.acqfs)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement", false]], "qprobabilityofimprovement (class in baybe.acquisition.acqfs)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement", false]], "qsimpleregret (class in baybe.acquisition.acqfs)": [[13, "baybe.acquisition.acqfs.qSimpleRegret", false]], "qupperconfidencebound (class in baybe.acquisition.acqfs)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound", false]], "randomforestsurrogate (class in baybe.surrogates.random_forest)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate", false]], "randomrecommender (class in baybe.recommenders.pure.nonpredictive.sampling)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender", false]], "rate (baybe.priors.basic.gammaprior attribute)": [[122, "baybe.priors.basic.GammaPrior.rate", false]], "rbfkernel (class in baybe.kernels.basic)": [[69, "baybe.kernels.basic.RBFKernel", false]], "rdkit (baybe.parameters.enum.substanceencoding attribute)": [[105, "baybe.parameters.enum.SubstanceEncoding.RDKIT", false]], "recommend() (baybe.campaign.campaign method)": [[23, "baybe.campaign.Campaign.recommend", false]], "recommend() (baybe.recommenders.base.recommenderprotocol method)": [[130, "baybe.recommenders.base.RecommenderProtocol.recommend", false]], "recommend() (baybe.recommenders.meta.base.metarecommender method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.recommend", false]], "recommend() (baybe.recommenders.meta.sequential.sequentialmetarecommender method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.recommend", false]], "recommend() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.recommend", false]], "recommend() (baybe.recommenders.meta.sequential.twophasemetarecommender method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.recommend", false]], "recommend() (baybe.recommenders.naive.naivehybridspacerecommender method)": [[141, "baybe.recommenders.naive.NaiveHybridSpaceRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.base.purerecommender method)": [[144, "baybe.recommenders.pure.base.PureRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.bayesian.base.bayesianrecommender method)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender method)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.base.nonpredictiverecommender method)": [[152, "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.clustering.gaussianmixtureclusteringrecommender method)": [[154, "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.clustering.kmeansclusteringrecommender method)": [[155, "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.clustering.pamclusteringrecommender method)": [[156, "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.clustering.sklearnclusteringrecommender method)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.sampling.fpsrecommender method)": [[159, "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender.recommend", false]], "recommend() (baybe.recommenders.pure.nonpredictive.sampling.randomrecommender method)": [[160, "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender.recommend", false]], "recommender (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.recommender", false]], "recommender (baybe.recommenders.meta.sequential.twophasemetarecommender attribute)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.recommender", false]], "recommenderprotocol (class in baybe.recommenders.base)": [[130, "baybe.recommenders.base.RecommenderProtocol", false]], "recommenders (baybe.recommenders.meta.sequential.sequentialmetarecommender attribute)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.recommenders", false]], "recommenders (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender attribute)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.recommenders", false]], "refers_to() (in module baybe.utils.basic)": [[266, "baybe.utils.basic.refers_to", false]], "register_custom_architecture() (in module baybe.surrogates.custom)": [[210, "baybe.surrogates.custom.register_custom_architecture", false]], "rffkernel (class in baybe.kernels.basic)": [[70, "baybe.kernels.basic.RFFKernel", false]], "rhs (baybe.constraints.base.continuousconstraint attribute)": [[27, "baybe.constraints.base.ContinuousConstraint.rhs", false]], "rhs (baybe.constraints.continuous.continuouslinearequalityconstraint attribute)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.rhs", false]], "rhs (baybe.constraints.continuous.continuouslinearinequalityconstraint attribute)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.rhs", false]], "rqkernel (class in baybe.kernels.basic)": [[71, "baybe.kernels.basic.RQKernel", false]], "samples_full_factorial() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.samples_full_factorial", false]], "samples_random() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.samples_random", false]], "sampling_percentage (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.sampling_percentage", false]], "scalarize() (in module baybe.objectives.desirability)": [[86, "baybe.objectives.desirability.scalarize", false]], "scalarizer (baybe.objectives.desirability.desirabilityobjective attribute)": [[85, "baybe.objectives.desirability.DesirabilityObjective.scalarizer", false]], "scalarizer (class in baybe.objectives.enum)": [[88, "baybe.objectives.enum.Scalarizer", false]], "scale (baybe.priors.basic.halfcauchyprior attribute)": [[123, "baybe.priors.basic.HalfCauchyPrior.scale", false]], "scale (baybe.priors.basic.halfnormalprior attribute)": [[124, "baybe.priors.basic.HalfNormalPrior.scale", false]], "scale (baybe.priors.basic.lognormalprior attribute)": [[125, "baybe.priors.basic.LogNormalPrior.scale", false]], "scale (baybe.priors.basic.normalprior attribute)": [[126, "baybe.priors.basic.NormalPrior.scale", false]], "scalekernel (class in baybe.kernels.composite)": [[75, "baybe.kernels.composite.ScaleKernel", false]], "scaler (class in baybe.scaler)": [[163, "baybe.scaler.Scaler", false]], "searchspace (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.searchspace", false]], "searchspace (class in baybe.searchspace.core)": [[168, "baybe.searchspace.core.SearchSpace", false]], "searchspacetype (class in baybe.searchspace.core)": [[169, "baybe.searchspace.core.SearchSpaceType", false]], "select_constructor_hook() (in module baybe.serialization.core)": [[185, "baybe.serialization.core.select_constructor_hook", false]], "select_recommender() (baybe.recommenders.meta.base.metarecommender method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.select_recommender", false]], "select_recommender() (baybe.recommenders.meta.sequential.sequentialmetarecommender method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.select_recommender", false]], "select_recommender() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.select_recommender", false]], "select_recommender() (baybe.recommenders.meta.sequential.twophasemetarecommender method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.select_recommender", false]], "selection (baybe.constraints.conditions.subselectioncondition property)": [[31, "baybe.constraints.conditions.SubSelectionCondition.selection", false]], "sequentialgreedyrecommender (class in baybe.recommenders.pure.bayesian.sequential_greedy)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender", false]], "sequentialmetarecommender (class in baybe.recommenders.meta.sequential)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender", false]], "sequentialstrategy() (in module baybe.strategies.deprecation)": [[202, "baybe.strategies.deprecation.SequentialStrategy", false]], "serialize_dataframe() (in module baybe.serialization.utils)": [[191, "baybe.serialization.utils.serialize_dataframe", false]], "serialmixin (class in baybe.serialization.mixin)": [[188, "baybe.serialization.mixin.SerialMixin", false]], "set_random_seed() (in module baybe.utils.random)": [[310, "baybe.utils.random.set_random_seed", false]], "set_x_pending() (baybe.acquisition.partial.partialacquisitionfunction method)": [[18, "baybe.acquisition.partial.PartialAcquisitionFunction.set_X_pending", false]], "sigma (baybe.priors.basic.smoothedboxprior attribute)": [[127, "baybe.priors.basic.SmoothedBoxPrior.sigma", false]], "simulate_experiment() (in module baybe.simulation.core)": [[194, "baybe.simulation.core.simulate_experiment", false]], "simulate_scenarios() (in module baybe.simulation.scenarios)": [[197, "baybe.simulation.scenarios.simulate_scenarios", false]], "simulate_transfer_learning() (in module baybe.simulation.transfer_learning)": [[199, "baybe.simulation.transfer_learning.simulate_transfer_learning", false]], "singletargetobjective (class in baybe.objectives.single)": [[90, "baybe.objectives.single.SingleTargetObjective", false]], "sklearnclusteringrecommender (class in baybe.recommenders.pure.nonpredictive.clustering)": [[157, "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender", false]], "smiles (in module baybe.parameters.substance)": [[110, "baybe.parameters.substance.Smiles", false]], "smiles_to_fp_features() (in module baybe.utils.chemistry)": [[278, "baybe.utils.chemistry.smiles_to_fp_features", false]], "smiles_to_molecules() (in module baybe.utils.chemistry)": [[279, "baybe.utils.chemistry.smiles_to_molecules", false]], "smiles_to_mordred_features() (in module baybe.utils.chemistry)": [[280, "baybe.utils.chemistry.smiles_to_mordred_features", false]], "smiles_to_rdkit_features() (in module baybe.utils.chemistry)": [[281, "baybe.utils.chemistry.smiles_to_rdkit_features", false]], "smoothedboxprior (class in baybe.priors.basic)": [[127, "baybe.priors.basic.SmoothedBoxPrior", false]], "str_to_acqf() (in module baybe.acquisition.utils)": [[21, "baybe.acquisition.utils.str_to_acqf", false]], "strategy (baybe.campaign.campaign attribute)": [[23, "baybe.campaign.Campaign.strategy", false]], "streamingsequentialmetarecommender (class in baybe.recommenders.meta.sequential)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender", false]], "streamingsequentialstrategy() (in module baybe.strategies.deprecation)": [[203, "baybe.strategies.deprecation.StreamingSequentialStrategy", false]], "strtobool() (in module baybe.utils.boolean)": [[271, "baybe.utils.boolean.strtobool", false]], "structure_objective() (in module baybe.objectives.deprecation)": [[83, "baybe.objectives.deprecation.structure_objective", false]], "structure_recommender_protocol() (in module baybe.recommenders.deprecation)": [[132, "baybe.recommenders.deprecation.structure_recommender_protocol", false]], "subclasses (baybe.scaler.defaultscaler attribute)": [[162, "baybe.scaler.DefaultScaler.SUBCLASSES", false]], "subclasses (baybe.scaler.scaler attribute)": [[163, "baybe.scaler.Scaler.SUBCLASSES", false]], "subselectioncondition (class in baybe.constraints.conditions)": [[31, "baybe.constraints.conditions.SubSelectionCondition", false]], "subspacecontinuous (class in baybe.searchspace.continuous)": [[166, "baybe.searchspace.continuous.SubspaceContinuous", false]], "subspacediscrete (class in baybe.searchspace.discrete)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete", false]], "substanceencoding (class in baybe.parameters.enum)": [[105, "baybe.parameters.enum.SubstanceEncoding", false]], "substanceparameter (class in baybe.parameters.substance)": [[111, "baybe.parameters.substance.SubstanceParameter", false]], "summary() (baybe.constraints.base.constraint method)": [[26, "baybe.constraints.base.Constraint.summary", false]], "summary() (baybe.constraints.base.continuousconstraint method)": [[27, "baybe.constraints.base.ContinuousConstraint.summary", false]], "summary() (baybe.constraints.base.discreteconstraint method)": [[28, "baybe.constraints.base.DiscreteConstraint.summary", false]], "summary() (baybe.constraints.continuous.continuouslinearequalityconstraint method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.summary", false]], "summary() (baybe.constraints.continuous.continuouslinearinequalityconstraint method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretecustomconstraint method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretedependenciesconstraint method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.summary", false]], "summary() (baybe.constraints.discrete.discreteexcludeconstraint method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretelinkedparametersconstraint method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretenolabelduplicatesconstraint method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretepermutationinvarianceconstraint method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.summary", false]], "summary() (baybe.constraints.discrete.discreteproductconstraint method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.summary", false]], "summary() (baybe.constraints.discrete.discretesumconstraint method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.summary", false]], "summary() (baybe.parameters.base.continuousparameter method)": [[93, "baybe.parameters.base.ContinuousParameter.summary", false]], "summary() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.summary", false]], "summary() (baybe.parameters.base.parameter method)": [[95, "baybe.parameters.base.Parameter.summary", false]], "summary() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.summary", false]], "summary() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.summary", false]], "summary() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.summary", false]], "summary() (baybe.parameters.numerical.numericalcontinuousparameter method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.summary", false]], "summary() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.summary", false]], "summary() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.summary", false]], "summary() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.summary", false]], "summary() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.summary", false]], "supports_transfer_learning (baybe.surrogates.base.surrogate attribute)": [[207, "baybe.surrogates.base.Surrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.custom.customonnxsurrogate attribute)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate attribute)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.linear.bayesianlinearsurrogate attribute)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.naive.meanpredictionsurrogate attribute)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.ngboost.ngboostsurrogate attribute)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.supports_transfer_learning", false]], "supports_transfer_learning (baybe.surrogates.random_forest.randomforestsurrogate attribute)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.supports_transfer_learning", false]], "surrogate (class in baybe.surrogates.base)": [[207, "baybe.surrogates.base.Surrogate", false]], "surrogate_model (baybe.recommenders.pure.bayesian.base.bayesianrecommender attribute)": [[147, "baybe.recommenders.pure.bayesian.base.BayesianRecommender.surrogate_model", false]], "surrogate_model (baybe.recommenders.pure.bayesian.sequential_greedy.sequentialgreedyrecommender attribute)": [[149, "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender.surrogate_model", false]], "switch_after (baybe.recommenders.meta.sequential.twophasemetarecommender attribute)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.switch_after", false]], "target (class in baybe.targets.base)": [[241, "baybe.targets.base.Target", false]], "targetmode (class in baybe.targets.enum)": [[243, "baybe.targets.enum.TargetMode", false]], "targets (baybe.campaign.campaign property)": [[23, "baybe.campaign.Campaign.targets", false]], "targets (baybe.objectives.base.objective property)": [[80, "baybe.objectives.base.Objective.targets", false]], "targets (baybe.objectives.desirability.desirabilityobjective property)": [[85, "baybe.objectives.desirability.DesirabilityObjective.targets", false]], "targets (baybe.objectives.single.singletargetobjective property)": [[90, "baybe.objectives.single.SingleTargetObjective.targets", false]], "targettransformation (class in baybe.targets.enum)": [[244, "baybe.targets.enum.TargetTransformation", false]], "task_idx (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.task_idx", false]], "taskparameter (class in baybe.parameters.categorical)": [[98, "baybe.parameters.categorical.TaskParameter", false]], "telemetry_record_recommended_measurement_percentage() (in module baybe.telemetry)": [[254, "baybe.telemetry.telemetry_record_recommended_measurement_percentage", false]], "telemetry_record_value() (in module baybe.telemetry)": [[255, "baybe.telemetry.telemetry_record_value", false]], "temporary_seed() (in module baybe.utils.random)": [[311, "baybe.utils.random.temporary_seed", false]], "threshold (baybe.constraints.conditions.thresholdcondition attribute)": [[32, "baybe.constraints.conditions.ThresholdCondition.threshold", false]], "thresholdcondition (class in baybe.constraints.conditions)": [[32, "baybe.constraints.conditions.ThresholdCondition", false]], "to_botorch() (baybe.acquisition.acqfs.expectedimprovement method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.logexpectedimprovement method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.posteriormean method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.probabilityofimprovement method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qexpectedimprovement method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qlogexpectedimprovement method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qnoisyexpectedimprovement method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qprobabilityofimprovement method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qsimpleregret method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.qupperconfidencebound method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.to_botorch", false]], "to_botorch() (baybe.acquisition.acqfs.upperconfidencebound method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.to_botorch", false]], "to_botorch() (baybe.acquisition.base.acquisitionfunction method)": [[16, "baybe.acquisition.base.AcquisitionFunction.to_botorch", false]], "to_botorch() (baybe.constraints.base.continuousconstraint method)": [[27, "baybe.constraints.base.ContinuousConstraint.to_botorch", false]], "to_botorch() (baybe.constraints.continuous.continuouslinearequalityconstraint method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.to_botorch", false]], "to_botorch() (baybe.constraints.continuous.continuouslinearinequalityconstraint method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.to_botorch", false]], "to_dict() (baybe.acquisition.acqfs.expectedimprovement method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.logexpectedimprovement method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.posteriormean method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.probabilityofimprovement method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qexpectedimprovement method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qlogexpectedimprovement method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qnoisyexpectedimprovement method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qprobabilityofimprovement method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qsimpleregret method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.qupperconfidencebound method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.to_dict", false]], "to_dict() (baybe.acquisition.acqfs.upperconfidencebound method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.to_dict", false]], "to_dict() (baybe.acquisition.base.acquisitionfunction method)": [[16, "baybe.acquisition.base.AcquisitionFunction.to_dict", false]], "to_dict() (baybe.campaign.campaign method)": [[23, "baybe.campaign.Campaign.to_dict", false]], "to_dict() (baybe.constraints.base.constraint method)": [[26, "baybe.constraints.base.Constraint.to_dict", false]], "to_dict() (baybe.constraints.base.continuousconstraint method)": [[27, "baybe.constraints.base.ContinuousConstraint.to_dict", false]], "to_dict() (baybe.constraints.base.discreteconstraint method)": [[28, "baybe.constraints.base.DiscreteConstraint.to_dict", false]], "to_dict() (baybe.constraints.conditions.condition method)": [[30, "baybe.constraints.conditions.Condition.to_dict", false]], "to_dict() (baybe.constraints.conditions.subselectioncondition method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.to_dict", false]], "to_dict() (baybe.constraints.conditions.thresholdcondition method)": [[32, "baybe.constraints.conditions.ThresholdCondition.to_dict", false]], "to_dict() (baybe.constraints.continuous.continuouslinearequalityconstraint method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.to_dict", false]], "to_dict() (baybe.constraints.continuous.continuouslinearinequalityconstraint method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretecustomconstraint method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretedependenciesconstraint method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discreteexcludeconstraint method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretelinkedparametersconstraint method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretenolabelduplicatesconstraint method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretepermutationinvarianceconstraint method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discreteproductconstraint method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.to_dict", false]], "to_dict() (baybe.constraints.discrete.discretesumconstraint method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.to_dict", false]], "to_dict() (baybe.kernels.base.kernel method)": [[62, "baybe.kernels.base.Kernel.to_dict", false]], "to_dict() (baybe.kernels.basic.linearkernel method)": [[64, "baybe.kernels.basic.LinearKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.maternkernel method)": [[65, "baybe.kernels.basic.MaternKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.periodickernel method)": [[66, "baybe.kernels.basic.PeriodicKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.piecewisepolynomialkernel method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.polynomialkernel method)": [[68, "baybe.kernels.basic.PolynomialKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.rbfkernel method)": [[69, "baybe.kernels.basic.RBFKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.rffkernel method)": [[70, "baybe.kernels.basic.RFFKernel.to_dict", false]], "to_dict() (baybe.kernels.basic.rqkernel method)": [[71, "baybe.kernels.basic.RQKernel.to_dict", false]], "to_dict() (baybe.kernels.composite.additivekernel method)": [[73, "baybe.kernels.composite.AdditiveKernel.to_dict", false]], "to_dict() (baybe.kernels.composite.productkernel method)": [[74, "baybe.kernels.composite.ProductKernel.to_dict", false]], "to_dict() (baybe.kernels.composite.scalekernel method)": [[75, "baybe.kernels.composite.ScaleKernel.to_dict", false]], "to_dict() (baybe.objectives.base.objective method)": [[80, "baybe.objectives.base.Objective.to_dict", false]], "to_dict() (baybe.objectives.desirability.desirabilityobjective method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.to_dict", false]], "to_dict() (baybe.objectives.single.singletargetobjective method)": [[90, "baybe.objectives.single.SingleTargetObjective.to_dict", false]], "to_dict() (baybe.parameters.base.continuousparameter method)": [[93, "baybe.parameters.base.ContinuousParameter.to_dict", false]], "to_dict() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.to_dict", false]], "to_dict() (baybe.parameters.base.parameter method)": [[95, "baybe.parameters.base.Parameter.to_dict", false]], "to_dict() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.to_dict", false]], "to_dict() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.to_dict", false]], "to_dict() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.to_dict", false]], "to_dict() (baybe.parameters.numerical.numericalcontinuousparameter method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.to_dict", false]], "to_dict() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.to_dict", false]], "to_dict() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.to_dict", false]], "to_dict() (baybe.priors.base.prior method)": [[120, "baybe.priors.base.Prior.to_dict", false]], "to_dict() (baybe.priors.basic.gammaprior method)": [[122, "baybe.priors.basic.GammaPrior.to_dict", false]], "to_dict() (baybe.priors.basic.halfcauchyprior method)": [[123, "baybe.priors.basic.HalfCauchyPrior.to_dict", false]], "to_dict() (baybe.priors.basic.halfnormalprior method)": [[124, "baybe.priors.basic.HalfNormalPrior.to_dict", false]], "to_dict() (baybe.priors.basic.lognormalprior method)": [[125, "baybe.priors.basic.LogNormalPrior.to_dict", false]], "to_dict() (baybe.priors.basic.normalprior method)": [[126, "baybe.priors.basic.NormalPrior.to_dict", false]], "to_dict() (baybe.priors.basic.smoothedboxprior method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.to_dict", false]], "to_dict() (baybe.recommenders.meta.base.metarecommender method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.to_dict", false]], "to_dict() (baybe.recommenders.meta.sequential.sequentialmetarecommender method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.to_dict", false]], "to_dict() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.to_dict", false]], "to_dict() (baybe.recommenders.meta.sequential.twophasemetarecommender method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.to_dict", false]], "to_dict() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.to_dict", false]], "to_dict() (baybe.searchspace.core.searchspace method)": [[168, "baybe.searchspace.core.SearchSpace.to_dict", false]], "to_dict() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.to_dict", false]], "to_dict() (baybe.serialization.mixin.serialmixin method)": [[188, "baybe.serialization.mixin.SerialMixin.to_dict", false]], "to_dict() (baybe.surrogates.base.surrogate method)": [[207, "baybe.surrogates.base.Surrogate.to_dict", false]], "to_dict() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.to_dict", false]], "to_dict() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.to_dict", false]], "to_dict() (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory method)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.to_dict", false]], "to_dict() (baybe.surrogates.linear.bayesianlinearsurrogate method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.to_dict", false]], "to_dict() (baybe.surrogates.naive.meanpredictionsurrogate method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.to_dict", false]], "to_dict() (baybe.surrogates.ngboost.ngboostsurrogate method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.to_dict", false]], "to_dict() (baybe.surrogates.random_forest.randomforestsurrogate method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.to_dict", false]], "to_dict() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.to_dict", false]], "to_dict() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.to_dict", false]], "to_dict() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.to_dict", false]], "to_factory() (baybe.kernels.base.kernel method)": [[62, "baybe.kernels.base.Kernel.to_factory", false]], "to_factory() (baybe.kernels.basic.linearkernel method)": [[64, "baybe.kernels.basic.LinearKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.maternkernel method)": [[65, "baybe.kernels.basic.MaternKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.periodickernel method)": [[66, "baybe.kernels.basic.PeriodicKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.piecewisepolynomialkernel method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.polynomialkernel method)": [[68, "baybe.kernels.basic.PolynomialKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.rbfkernel method)": [[69, "baybe.kernels.basic.RBFKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.rffkernel method)": [[70, "baybe.kernels.basic.RFFKernel.to_factory", false]], "to_factory() (baybe.kernels.basic.rqkernel method)": [[71, "baybe.kernels.basic.RQKernel.to_factory", false]], "to_factory() (baybe.kernels.composite.additivekernel method)": [[73, "baybe.kernels.composite.AdditiveKernel.to_factory", false]], "to_factory() (baybe.kernels.composite.productkernel method)": [[74, "baybe.kernels.composite.ProductKernel.to_factory", false]], "to_factory() (baybe.kernels.composite.scalekernel method)": [[75, "baybe.kernels.composite.ScaleKernel.to_factory", false]], "to_gpytorch() (baybe.kernels.base.kernel method)": [[62, "baybe.kernels.base.Kernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.linearkernel method)": [[64, "baybe.kernels.basic.LinearKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.maternkernel method)": [[65, "baybe.kernels.basic.MaternKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.periodickernel method)": [[66, "baybe.kernels.basic.PeriodicKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.piecewisepolynomialkernel method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.polynomialkernel method)": [[68, "baybe.kernels.basic.PolynomialKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.rbfkernel method)": [[69, "baybe.kernels.basic.RBFKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.rffkernel method)": [[70, "baybe.kernels.basic.RFFKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.basic.rqkernel method)": [[71, "baybe.kernels.basic.RQKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.composite.additivekernel method)": [[73, "baybe.kernels.composite.AdditiveKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.composite.productkernel method)": [[74, "baybe.kernels.composite.ProductKernel.to_gpytorch", false]], "to_gpytorch() (baybe.kernels.composite.scalekernel method)": [[75, "baybe.kernels.composite.ScaleKernel.to_gpytorch", false]], "to_gpytorch() (baybe.priors.base.prior method)": [[120, "baybe.priors.base.Prior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.gammaprior method)": [[122, "baybe.priors.basic.GammaPrior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.halfcauchyprior method)": [[123, "baybe.priors.basic.HalfCauchyPrior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.halfnormalprior method)": [[124, "baybe.priors.basic.HalfNormalPrior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.lognormalprior method)": [[125, "baybe.priors.basic.LogNormalPrior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.normalprior method)": [[126, "baybe.priors.basic.NormalPrior.to_gpytorch", false]], "to_gpytorch() (baybe.priors.basic.smoothedboxprior method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.to_gpytorch", false]], "to_json() (baybe.acquisition.acqfs.expectedimprovement method)": [[3, "baybe.acquisition.acqfs.ExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.logexpectedimprovement method)": [[4, "baybe.acquisition.acqfs.LogExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.posteriormean method)": [[5, "baybe.acquisition.acqfs.PosteriorMean.to_json", false]], "to_json() (baybe.acquisition.acqfs.probabilityofimprovement method)": [[6, "baybe.acquisition.acqfs.ProbabilityOfImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qexpectedimprovement method)": [[8, "baybe.acquisition.acqfs.qExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qlogexpectedimprovement method)": [[9, "baybe.acquisition.acqfs.qLogExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qlognoisyexpectedimprovement method)": [[10, "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qnoisyexpectedimprovement method)": [[11, "baybe.acquisition.acqfs.qNoisyExpectedImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qprobabilityofimprovement method)": [[12, "baybe.acquisition.acqfs.qProbabilityOfImprovement.to_json", false]], "to_json() (baybe.acquisition.acqfs.qsimpleregret method)": [[13, "baybe.acquisition.acqfs.qSimpleRegret.to_json", false]], "to_json() (baybe.acquisition.acqfs.qupperconfidencebound method)": [[14, "baybe.acquisition.acqfs.qUpperConfidenceBound.to_json", false]], "to_json() (baybe.acquisition.acqfs.upperconfidencebound method)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound.to_json", false]], "to_json() (baybe.acquisition.base.acquisitionfunction method)": [[16, "baybe.acquisition.base.AcquisitionFunction.to_json", false]], "to_json() (baybe.campaign.campaign method)": [[23, "baybe.campaign.Campaign.to_json", false]], "to_json() (baybe.constraints.base.constraint method)": [[26, "baybe.constraints.base.Constraint.to_json", false]], "to_json() (baybe.constraints.base.continuousconstraint method)": [[27, "baybe.constraints.base.ContinuousConstraint.to_json", false]], "to_json() (baybe.constraints.base.discreteconstraint method)": [[28, "baybe.constraints.base.DiscreteConstraint.to_json", false]], "to_json() (baybe.constraints.conditions.condition method)": [[30, "baybe.constraints.conditions.Condition.to_json", false]], "to_json() (baybe.constraints.conditions.subselectioncondition method)": [[31, "baybe.constraints.conditions.SubSelectionCondition.to_json", false]], "to_json() (baybe.constraints.conditions.thresholdcondition method)": [[32, "baybe.constraints.conditions.ThresholdCondition.to_json", false]], "to_json() (baybe.constraints.continuous.continuouslinearequalityconstraint method)": [[34, "baybe.constraints.continuous.ContinuousLinearEqualityConstraint.to_json", false]], "to_json() (baybe.constraints.continuous.continuouslinearinequalityconstraint method)": [[35, "baybe.constraints.continuous.ContinuousLinearInequalityConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretecustomconstraint method)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretedependenciesconstraint method)": [[38, "baybe.constraints.discrete.DiscreteDependenciesConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discreteexcludeconstraint method)": [[39, "baybe.constraints.discrete.DiscreteExcludeConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretelinkedparametersconstraint method)": [[40, "baybe.constraints.discrete.DiscreteLinkedParametersConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretenolabelduplicatesconstraint method)": [[41, "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretepermutationinvarianceconstraint method)": [[42, "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discreteproductconstraint method)": [[43, "baybe.constraints.discrete.DiscreteProductConstraint.to_json", false]], "to_json() (baybe.constraints.discrete.discretesumconstraint method)": [[44, "baybe.constraints.discrete.DiscreteSumConstraint.to_json", false]], "to_json() (baybe.kernels.base.kernel method)": [[62, "baybe.kernels.base.Kernel.to_json", false]], "to_json() (baybe.kernels.basic.linearkernel method)": [[64, "baybe.kernels.basic.LinearKernel.to_json", false]], "to_json() (baybe.kernels.basic.maternkernel method)": [[65, "baybe.kernels.basic.MaternKernel.to_json", false]], "to_json() (baybe.kernels.basic.periodickernel method)": [[66, "baybe.kernels.basic.PeriodicKernel.to_json", false]], "to_json() (baybe.kernels.basic.piecewisepolynomialkernel method)": [[67, "baybe.kernels.basic.PiecewisePolynomialKernel.to_json", false]], "to_json() (baybe.kernels.basic.polynomialkernel method)": [[68, "baybe.kernels.basic.PolynomialKernel.to_json", false]], "to_json() (baybe.kernels.basic.rbfkernel method)": [[69, "baybe.kernels.basic.RBFKernel.to_json", false]], "to_json() (baybe.kernels.basic.rffkernel method)": [[70, "baybe.kernels.basic.RFFKernel.to_json", false]], "to_json() (baybe.kernels.basic.rqkernel method)": [[71, "baybe.kernels.basic.RQKernel.to_json", false]], "to_json() (baybe.kernels.composite.additivekernel method)": [[73, "baybe.kernels.composite.AdditiveKernel.to_json", false]], "to_json() (baybe.kernels.composite.productkernel method)": [[74, "baybe.kernels.composite.ProductKernel.to_json", false]], "to_json() (baybe.kernels.composite.scalekernel method)": [[75, "baybe.kernels.composite.ScaleKernel.to_json", false]], "to_json() (baybe.objectives.base.objective method)": [[80, "baybe.objectives.base.Objective.to_json", false]], "to_json() (baybe.objectives.desirability.desirabilityobjective method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.to_json", false]], "to_json() (baybe.objectives.single.singletargetobjective method)": [[90, "baybe.objectives.single.SingleTargetObjective.to_json", false]], "to_json() (baybe.parameters.base.continuousparameter method)": [[93, "baybe.parameters.base.ContinuousParameter.to_json", false]], "to_json() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.to_json", false]], "to_json() (baybe.parameters.base.parameter method)": [[95, "baybe.parameters.base.Parameter.to_json", false]], "to_json() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.to_json", false]], "to_json() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.to_json", false]], "to_json() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.to_json", false]], "to_json() (baybe.parameters.numerical.numericalcontinuousparameter method)": [[107, "baybe.parameters.numerical.NumericalContinuousParameter.to_json", false]], "to_json() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.to_json", false]], "to_json() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.to_json", false]], "to_json() (baybe.priors.base.prior method)": [[120, "baybe.priors.base.Prior.to_json", false]], "to_json() (baybe.priors.basic.gammaprior method)": [[122, "baybe.priors.basic.GammaPrior.to_json", false]], "to_json() (baybe.priors.basic.halfcauchyprior method)": [[123, "baybe.priors.basic.HalfCauchyPrior.to_json", false]], "to_json() (baybe.priors.basic.halfnormalprior method)": [[124, "baybe.priors.basic.HalfNormalPrior.to_json", false]], "to_json() (baybe.priors.basic.lognormalprior method)": [[125, "baybe.priors.basic.LogNormalPrior.to_json", false]], "to_json() (baybe.priors.basic.normalprior method)": [[126, "baybe.priors.basic.NormalPrior.to_json", false]], "to_json() (baybe.priors.basic.smoothedboxprior method)": [[127, "baybe.priors.basic.SmoothedBoxPrior.to_json", false]], "to_json() (baybe.recommenders.meta.base.metarecommender method)": [[135, "baybe.recommenders.meta.base.MetaRecommender.to_json", false]], "to_json() (baybe.recommenders.meta.sequential.sequentialmetarecommender method)": [[137, "baybe.recommenders.meta.sequential.SequentialMetaRecommender.to_json", false]], "to_json() (baybe.recommenders.meta.sequential.streamingsequentialmetarecommender method)": [[138, "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender.to_json", false]], "to_json() (baybe.recommenders.meta.sequential.twophasemetarecommender method)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender.to_json", false]], "to_json() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.to_json", false]], "to_json() (baybe.searchspace.core.searchspace method)": [[168, "baybe.searchspace.core.SearchSpace.to_json", false]], "to_json() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.to_json", false]], "to_json() (baybe.serialization.mixin.serialmixin method)": [[188, "baybe.serialization.mixin.SerialMixin.to_json", false]], "to_json() (baybe.surrogates.base.surrogate method)": [[207, "baybe.surrogates.base.Surrogate.to_json", false]], "to_json() (baybe.surrogates.custom.customonnxsurrogate method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.to_json", false]], "to_json() (baybe.surrogates.gaussian_process.core.gaussianprocesssurrogate method)": [[213, "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate.to_json", false]], "to_json() (baybe.surrogates.gaussian_process.kernel_factory.plainkernelfactory method)": [[216, "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory.to_json", false]], "to_json() (baybe.surrogates.linear.bayesianlinearsurrogate method)": [[225, "baybe.surrogates.linear.BayesianLinearSurrogate.to_json", false]], "to_json() (baybe.surrogates.naive.meanpredictionsurrogate method)": [[227, "baybe.surrogates.naive.MeanPredictionSurrogate.to_json", false]], "to_json() (baybe.surrogates.ngboost.ngboostsurrogate method)": [[229, "baybe.surrogates.ngboost.NGBoostSurrogate.to_json", false]], "to_json() (baybe.surrogates.random_forest.randomforestsurrogate method)": [[231, "baybe.surrogates.random_forest.RandomForestSurrogate.to_json", false]], "to_json() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.to_json", false]], "to_json() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.to_json", false]], "to_json() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.to_json", false]], "to_kernel_factory() (in module baybe.surrogates.gaussian_process.kernel_factory)": [[217, "baybe.surrogates.gaussian_process.kernel_factory.to_kernel_factory", false]], "to_ndarray() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.to_ndarray", false]], "to_objective() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.to_objective", false]], "to_objective() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.to_objective", false]], "to_objective() (in module baybe.objectives.base)": [[81, "baybe.objectives.base.to_objective", false]], "to_tensor() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.to_tensor", false]], "to_tensor() (in module baybe.utils.dataframe)": [[292, "baybe.utils.dataframe.to_tensor", false]], "to_tuple() (baybe.utils.interval.interval method)": [[295, "baybe.utils.interval.Interval.to_tuple", false]], "to_tuple() (in module baybe.utils.basic)": [[267, "baybe.utils.basic.to_tuple", false]], "tolerance (baybe.constraints.conditions.thresholdcondition attribute)": [[32, "baybe.constraints.conditions.ThresholdCondition.tolerance", false]], "tolerance (baybe.parameters.numerical.numericaldiscreteparameter attribute)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.tolerance", false]], "transform() (baybe.objectives.base.objective method)": [[80, "baybe.objectives.base.Objective.transform", false]], "transform() (baybe.objectives.desirability.desirabilityobjective method)": [[85, "baybe.objectives.desirability.DesirabilityObjective.transform", false]], "transform() (baybe.objectives.single.singletargetobjective method)": [[90, "baybe.objectives.single.SingleTargetObjective.transform", false]], "transform() (baybe.scaler.defaultscaler method)": [[162, "baybe.scaler.DefaultScaler.transform", false]], "transform() (baybe.scaler.scaler method)": [[163, "baybe.scaler.Scaler.transform", false]], "transform() (baybe.searchspace.continuous.subspacecontinuous method)": [[166, "baybe.searchspace.continuous.SubspaceContinuous.transform", false]], "transform() (baybe.searchspace.core.searchspace method)": [[168, "baybe.searchspace.core.SearchSpace.transform", false]], "transform() (baybe.searchspace.discrete.subspacediscrete method)": [[173, "baybe.searchspace.discrete.SubspaceDiscrete.transform", false]], "transform() (baybe.targets.base.target method)": [[241, "baybe.targets.base.Target.transform", false]], "transform() (baybe.targets.numerical.numericaltarget method)": [[246, "baybe.targets.numerical.NumericalTarget.transform", false]], "transform_rep_exp2comp() (baybe.parameters.base.discreteparameter method)": [[94, "baybe.parameters.base.DiscreteParameter.transform_rep_exp2comp", false]], "transform_rep_exp2comp() (baybe.parameters.categorical.categoricalparameter method)": [[97, "baybe.parameters.categorical.CategoricalParameter.transform_rep_exp2comp", false]], "transform_rep_exp2comp() (baybe.parameters.categorical.taskparameter method)": [[98, "baybe.parameters.categorical.TaskParameter.transform_rep_exp2comp", false]], "transform_rep_exp2comp() (baybe.parameters.custom.customdiscreteparameter method)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.transform_rep_exp2comp", false]], "transform_rep_exp2comp() (baybe.parameters.numerical.numericaldiscreteparameter method)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.transform_rep_exp2comp", false]], "transform_rep_exp2comp() (baybe.parameters.substance.substanceparameter method)": [[111, "baybe.parameters.substance.SubstanceParameter.transform_rep_exp2comp", false]], "transformation (baybe.targets.numerical.numericaltarget attribute)": [[246, "baybe.targets.numerical.NumericalTarget.transformation", false]], "triangular (baybe.targets.enum.targettransformation attribute)": [[244, "baybe.targets.enum.TargetTransformation.TRIANGULAR", false]], "triangular_transform() (in module baybe.targets.transforms)": [[250, "baybe.targets.transforms.triangular_transform", false]], "twophasemetarecommender (class in baybe.recommenders.meta.sequential)": [[139, "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender", false]], "twophasestrategy() (in module baybe.strategies.deprecation)": [[204, "baybe.strategies.deprecation.TwoPhaseStrategy", false]], "type (baybe.scaler.defaultscaler attribute)": [[162, "baybe.scaler.DefaultScaler.type", false]], "type (baybe.scaler.scaler attribute)": [[163, "baybe.scaler.Scaler.type", false]], "type (baybe.searchspace.core.searchspace property)": [[168, "baybe.searchspace.core.SearchSpace.type", false]], "unidentifiedsubclasserror": [[59, "baybe.exceptions.UnidentifiedSubclassError", false]], "unstructure_base() (in module baybe.serialization.core)": [[186, "baybe.serialization.core.unstructure_base", false]], "untransform() (baybe.scaler.defaultscaler method)": [[162, "baybe.scaler.DefaultScaler.untransform", false]], "untransform() (baybe.scaler.scaler method)": [[163, "baybe.scaler.Scaler.untransform", false]], "upper (baybe.utils.interval.interval attribute)": [[295, "baybe.utils.interval.Interval.upper", false]], "upperconfidencebound (class in baybe.acquisition.acqfs)": [[7, "baybe.acquisition.acqfs.UpperConfidenceBound", false]], "use_fallback_constructor_hook() (in module baybe.utils.interval)": [[297, "baybe.utils.interval.use_fallback_constructor_hook", false]], "validate_compatibility() (baybe.surrogates.custom.customonnxsurrogate class method)": [[209, "baybe.surrogates.custom.CustomONNXSurrogate.validate_compatibility", false]], "validate_config() (baybe.campaign.campaign class method)": [[23, "baybe.campaign.Campaign.validate_config", false]], "validate_constraints() (in module baybe.constraints.validation)": [[46, "baybe.constraints.validation.validate_constraints", false]], "validate_custom_architecture_cls() (in module baybe.surrogates.validation)": [[238, "baybe.surrogates.validation.validate_custom_architecture_cls", false]], "validate_decorrelation() (in module baybe.parameters.validation)": [[115, "baybe.parameters.validation.validate_decorrelation", false]], "validate_is_finite() (in module baybe.parameters.validation)": [[116, "baybe.parameters.validation.validate_is_finite", false]], "validate_parameter_names() (in module baybe.searchspace.validation)": [[177, "baybe.searchspace.validation.validate_parameter_names", false]], "validate_parameters() (in module baybe.searchspace.validation)": [[178, "baybe.searchspace.validation.validate_parameters", false]], "validate_searchspace_from_config() (in module baybe.searchspace.core)": [[170, "baybe.searchspace.core.validate_searchspace_from_config", false]], "validate_simplex_subspace_from_config() (in module baybe.searchspace.discrete)": [[175, "baybe.searchspace.discrete.validate_simplex_subspace_from_config", false]], "validate_unique_values() (in module baybe.parameters.validation)": [[117, "baybe.parameters.validation.validate_unique_values", false]], "validator (baybe.constraints.discrete.discretecustomconstraint attribute)": [[37, "baybe.constraints.discrete.DiscreteCustomConstraint.validator", false]], "values (baybe.parameters.base.discreteparameter property)": [[94, "baybe.parameters.base.DiscreteParameter.values", false]], "values (baybe.parameters.categorical.categoricalparameter property)": [[97, "baybe.parameters.categorical.CategoricalParameter.values", false]], "values (baybe.parameters.categorical.taskparameter property)": [[98, "baybe.parameters.categorical.TaskParameter.values", false]], "values (baybe.parameters.custom.customdiscreteparameter property)": [[100, "baybe.parameters.custom.CustomDiscreteParameter.values", false]], "values (baybe.parameters.numerical.numericaldiscreteparameter property)": [[108, "baybe.parameters.numerical.NumericalDiscreteParameter.values", false]], "values (baybe.parameters.substance.substanceparameter property)": [[111, "baybe.parameters.substance.SubstanceParameter.values", false]], "variance_initial_value (baybe.kernels.basic.linearkernel attribute)": [[64, "baybe.kernels.basic.LinearKernel.variance_initial_value", false]], "variance_prior (baybe.kernels.basic.linearkernel attribute)": [[64, "baybe.kernels.basic.LinearKernel.variance_prior", false]], "varname_numpy_use_single_precision (in module baybe.utils.numerical)": [[303, "baybe.utils.numerical.VARNAME_NUMPY_USE_SINGLE_PRECISION", false]], "varname_torch_use_single_precision (in module baybe.utils.torch)": [[316, "baybe.utils.torch.VARNAME_TORCH_USE_SINGLE_PRECISION", false]], "weights (baybe.objectives.desirability.desirabilityobjective attribute)": [[85, "baybe.objectives.desirability.DesirabilityObjective.weights", false]]}, "objects": {"": [[0, 0, 0, "-", "baybe"]], "baybe": [[1, 0, 0, "-", "acquisition"], [22, 0, 0, "-", "campaign"], [24, 0, 0, "-", "constraints"], [47, 0, 0, "-", "deprecation"], [49, 0, 0, "-", "exceptions"], [60, 0, 0, "-", "kernels"], [76, 0, 0, "-", "objective"], [78, 0, 0, "-", "objectives"], [91, 0, 0, "-", "parameters"], [118, 0, 0, "-", "priors"], [128, 0, 0, "-", "recommenders"], [161, 0, 0, "-", "scaler"], [164, 0, 0, "-", "searchspace"], [179, 0, 0, "-", "serialization"], [192, 0, 0, "-", "simulation"], [200, 0, 0, "-", "strategies"], [205, 0, 0, "-", "surrogates"], [239, 0, 0, "-", "targets"], [251, 0, 0, "-", "telemetry"], [256, 0, 0, "-", "utils"]], "baybe.acquisition": [[2, 0, 0, "-", "acqfs"], [15, 0, 0, "-", "base"], [17, 0, 0, "-", "partial"], [19, 0, 0, "-", "utils"]], "baybe.acquisition.acqfs": [[3, 1, 1, "", "ExpectedImprovement"], [4, 1, 1, "", "LogExpectedImprovement"], [5, 1, 1, "", "PosteriorMean"], [6, 1, 1, "", "ProbabilityOfImprovement"], [7, 1, 1, "", "UpperConfidenceBound"], [8, 1, 1, "", "qExpectedImprovement"], [9, 1, 1, "", "qLogExpectedImprovement"], [10, 1, 1, "", "qLogNoisyExpectedImprovement"], [11, 1, 1, "", "qNoisyExpectedImprovement"], [12, 1, 1, "", "qProbabilityOfImprovement"], [13, 1, 1, "", "qSimpleRegret"], [14, 1, 1, "", "qUpperConfidenceBound"]], "baybe.acquisition.acqfs.ExpectedImprovement": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "abbreviation"], [3, 2, 1, "", "from_dict"], [3, 2, 1, "", "from_json"], [3, 2, 1, "", "to_botorch"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.LogExpectedImprovement": [[4, 2, 1, "", "__init__"], [4, 3, 1, "", "abbreviation"], [4, 2, 1, "", "from_dict"], [4, 2, 1, "", "from_json"], [4, 2, 1, "", "to_botorch"], [4, 2, 1, "", "to_dict"], [4, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.PosteriorMean": [[5, 2, 1, "", "__init__"], [5, 3, 1, "", "abbreviation"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "from_json"], [5, 2, 1, "", "to_botorch"], [5, 2, 1, "", "to_dict"], [5, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.ProbabilityOfImprovement": [[6, 2, 1, "", "__init__"], [6, 3, 1, "", "abbreviation"], [6, 2, 1, "", "from_dict"], [6, 2, 1, "", "from_json"], [6, 2, 1, "", "to_botorch"], [6, 2, 1, "", "to_dict"], [6, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.UpperConfidenceBound": [[7, 2, 1, "", "__init__"], [7, 3, 1, "", "abbreviation"], [7, 3, 1, "", "beta"], [7, 2, 1, "", "from_dict"], [7, 2, 1, "", "from_json"], [7, 2, 1, "", "to_botorch"], [7, 2, 1, "", "to_dict"], [7, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qExpectedImprovement": [[8, 2, 1, "", "__init__"], [8, 3, 1, "", "abbreviation"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "from_json"], [8, 2, 1, "", "to_botorch"], [8, 2, 1, "", "to_dict"], [8, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qLogExpectedImprovement": [[9, 2, 1, "", "__init__"], [9, 3, 1, "", "abbreviation"], [9, 2, 1, "", "from_dict"], [9, 2, 1, "", "from_json"], [9, 2, 1, "", "to_botorch"], [9, 2, 1, "", "to_dict"], [9, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qLogNoisyExpectedImprovement": [[10, 2, 1, "", "__init__"], [10, 3, 1, "", "abbreviation"], [10, 2, 1, "", "from_dict"], [10, 2, 1, "", "from_json"], [10, 3, 1, "", "prune_baseline"], [10, 2, 1, "", "to_botorch"], [10, 2, 1, "", "to_dict"], [10, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qNoisyExpectedImprovement": [[11, 2, 1, "", "__init__"], [11, 3, 1, "", "abbreviation"], [11, 2, 1, "", "from_dict"], [11, 2, 1, "", "from_json"], [11, 3, 1, "", "prune_baseline"], [11, 2, 1, "", "to_botorch"], [11, 2, 1, "", "to_dict"], [11, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qProbabilityOfImprovement": [[12, 2, 1, "", "__init__"], [12, 3, 1, "", "abbreviation"], [12, 2, 1, "", "from_dict"], [12, 2, 1, "", "from_json"], [12, 2, 1, "", "to_botorch"], [12, 2, 1, "", "to_dict"], [12, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qSimpleRegret": [[13, 2, 1, "", "__init__"], [13, 3, 1, "", "abbreviation"], [13, 2, 1, "", "from_dict"], [13, 2, 1, "", "from_json"], [13, 2, 1, "", "to_botorch"], [13, 2, 1, "", "to_dict"], [13, 2, 1, "", "to_json"]], "baybe.acquisition.acqfs.qUpperConfidenceBound": [[14, 2, 1, "", "__init__"], [14, 3, 1, "", "abbreviation"], [14, 3, 1, "", "beta"], [14, 2, 1, "", "from_dict"], [14, 2, 1, "", "from_json"], [14, 2, 1, "", "to_botorch"], [14, 2, 1, "", "to_dict"], [14, 2, 1, "", "to_json"]], "baybe.acquisition.base": [[16, 1, 1, "", "AcquisitionFunction"]], "baybe.acquisition.base.AcquisitionFunction": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "abbreviation"], [16, 2, 1, "", "from_dict"], [16, 2, 1, "", "from_json"], [16, 2, 1, "", "to_botorch"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "to_json"]], "baybe.acquisition.partial": [[18, 1, 1, "", "PartialAcquisitionFunction"]], "baybe.acquisition.partial.PartialAcquisitionFunction": [[18, 2, 1, "", "__init__"], [18, 3, 1, "", "botorch_acqf"], [18, 3, 1, "", "pin_discrete"], [18, 3, 1, "", "pinned_part"], [18, 2, 1, "", "set_X_pending"]], "baybe.acquisition.utils": [[20, 4, 1, "", "convert_acqf"], [21, 4, 1, "", "str_to_acqf"]], "baybe.campaign": [[23, 1, 1, "", "Campaign"]], "baybe.campaign.Campaign": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "add_measurements"], [23, 2, 1, "", "from_config"], [23, 2, 1, "", "from_dict"], [23, 2, 1, "", "from_json"], [23, 5, 1, "", "measurements"], [23, 3, 1, "", "n_batches_done"], [23, 3, 1, "", "n_fits_done"], [23, 3, 1, "", "numerical_measurements_must_be_within_tolerance"], [23, 3, 1, "", "objective"], [23, 5, 1, "", "parameters"], [23, 2, 1, "", "recommend"], [23, 3, 1, "", "recommender"], [23, 3, 1, "", "searchspace"], [23, 3, 1, "", "strategy"], [23, 5, 1, "", "targets"], [23, 2, 1, "", "to_dict"], [23, 2, 1, "", "to_json"], [23, 2, 1, "", "validate_config"]], "baybe.constraints": [[25, 0, 0, "-", "base"], [29, 0, 0, "-", "conditions"], [33, 0, 0, "-", "continuous"], [36, 0, 0, "-", "discrete"], [45, 0, 0, "-", "validation"]], "baybe.constraints.base": [[26, 1, 1, "", "Constraint"], [27, 1, 1, "", "ContinuousConstraint"], [28, 1, 1, "", "DiscreteConstraint"]], "baybe.constraints.base.Constraint": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "eval_during_creation"], [26, 3, 1, "", "eval_during_modeling"], [26, 2, 1, "", "from_dict"], [26, 2, 1, "", "from_json"], [26, 5, 1, "", "is_continuous"], [26, 5, 1, "", "is_discrete"], [26, 3, 1, "", "parameters"], [26, 2, 1, "", "summary"], [26, 2, 1, "", "to_dict"], [26, 2, 1, "", "to_json"]], "baybe.constraints.base.ContinuousConstraint": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "coefficients"], [27, 3, 1, "", "eval_during_creation"], [27, 3, 1, "", "eval_during_modeling"], [27, 2, 1, "", "from_dict"], [27, 2, 1, "", "from_json"], [27, 5, 1, "", "is_continuous"], [27, 5, 1, "", "is_discrete"], [27, 3, 1, "", "parameters"], [27, 3, 1, "", "rhs"], [27, 2, 1, "", "summary"], [27, 2, 1, "", "to_botorch"], [27, 2, 1, "", "to_dict"], [27, 2, 1, "", "to_json"]], "baybe.constraints.base.DiscreteConstraint": [[28, 2, 1, "", "__init__"], [28, 3, 1, "", "eval_during_creation"], [28, 3, 1, "", "eval_during_modeling"], [28, 2, 1, "", "from_dict"], [28, 2, 1, "", "from_json"], [28, 2, 1, "", "get_invalid"], [28, 5, 1, "", "is_continuous"], [28, 5, 1, "", "is_discrete"], [28, 3, 1, "", "parameters"], [28, 2, 1, "", "summary"], [28, 2, 1, "", "to_dict"], [28, 2, 1, "", "to_json"]], "baybe.constraints.conditions": [[30, 1, 1, "", "Condition"], [31, 1, 1, "", "SubSelectionCondition"], [32, 1, 1, "", "ThresholdCondition"]], "baybe.constraints.conditions.Condition": [[30, 2, 1, "", "evaluate"], [30, 2, 1, "", "from_dict"], [30, 2, 1, "", "from_json"], [30, 2, 1, "", "to_dict"], [30, 2, 1, "", "to_json"]], "baybe.constraints.conditions.SubSelectionCondition": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "evaluate"], [31, 2, 1, "", "from_dict"], [31, 2, 1, "", "from_json"], [31, 5, 1, "", "selection"], [31, 2, 1, "", "to_dict"], [31, 2, 1, "", "to_json"]], "baybe.constraints.conditions.ThresholdCondition": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "evaluate"], [32, 2, 1, "", "from_dict"], [32, 2, 1, "", "from_json"], [32, 3, 1, "", "operator"], [32, 3, 1, "", "threshold"], [32, 2, 1, "", "to_dict"], [32, 2, 1, "", "to_json"], [32, 3, 1, "", "tolerance"]], "baybe.constraints.continuous": [[34, 1, 1, "", "ContinuousLinearEqualityConstraint"], [35, 1, 1, "", "ContinuousLinearInequalityConstraint"]], "baybe.constraints.continuous.ContinuousLinearEqualityConstraint": [[34, 2, 1, "", "__init__"], [34, 3, 1, "", "coefficients"], [34, 3, 1, "", "eval_during_creation"], [34, 3, 1, "", "eval_during_modeling"], [34, 2, 1, "", "from_dict"], [34, 2, 1, "", "from_json"], [34, 5, 1, "", "is_continuous"], [34, 5, 1, "", "is_discrete"], [34, 3, 1, "", "parameters"], [34, 3, 1, "", "rhs"], [34, 2, 1, "", "summary"], [34, 2, 1, "", "to_botorch"], [34, 2, 1, "", "to_dict"], [34, 2, 1, "", "to_json"]], "baybe.constraints.continuous.ContinuousLinearInequalityConstraint": [[35, 2, 1, "", "__init__"], [35, 3, 1, "", "coefficients"], [35, 3, 1, "", "eval_during_creation"], [35, 3, 1, "", "eval_during_modeling"], [35, 2, 1, "", "from_dict"], [35, 2, 1, "", "from_json"], [35, 5, 1, "", "is_continuous"], [35, 5, 1, "", "is_discrete"], [35, 3, 1, "", "parameters"], [35, 3, 1, "", "rhs"], [35, 2, 1, "", "summary"], [35, 2, 1, "", "to_botorch"], [35, 2, 1, "", "to_dict"], [35, 2, 1, "", "to_json"]], "baybe.constraints.discrete": [[37, 1, 1, "", "DiscreteCustomConstraint"], [38, 1, 1, "", "DiscreteDependenciesConstraint"], [39, 1, 1, "", "DiscreteExcludeConstraint"], [40, 1, 1, "", "DiscreteLinkedParametersConstraint"], [41, 1, 1, "", "DiscreteNoLabelDuplicatesConstraint"], [42, 1, 1, "", "DiscretePermutationInvarianceConstraint"], [43, 1, 1, "", "DiscreteProductConstraint"], [44, 1, 1, "", "DiscreteSumConstraint"]], "baybe.constraints.discrete.DiscreteCustomConstraint": [[37, 2, 1, "", "__init__"], [37, 3, 1, "", "eval_during_creation"], [37, 3, 1, "", "eval_during_modeling"], [37, 2, 1, "", "from_dict"], [37, 2, 1, "", "from_json"], [37, 2, 1, "", "get_invalid"], [37, 5, 1, "", "is_continuous"], [37, 5, 1, "", "is_discrete"], [37, 3, 1, "", "parameters"], [37, 2, 1, "", "summary"], [37, 2, 1, "", "to_dict"], [37, 2, 1, "", "to_json"], [37, 3, 1, "", "validator"]], "baybe.constraints.discrete.DiscreteDependenciesConstraint": [[38, 2, 1, "", "__init__"], [38, 3, 1, "", "affected_parameters"], [38, 3, 1, "", "conditions"], [38, 3, 1, "", "eval_during_creation"], [38, 3, 1, "", "eval_during_modeling"], [38, 2, 1, "", "from_dict"], [38, 2, 1, "", "from_json"], [38, 2, 1, "", "get_invalid"], [38, 5, 1, "", "is_continuous"], [38, 5, 1, "", "is_discrete"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "permutation_invariant"], [38, 2, 1, "", "summary"], [38, 2, 1, "", "to_dict"], [38, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteExcludeConstraint": [[39, 2, 1, "", "__init__"], [39, 3, 1, "", "combiner"], [39, 3, 1, "", "conditions"], [39, 3, 1, "", "eval_during_creation"], [39, 3, 1, "", "eval_during_modeling"], [39, 2, 1, "", "from_dict"], [39, 2, 1, "", "from_json"], [39, 2, 1, "", "get_invalid"], [39, 5, 1, "", "is_continuous"], [39, 5, 1, "", "is_discrete"], [39, 3, 1, "", "parameters"], [39, 2, 1, "", "summary"], [39, 2, 1, "", "to_dict"], [39, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteLinkedParametersConstraint": [[40, 2, 1, "", "__init__"], [40, 3, 1, "", "eval_during_creation"], [40, 3, 1, "", "eval_during_modeling"], [40, 2, 1, "", "from_dict"], [40, 2, 1, "", "from_json"], [40, 2, 1, "", "get_invalid"], [40, 5, 1, "", "is_continuous"], [40, 5, 1, "", "is_discrete"], [40, 3, 1, "", "parameters"], [40, 2, 1, "", "summary"], [40, 2, 1, "", "to_dict"], [40, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteNoLabelDuplicatesConstraint": [[41, 2, 1, "", "__init__"], [41, 3, 1, "", "eval_during_creation"], [41, 3, 1, "", "eval_during_modeling"], [41, 2, 1, "", "from_dict"], [41, 2, 1, "", "from_json"], [41, 2, 1, "", "get_invalid"], [41, 5, 1, "", "is_continuous"], [41, 5, 1, "", "is_discrete"], [41, 3, 1, "", "parameters"], [41, 2, 1, "", "summary"], [41, 2, 1, "", "to_dict"], [41, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscretePermutationInvarianceConstraint": [[42, 2, 1, "", "__init__"], [42, 3, 1, "", "dependencies"], [42, 3, 1, "", "eval_during_creation"], [42, 3, 1, "", "eval_during_modeling"], [42, 2, 1, "", "from_dict"], [42, 2, 1, "", "from_json"], [42, 2, 1, "", "get_invalid"], [42, 5, 1, "", "is_continuous"], [42, 5, 1, "", "is_discrete"], [42, 3, 1, "", "parameters"], [42, 2, 1, "", "summary"], [42, 2, 1, "", "to_dict"], [42, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteProductConstraint": [[43, 2, 1, "", "__init__"], [43, 3, 1, "", "condition"], [43, 3, 1, "", "eval_during_creation"], [43, 3, 1, "", "eval_during_modeling"], [43, 2, 1, "", "from_dict"], [43, 2, 1, "", "from_json"], [43, 2, 1, "", "get_invalid"], [43, 5, 1, "", "is_continuous"], [43, 5, 1, "", "is_discrete"], [43, 3, 1, "", "parameters"], [43, 2, 1, "", "summary"], [43, 2, 1, "", "to_dict"], [43, 2, 1, "", "to_json"]], "baybe.constraints.discrete.DiscreteSumConstraint": [[44, 2, 1, "", "__init__"], [44, 3, 1, "", "condition"], [44, 3, 1, "", "eval_during_creation"], [44, 3, 1, "", "eval_during_modeling"], [44, 2, 1, "", "from_dict"], [44, 2, 1, "", "from_json"], [44, 2, 1, "", "get_invalid"], [44, 5, 1, "", "is_continuous"], [44, 5, 1, "", "is_discrete"], [44, 3, 1, "", "parameters"], [44, 2, 1, "", "summary"], [44, 2, 1, "", "to_dict"], [44, 2, 1, "", "to_json"]], "baybe.constraints.validation": [[46, 4, 1, "", "validate_constraints"]], "baybe.deprecation": [[48, 4, 1, "", "compatibilize_config"]], "baybe.exceptions": [[50, 6, 1, "", "DeprecationError"], [51, 6, 1, "", "EmptySearchSpaceError"], [52, 6, 1, "", "IncompatibleSearchSpaceError"], [53, 6, 1, "", "NoMCAcquisitionFunctionError"], [54, 6, 1, "", "NoRecommendersLeftError"], [55, 6, 1, "", "NotEnoughPointsLeftError"], [56, 6, 1, "", "NothingToSimulateError"], [57, 6, 1, "", "NumericalUnderflowError"], [58, 6, 1, "", "OptionalImportError"], [59, 6, 1, "", "UnidentifiedSubclassError"]], "baybe.exceptions.DeprecationError": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "__new__"]], "baybe.exceptions.EmptySearchSpaceError": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "__new__"]], "baybe.exceptions.IncompatibleSearchSpaceError": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "__new__"]], "baybe.exceptions.NoMCAcquisitionFunctionError": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "__new__"]], "baybe.exceptions.NoRecommendersLeftError": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "__new__"]], "baybe.exceptions.NotEnoughPointsLeftError": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "__new__"]], "baybe.exceptions.NothingToSimulateError": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "__new__"]], "baybe.exceptions.NumericalUnderflowError": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "__new__"]], "baybe.exceptions.OptionalImportError": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "__new__"]], "baybe.exceptions.UnidentifiedSubclassError": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "__new__"]], "baybe.kernels": [[61, 0, 0, "-", "base"], [63, 0, 0, "-", "basic"], [72, 0, 0, "-", "composite"]], "baybe.kernels.base": [[62, 1, 1, "", "Kernel"]], "baybe.kernels.base.Kernel": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "from_dict"], [62, 2, 1, "", "from_json"], [62, 2, 1, "", "to_dict"], [62, 2, 1, "", "to_factory"], [62, 2, 1, "", "to_gpytorch"], [62, 2, 1, "", "to_json"]], "baybe.kernels.basic": [[64, 1, 1, "", "LinearKernel"], [65, 1, 1, "", "MaternKernel"], [66, 1, 1, "", "PeriodicKernel"], [67, 1, 1, "", "PiecewisePolynomialKernel"], [68, 1, 1, "", "PolynomialKernel"], [69, 1, 1, "", "RBFKernel"], [70, 1, 1, "", "RFFKernel"], [71, 1, 1, "", "RQKernel"]], "baybe.kernels.basic.LinearKernel": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "from_dict"], [64, 2, 1, "", "from_json"], [64, 2, 1, "", "to_dict"], [64, 2, 1, "", "to_factory"], [64, 2, 1, "", "to_gpytorch"], [64, 2, 1, "", "to_json"], [64, 3, 1, "", "variance_initial_value"], [64, 3, 1, "", "variance_prior"]], "baybe.kernels.basic.MaternKernel": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "from_dict"], [65, 2, 1, "", "from_json"], [65, 3, 1, "", "lengthscale_initial_value"], [65, 3, 1, "", "lengthscale_prior"], [65, 3, 1, "", "nu"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_factory"], [65, 2, 1, "", "to_gpytorch"], [65, 2, 1, "", "to_json"]], "baybe.kernels.basic.PeriodicKernel": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "from_dict"], [66, 2, 1, "", "from_json"], [66, 3, 1, "", "lengthscale_initial_value"], [66, 3, 1, "", "lengthscale_prior"], [66, 3, 1, "", "period_length_initial_value"], [66, 3, 1, "", "period_length_prior"], [66, 2, 1, "", "to_dict"], [66, 2, 1, "", "to_factory"], [66, 2, 1, "", "to_gpytorch"], [66, 2, 1, "", "to_json"]], "baybe.kernels.basic.PiecewisePolynomialKernel": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "from_dict"], [67, 2, 1, "", "from_json"], [67, 3, 1, "", "lengthscale_initial_value"], [67, 3, 1, "", "lengthscale_prior"], [67, 3, 1, "", "q"], [67, 2, 1, "", "to_dict"], [67, 2, 1, "", "to_factory"], [67, 2, 1, "", "to_gpytorch"], [67, 2, 1, "", "to_json"]], "baybe.kernels.basic.PolynomialKernel": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "from_dict"], [68, 2, 1, "", "from_json"], [68, 3, 1, "", "offset_initial_value"], [68, 3, 1, "", "offset_prior"], [68, 3, 1, "", "power"], [68, 2, 1, "", "to_dict"], [68, 2, 1, "", "to_factory"], [68, 2, 1, "", "to_gpytorch"], [68, 2, 1, "", "to_json"]], "baybe.kernels.basic.RBFKernel": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "from_dict"], [69, 2, 1, "", "from_json"], [69, 3, 1, "", "lengthscale_initial_value"], [69, 3, 1, "", "lengthscale_prior"], [69, 2, 1, "", "to_dict"], [69, 2, 1, "", "to_factory"], [69, 2, 1, "", "to_gpytorch"], [69, 2, 1, "", "to_json"]], "baybe.kernels.basic.RFFKernel": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "from_dict"], [70, 2, 1, "", "from_json"], [70, 3, 1, "", "lengthscale_initial_value"], [70, 3, 1, "", "lengthscale_prior"], [70, 3, 1, "", "num_samples"], [70, 2, 1, "", "to_dict"], [70, 2, 1, "", "to_factory"], [70, 2, 1, "", "to_gpytorch"], [70, 2, 1, "", "to_json"]], "baybe.kernels.basic.RQKernel": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "from_dict"], [71, 2, 1, "", "from_json"], [71, 3, 1, "", "lengthscale_initial_value"], [71, 3, 1, "", "lengthscale_prior"], [71, 2, 1, "", "to_dict"], [71, 2, 1, "", "to_factory"], [71, 2, 1, "", "to_gpytorch"], [71, 2, 1, "", "to_json"]], "baybe.kernels.composite": [[73, 1, 1, "", "AdditiveKernel"], [74, 1, 1, "", "ProductKernel"], [75, 1, 1, "", "ScaleKernel"]], "baybe.kernels.composite.AdditiveKernel": [[73, 2, 1, "", "__init__"], [73, 3, 1, "", "base_kernels"], [73, 2, 1, "", "from_dict"], [73, 2, 1, "", "from_json"], [73, 2, 1, "", "to_dict"], [73, 2, 1, "", "to_factory"], [73, 2, 1, "", "to_gpytorch"], [73, 2, 1, "", "to_json"]], "baybe.kernels.composite.ProductKernel": [[74, 2, 1, "", "__init__"], [74, 3, 1, "", "base_kernels"], [74, 2, 1, "", "from_dict"], [74, 2, 1, "", "from_json"], [74, 2, 1, "", "to_dict"], [74, 2, 1, "", "to_factory"], [74, 2, 1, "", "to_gpytorch"], [74, 2, 1, "", "to_json"]], "baybe.kernels.composite.ScaleKernel": [[75, 2, 1, "", "__init__"], [75, 3, 1, "", "base_kernel"], [75, 2, 1, "", "from_dict"], [75, 2, 1, "", "from_json"], [75, 3, 1, "", "outputscale_initial_value"], [75, 3, 1, "", "outputscale_prior"], [75, 2, 1, "", "to_dict"], [75, 2, 1, "", "to_factory"], [75, 2, 1, "", "to_gpytorch"], [75, 2, 1, "", "to_json"]], "baybe.objective": [[77, 4, 1, "", "Objective"]], "baybe.objectives": [[79, 0, 0, "-", "base"], [82, 0, 0, "-", "deprecation"], [84, 0, 0, "-", "desirability"], [87, 0, 0, "-", "enum"], [89, 0, 0, "-", "single"]], "baybe.objectives.base": [[80, 1, 1, "", "Objective"], [81, 4, 1, "", "to_objective"]], "baybe.objectives.base.Objective": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "from_dict"], [80, 2, 1, "", "from_json"], [80, 5, 1, "", "targets"], [80, 2, 1, "", "to_dict"], [80, 2, 1, "", "to_json"], [80, 2, 1, "", "transform"]], "baybe.objectives.deprecation": [[83, 4, 1, "", "structure_objective"]], "baybe.objectives.desirability": [[85, 1, 1, "", "DesirabilityObjective"], [86, 4, 1, "", "scalarize"]], "baybe.objectives.desirability.DesirabilityObjective": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "from_dict"], [85, 2, 1, "", "from_json"], [85, 3, 1, "", "scalarizer"], [85, 5, 1, "", "targets"], [85, 2, 1, "", "to_dict"], [85, 2, 1, "", "to_json"], [85, 2, 1, "", "transform"], [85, 3, 1, "", "weights"]], "baybe.objectives.enum": [[88, 1, 1, "", "Scalarizer"]], "baybe.objectives.enum.Scalarizer": [[88, 3, 1, "", "GEOM_MEAN"], [88, 3, 1, "", "MEAN"]], "baybe.objectives.single": [[90, 1, 1, "", "SingleTargetObjective"]], "baybe.objectives.single.SingleTargetObjective": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "from_dict"], [90, 2, 1, "", "from_json"], [90, 5, 1, "", "targets"], [90, 2, 1, "", "to_dict"], [90, 2, 1, "", "to_json"], [90, 2, 1, "", "transform"]], "baybe.parameters": [[92, 0, 0, "-", "base"], [96, 0, 0, "-", "categorical"], [99, 0, 0, "-", "custom"], [101, 0, 0, "-", "enum"], [106, 0, 0, "-", "numerical"], [109, 0, 0, "-", "substance"], [112, 0, 0, "-", "utils"], [114, 0, 0, "-", "validation"]], "baybe.parameters.base": [[93, 1, 1, "", "ContinuousParameter"], [94, 1, 1, "", "DiscreteParameter"], [95, 1, 1, "", "Parameter"]], "baybe.parameters.base.ContinuousParameter": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "from_dict"], [93, 2, 1, "", "from_json"], [93, 5, 1, "", "is_continuous"], [93, 5, 1, "", "is_discrete"], [93, 2, 1, "", "is_in_range"], [93, 3, 1, "", "is_numeric"], [93, 3, 1, "", "name"], [93, 2, 1, "", "summary"], [93, 2, 1, "", "to_dict"], [93, 2, 1, "", "to_json"]], "baybe.parameters.base.DiscreteParameter": [[94, 2, 1, "", "__init__"], [94, 5, 1, "", "comp_df"], [94, 3, 1, "", "encoding"], [94, 2, 1, "", "from_dict"], [94, 2, 1, "", "from_json"], [94, 5, 1, "", "is_continuous"], [94, 5, 1, "", "is_discrete"], [94, 2, 1, "", "is_in_range"], [94, 3, 1, "", "is_numeric"], [94, 3, 1, "", "name"], [94, 2, 1, "", "summary"], [94, 2, 1, "", "to_dict"], [94, 2, 1, "", "to_json"], [94, 2, 1, "", "transform_rep_exp2comp"], [94, 5, 1, "", "values"]], "baybe.parameters.base.Parameter": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "from_dict"], [95, 2, 1, "", "from_json"], [95, 5, 1, "", "is_continuous"], [95, 5, 1, "", "is_discrete"], [95, 2, 1, "", "is_in_range"], [95, 3, 1, "", "is_numeric"], [95, 3, 1, "", "name"], [95, 2, 1, "", "summary"], [95, 2, 1, "", "to_dict"], [95, 2, 1, "", "to_json"]], "baybe.parameters.categorical": [[97, 1, 1, "", "CategoricalParameter"], [98, 1, 1, "", "TaskParameter"]], "baybe.parameters.categorical.CategoricalParameter": [[97, 2, 1, "", "__init__"], [97, 5, 1, "", "comp_df"], [97, 3, 1, "", "encoding"], [97, 2, 1, "", "from_dict"], [97, 2, 1, "", "from_json"], [97, 5, 1, "", "is_continuous"], [97, 5, 1, "", "is_discrete"], [97, 2, 1, "", "is_in_range"], [97, 3, 1, "", "is_numeric"], [97, 3, 1, "", "name"], [97, 2, 1, "", "summary"], [97, 2, 1, "", "to_dict"], [97, 2, 1, "", "to_json"], [97, 2, 1, "", "transform_rep_exp2comp"], [97, 5, 1, "", "values"]], "baybe.parameters.categorical.TaskParameter": [[98, 2, 1, "", "__init__"], [98, 3, 1, "", "active_values"], [98, 5, 1, "", "comp_df"], [98, 3, 1, "", "encoding"], [98, 2, 1, "", "from_dict"], [98, 2, 1, "", "from_json"], [98, 5, 1, "", "is_continuous"], [98, 5, 1, "", "is_discrete"], [98, 2, 1, "", "is_in_range"], [98, 3, 1, "", "is_numeric"], [98, 3, 1, "", "name"], [98, 2, 1, "", "summary"], [98, 2, 1, "", "to_dict"], [98, 2, 1, "", "to_json"], [98, 2, 1, "", "transform_rep_exp2comp"], [98, 5, 1, "", "values"]], "baybe.parameters.custom": [[100, 1, 1, "", "CustomDiscreteParameter"]], "baybe.parameters.custom.CustomDiscreteParameter": [[100, 2, 1, "", "__init__"], [100, 5, 1, "", "comp_df"], [100, 3, 1, "", "data"], [100, 3, 1, "", "decorrelate"], [100, 3, 1, "", "encoding"], [100, 2, 1, "", "from_dict"], [100, 2, 1, "", "from_json"], [100, 5, 1, "", "is_continuous"], [100, 5, 1, "", "is_discrete"], [100, 2, 1, "", "is_in_range"], [100, 3, 1, "", "is_numeric"], [100, 3, 1, "", "name"], [100, 2, 1, "", "summary"], [100, 2, 1, "", "to_dict"], [100, 2, 1, "", "to_json"], [100, 2, 1, "", "transform_rep_exp2comp"], [100, 5, 1, "", "values"]], "baybe.parameters.enum": [[102, 1, 1, "", "CategoricalEncoding"], [103, 1, 1, "", "CustomEncoding"], [104, 1, 1, "", "ParameterEncoding"], [105, 1, 1, "", "SubstanceEncoding"]], "baybe.parameters.enum.CategoricalEncoding": [[102, 3, 1, "", "INT"], [102, 3, 1, "", "OHE"], [102, 2, 1, "", "__new__"]], "baybe.parameters.enum.CustomEncoding": [[103, 3, 1, "", "CUSTOM"], [103, 2, 1, "", "__new__"]], "baybe.parameters.enum.SubstanceEncoding": [[105, 3, 1, "", "MORDRED"], [105, 3, 1, "", "MORGAN_FP"], [105, 3, 1, "", "RDKIT"], [105, 2, 1, "", "__new__"]], "baybe.parameters.numerical": [[107, 1, 1, "", "NumericalContinuousParameter"], [108, 1, 1, "", "NumericalDiscreteParameter"]], "baybe.parameters.numerical.NumericalContinuousParameter": [[107, 2, 1, "", "__init__"], [107, 3, 1, "", "bounds"], [107, 2, 1, "", "from_dict"], [107, 2, 1, "", "from_json"], [107, 5, 1, "", "is_continuous"], [107, 5, 1, "", "is_discrete"], [107, 2, 1, "", "is_in_range"], [107, 3, 1, "", "is_numeric"], [107, 3, 1, "", "name"], [107, 2, 1, "", "summary"], [107, 2, 1, "", "to_dict"], [107, 2, 1, "", "to_json"]], "baybe.parameters.numerical.NumericalDiscreteParameter": [[108, 2, 1, "", "__init__"], [108, 5, 1, "", "comp_df"], [108, 3, 1, "", "encoding"], [108, 2, 1, "", "from_dict"], [108, 2, 1, "", "from_json"], [108, 5, 1, "", "is_continuous"], [108, 5, 1, "", "is_discrete"], [108, 2, 1, "", "is_in_range"], [108, 3, 1, "", "is_numeric"], [108, 3, 1, "", "name"], [108, 2, 1, "", "summary"], [108, 2, 1, "", "to_dict"], [108, 2, 1, "", "to_json"], [108, 3, 1, "", "tolerance"], [108, 2, 1, "", "transform_rep_exp2comp"], [108, 5, 1, "", "values"]], "baybe.parameters.substance": [[110, 3, 1, "", "Smiles"], [111, 1, 1, "", "SubstanceParameter"]], "baybe.parameters.substance.SubstanceParameter": [[111, 2, 1, "", "__init__"], [111, 5, 1, "", "comp_df"], [111, 3, 1, "", "data"], [111, 3, 1, "", "decorrelate"], [111, 3, 1, "", "encoding"], [111, 2, 1, "", "from_dict"], [111, 2, 1, "", "from_json"], [111, 5, 1, "", "is_continuous"], [111, 5, 1, "", "is_discrete"], [111, 2, 1, "", "is_in_range"], [111, 3, 1, "", "is_numeric"], [111, 3, 1, "", "name"], [111, 2, 1, "", "summary"], [111, 2, 1, "", "to_dict"], [111, 2, 1, "", "to_json"], [111, 2, 1, "", "transform_rep_exp2comp"], [111, 5, 1, "", "values"]], "baybe.parameters.utils": [[113, 4, 1, "", "get_parameters_from_dataframe"]], "baybe.parameters.validation": [[115, 4, 1, "", "validate_decorrelation"], [116, 4, 1, "", "validate_is_finite"], [117, 4, 1, "", "validate_unique_values"]], "baybe.priors": [[119, 0, 0, "-", "base"], [121, 0, 0, "-", "basic"]], "baybe.priors.base": [[120, 1, 1, "", "Prior"]], "baybe.priors.base.Prior": [[120, 2, 1, "", "__init__"], [120, 2, 1, "", "from_dict"], [120, 2, 1, "", "from_json"], [120, 2, 1, "", "to_dict"], [120, 2, 1, "", "to_gpytorch"], [120, 2, 1, "", "to_json"]], "baybe.priors.basic": [[122, 1, 1, "", "GammaPrior"], [123, 1, 1, "", "HalfCauchyPrior"], [124, 1, 1, "", "HalfNormalPrior"], [125, 1, 1, "", "LogNormalPrior"], [126, 1, 1, "", "NormalPrior"], [127, 1, 1, "", "SmoothedBoxPrior"]], "baybe.priors.basic.GammaPrior": [[122, 2, 1, "", "__init__"], [122, 3, 1, "", "concentration"], [122, 2, 1, "", "from_dict"], [122, 2, 1, "", "from_json"], [122, 3, 1, "", "rate"], [122, 2, 1, "", "to_dict"], [122, 2, 1, "", "to_gpytorch"], [122, 2, 1, "", "to_json"]], "baybe.priors.basic.HalfCauchyPrior": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "from_dict"], [123, 2, 1, "", "from_json"], [123, 3, 1, "", "scale"], [123, 2, 1, "", "to_dict"], [123, 2, 1, "", "to_gpytorch"], [123, 2, 1, "", "to_json"]], "baybe.priors.basic.HalfNormalPrior": [[124, 2, 1, "", "__init__"], [124, 2, 1, "", "from_dict"], [124, 2, 1, "", "from_json"], [124, 3, 1, "", "scale"], [124, 2, 1, "", "to_dict"], [124, 2, 1, "", "to_gpytorch"], [124, 2, 1, "", "to_json"]], "baybe.priors.basic.LogNormalPrior": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "from_dict"], [125, 2, 1, "", "from_json"], [125, 3, 1, "", "loc"], [125, 3, 1, "", "scale"], [125, 2, 1, "", "to_dict"], [125, 2, 1, "", "to_gpytorch"], [125, 2, 1, "", "to_json"]], "baybe.priors.basic.NormalPrior": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "from_dict"], [126, 2, 1, "", "from_json"], [126, 3, 1, "", "loc"], [126, 3, 1, "", "scale"], [126, 2, 1, "", "to_dict"], [126, 2, 1, "", "to_gpytorch"], [126, 2, 1, "", "to_json"]], "baybe.priors.basic.SmoothedBoxPrior": [[127, 2, 1, "", "__init__"], [127, 3, 1, "", "a"], [127, 3, 1, "", "b"], [127, 2, 1, "", "from_dict"], [127, 2, 1, "", "from_json"], [127, 3, 1, "", "sigma"], [127, 2, 1, "", "to_dict"], [127, 2, 1, "", "to_gpytorch"], [127, 2, 1, "", "to_json"]], "baybe.recommenders": [[129, 0, 0, "-", "base"], [131, 0, 0, "-", "deprecation"], [133, 0, 0, "-", "meta"], [140, 0, 0, "-", "naive"], [142, 0, 0, "-", "pure"]], "baybe.recommenders.base": [[130, 1, 1, "", "RecommenderProtocol"]], "baybe.recommenders.base.RecommenderProtocol": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "recommend"]], "baybe.recommenders.deprecation": [[132, 4, 1, "", "structure_recommender_protocol"]], "baybe.recommenders.meta": [[134, 0, 0, "-", "base"], [136, 0, 0, "-", "sequential"]], "baybe.recommenders.meta.base": [[135, 1, 1, "", "MetaRecommender"]], "baybe.recommenders.meta.base.MetaRecommender": [[135, 2, 1, "", "__init__"], [135, 3, 1, "", "allow_recommending_already_measured"], [135, 3, 1, "", "allow_repeated_recommendations"], [135, 2, 1, "", "from_dict"], [135, 2, 1, "", "from_json"], [135, 2, 1, "", "recommend"], [135, 2, 1, "", "select_recommender"], [135, 2, 1, "", "to_dict"], [135, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential": [[137, 1, 1, "", "SequentialMetaRecommender"], [138, 1, 1, "", "StreamingSequentialMetaRecommender"], [139, 1, 1, "", "TwoPhaseMetaRecommender"]], "baybe.recommenders.meta.sequential.SequentialMetaRecommender": [[137, 2, 1, "", "__init__"], [137, 3, 1, "", "allow_recommending_already_measured"], [137, 3, 1, "", "allow_repeated_recommendations"], [137, 2, 1, "", "from_dict"], [137, 2, 1, "", "from_json"], [137, 3, 1, "", "mode"], [137, 2, 1, "", "recommend"], [137, 3, 1, "", "recommenders"], [137, 2, 1, "", "select_recommender"], [137, 2, 1, "", "to_dict"], [137, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential.StreamingSequentialMetaRecommender": [[138, 2, 1, "", "__init__"], [138, 3, 1, "", "allow_recommending_already_measured"], [138, 3, 1, "", "allow_repeated_recommendations"], [138, 2, 1, "", "default_iterator"], [138, 2, 1, "", "from_dict"], [138, 2, 1, "", "from_json"], [138, 2, 1, "", "recommend"], [138, 3, 1, "", "recommenders"], [138, 2, 1, "", "select_recommender"], [138, 2, 1, "", "to_dict"], [138, 2, 1, "", "to_json"]], "baybe.recommenders.meta.sequential.TwoPhaseMetaRecommender": [[139, 2, 1, "", "__init__"], [139, 3, 1, "", "allow_recommending_already_measured"], [139, 3, 1, "", "allow_repeated_recommendations"], [139, 2, 1, "", "from_dict"], [139, 2, 1, "", "from_json"], [139, 3, 1, "", "initial_recommender"], [139, 2, 1, "", "recommend"], [139, 3, 1, "", "recommender"], [139, 2, 1, "", "select_recommender"], [139, 3, 1, "", "switch_after"], [139, 2, 1, "", "to_dict"], [139, 2, 1, "", "to_json"]], "baybe.recommenders.naive": [[141, 1, 1, "", "NaiveHybridSpaceRecommender"]], "baybe.recommenders.naive.NaiveHybridSpaceRecommender": [[141, 2, 1, "", "__init__"], [141, 3, 1, "", "allow_recommending_already_measured"], [141, 3, 1, "", "allow_repeated_recommendations"], [141, 3, 1, "", "compatibility"], [141, 3, 1, "", "cont_recommender"], [141, 3, 1, "", "disc_recommender"], [141, 2, 1, "", "recommend"]], "baybe.recommenders.pure": [[143, 0, 0, "-", "base"], [145, 0, 0, "-", "bayesian"], [150, 0, 0, "-", "nonpredictive"]], "baybe.recommenders.pure.base": [[144, 1, 1, "", "PureRecommender"]], "baybe.recommenders.pure.base.PureRecommender": [[144, 2, 1, "", "__init__"], [144, 3, 1, "", "allow_recommending_already_measured"], [144, 3, 1, "", "allow_repeated_recommendations"], [144, 3, 1, "", "compatibility"], [144, 2, 1, "", "recommend"]], "baybe.recommenders.pure.bayesian": [[146, 0, 0, "-", "base"], [148, 0, 0, "-", "sequential_greedy"]], "baybe.recommenders.pure.bayesian.base": [[147, 1, 1, "", "BayesianRecommender"]], "baybe.recommenders.pure.bayesian.base.BayesianRecommender": [[147, 2, 1, "", "__init__"], [147, 3, 1, "", "acquisition_function"], [147, 3, 1, "", "acquisition_function_cls"], [147, 3, 1, "", "allow_recommending_already_measured"], [147, 3, 1, "", "allow_repeated_recommendations"], [147, 3, 1, "", "compatibility"], [147, 2, 1, "", "recommend"], [147, 3, 1, "", "surrogate_model"]], "baybe.recommenders.pure.bayesian.sequential_greedy": [[149, 1, 1, "", "SequentialGreedyRecommender"]], "baybe.recommenders.pure.bayesian.sequential_greedy.SequentialGreedyRecommender": [[149, 2, 1, "", "__init__"], [149, 3, 1, "", "acquisition_function"], [149, 3, 1, "", "acquisition_function_cls"], [149, 3, 1, "", "allow_recommending_already_measured"], [149, 3, 1, "", "allow_repeated_recommendations"], [149, 3, 1, "", "compatibility"], [149, 3, 1, "", "hybrid_sampler"], [149, 2, 1, "", "recommend"], [149, 3, 1, "", "sampling_percentage"], [149, 3, 1, "", "surrogate_model"]], "baybe.recommenders.pure.nonpredictive": [[151, 0, 0, "-", "base"], [153, 0, 0, "-", "clustering"], [158, 0, 0, "-", "sampling"]], "baybe.recommenders.pure.nonpredictive.base": [[152, 1, 1, "", "NonPredictiveRecommender"]], "baybe.recommenders.pure.nonpredictive.base.NonPredictiveRecommender": [[152, 2, 1, "", "__init__"], [152, 3, 1, "", "allow_recommending_already_measured"], [152, 3, 1, "", "allow_repeated_recommendations"], [152, 3, 1, "", "compatibility"], [152, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering": [[154, 1, 1, "", "GaussianMixtureClusteringRecommender"], [155, 1, 1, "", "KMeansClusteringRecommender"], [156, 1, 1, "", "PAMClusteringRecommender"], [157, 1, 1, "", "SKLearnClusteringRecommender"]], "baybe.recommenders.pure.nonpredictive.clustering.GaussianMixtureClusteringRecommender": [[154, 2, 1, "", "__init__"], [154, 3, 1, "", "allow_recommending_already_measured"], [154, 3, 1, "", "allow_repeated_recommendations"], [154, 3, 1, "", "compatibility"], [154, 3, 1, "", "model_class"], [154, 3, 1, "", "model_cluster_num_parameter_name"], [154, 3, 1, "", "model_params"], [154, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.KMeansClusteringRecommender": [[155, 2, 1, "", "__init__"], [155, 3, 1, "", "allow_recommending_already_measured"], [155, 3, 1, "", "allow_repeated_recommendations"], [155, 3, 1, "", "compatibility"], [155, 3, 1, "", "model_class"], [155, 3, 1, "", "model_cluster_num_parameter_name"], [155, 3, 1, "", "model_params"], [155, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.PAMClusteringRecommender": [[156, 2, 1, "", "__init__"], [156, 3, 1, "", "allow_recommending_already_measured"], [156, 3, 1, "", "allow_repeated_recommendations"], [156, 3, 1, "", "compatibility"], [156, 3, 1, "", "model_class"], [156, 3, 1, "", "model_cluster_num_parameter_name"], [156, 3, 1, "", "model_params"], [156, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.clustering.SKLearnClusteringRecommender": [[157, 2, 1, "", "__init__"], [157, 3, 1, "", "allow_recommending_already_measured"], [157, 3, 1, "", "allow_repeated_recommendations"], [157, 3, 1, "", "compatibility"], [157, 3, 1, "", "model_class"], [157, 3, 1, "", "model_cluster_num_parameter_name"], [157, 3, 1, "", "model_params"], [157, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.sampling": [[159, 1, 1, "", "FPSRecommender"], [160, 1, 1, "", "RandomRecommender"]], "baybe.recommenders.pure.nonpredictive.sampling.FPSRecommender": [[159, 2, 1, "", "__init__"], [159, 3, 1, "", "allow_recommending_already_measured"], [159, 3, 1, "", "allow_repeated_recommendations"], [159, 3, 1, "", "compatibility"], [159, 2, 1, "", "recommend"]], "baybe.recommenders.pure.nonpredictive.sampling.RandomRecommender": [[160, 2, 1, "", "__init__"], [160, 3, 1, "", "allow_recommending_already_measured"], [160, 3, 1, "", "allow_repeated_recommendations"], [160, 3, 1, "", "compatibility"], [160, 2, 1, "", "recommend"]], "baybe.scaler": [[162, 1, 1, "", "DefaultScaler"], [163, 1, 1, "", "Scaler"]], "baybe.scaler.DefaultScaler": [[162, 3, 1, "", "SUBCLASSES"], [162, 2, 1, "", "__init__"], [162, 2, 1, "", "fit_transform"], [162, 2, 1, "", "transform"], [162, 3, 1, "", "type"], [162, 2, 1, "", "untransform"]], "baybe.scaler.Scaler": [[163, 3, 1, "", "SUBCLASSES"], [163, 2, 1, "", "__init__"], [163, 2, 1, "", "fit_transform"], [163, 2, 1, "", "transform"], [163, 3, 1, "", "type"], [163, 2, 1, "", "untransform"]], "baybe.searchspace": [[165, 0, 0, "-", "continuous"], [167, 0, 0, "-", "core"], [171, 0, 0, "-", "discrete"], [176, 0, 0, "-", "validation"]], "baybe.searchspace.continuous": [[166, 1, 1, "", "SubspaceContinuous"]], "baybe.searchspace.continuous.SubspaceContinuous": [[166, 2, 1, "", "__init__"], [166, 3, 1, "", "constraints_lin_eq"], [166, 3, 1, "", "constraints_lin_ineq"], [166, 2, 1, "", "empty"], [166, 2, 1, "", "from_bounds"], [166, 2, 1, "", "from_dataframe"], [166, 2, 1, "", "from_dict"], [166, 2, 1, "", "from_json"], [166, 5, 1, "", "full_factorial"], [166, 5, 1, "", "is_empty"], [166, 5, 1, "", "param_bounds_comp"], [166, 5, 1, "", "param_names"], [166, 3, 1, "", "parameters"], [166, 2, 1, "", "samples_full_factorial"], [166, 2, 1, "", "samples_random"], [166, 2, 1, "", "to_dict"], [166, 2, 1, "", "to_json"], [166, 2, 1, "", "transform"]], "baybe.searchspace.core": [[168, 1, 1, "", "SearchSpace"], [169, 1, 1, "", "SearchSpaceType"], [170, 4, 1, "", "validate_searchspace_from_config"]], "baybe.searchspace.core.SearchSpace": [[168, 2, 1, "", "__init__"], [168, 5, 1, "", "constraints"], [168, 5, 1, "", "contains_mordred"], [168, 5, 1, "", "contains_rdkit"], [168, 3, 1, "", "continuous"], [168, 3, 1, "", "discrete"], [168, 2, 1, "", "estimate_product_space_size"], [168, 2, 1, "", "from_dataframe"], [168, 2, 1, "", "from_dict"], [168, 2, 1, "", "from_json"], [168, 2, 1, "", "from_product"], [168, 5, 1, "", "n_tasks"], [168, 5, 1, "", "param_bounds_comp"], [168, 5, 1, "", "parameters"], [168, 5, 1, "", "task_idx"], [168, 2, 1, "", "to_dict"], [168, 2, 1, "", "to_json"], [168, 2, 1, "", "transform"], [168, 5, 1, "", "type"]], "baybe.searchspace.core.SearchSpaceType": [[169, 3, 1, "", "CONTINUOUS"], [169, 3, 1, "", "DISCRETE"], [169, 3, 1, "", "EITHER"], [169, 3, 1, "", "HYBRID"]], "baybe.searchspace.discrete": [[172, 1, 1, "", "MemorySize"], [173, 1, 1, "", "SubspaceDiscrete"], [174, 4, 1, "", "parameter_cartesian_prod_to_df"], [175, 4, 1, "", "validate_simplex_subspace_from_config"]], "baybe.searchspace.discrete.MemorySize": [[172, 2, 1, "", "__init__"], [172, 3, 1, "", "comp_rep_bytes"], [172, 5, 1, "", "comp_rep_human_readable"], [172, 3, 1, "", "comp_rep_shape"], [172, 3, 1, "", "exp_rep_bytes"], [172, 5, 1, "", "exp_rep_human_readable"], [172, 3, 1, "", "exp_rep_shape"]], "baybe.searchspace.discrete.SubspaceDiscrete": [[173, 2, 1, "", "__init__"], [173, 3, 1, "", "comp_rep"], [173, 3, 1, "", "constraints"], [173, 2, 1, "", "empty"], [173, 3, 1, "", "empty_encoding"], [173, 2, 1, "", "estimate_product_space_size"], [173, 3, 1, "", "exp_rep"], [173, 2, 1, "", "from_dataframe"], [173, 2, 1, "", "from_dict"], [173, 2, 1, "", "from_json"], [173, 2, 1, "", "from_product"], [173, 2, 1, "", "from_simplex"], [173, 2, 1, "", "get_candidates"], [173, 5, 1, "", "is_empty"], [173, 2, 1, "", "mark_as_measured"], [173, 3, 1, "", "metadata"], [173, 5, 1, "", "param_bounds_comp"], [173, 3, 1, "", "parameters"], [173, 2, 1, "", "to_dict"], [173, 2, 1, "", "to_json"], [173, 2, 1, "", "transform"]], "baybe.searchspace.validation": [[177, 4, 1, "", "validate_parameter_names"], [178, 4, 1, "", "validate_parameters"]], "baybe.serialization": [[180, 0, 0, "-", "core"], [187, 0, 0, "-", "mixin"], [189, 0, 0, "-", "utils"]], "baybe.serialization.core": [[181, 4, 1, "", "block_deserialization_hook"], [182, 4, 1, "", "block_serialization_hook"], [183, 7, 1, "", "converter"], [184, 4, 1, "", "get_base_structure_hook"], [185, 4, 1, "", "select_constructor_hook"], [186, 4, 1, "", "unstructure_base"]], "baybe.serialization.mixin": [[188, 1, 1, "", "SerialMixin"]], "baybe.serialization.mixin.SerialMixin": [[188, 2, 1, "", "from_dict"], [188, 2, 1, "", "from_json"], [188, 2, 1, "", "to_dict"], [188, 2, 1, "", "to_json"]], "baybe.serialization.utils": [[190, 4, 1, "", "deserialize_dataframe"], [191, 4, 1, "", "serialize_dataframe"]], "baybe.simulation": [[193, 0, 0, "-", "core"], [195, 0, 0, "-", "lookup"], [196, 0, 0, "-", "scenarios"], [198, 0, 0, "-", "transfer_learning"]], "baybe.simulation.core": [[194, 4, 1, "", "simulate_experiment"]], "baybe.simulation.scenarios": [[197, 4, 1, "", "simulate_scenarios"]], "baybe.simulation.transfer_learning": [[199, 4, 1, "", "simulate_transfer_learning"]], "baybe.strategies": [[201, 0, 0, "-", "deprecation"]], "baybe.strategies.deprecation": [[202, 4, 1, "", "SequentialStrategy"], [203, 4, 1, "", "StreamingSequentialStrategy"], [204, 4, 1, "", "TwoPhaseStrategy"]], "baybe.surrogates": [[206, 0, 0, "-", "base"], [208, 0, 0, "-", "custom"], [211, 0, 0, "-", "gaussian_process"], [224, 0, 0, "-", "linear"], [226, 0, 0, "-", "naive"], [228, 0, 0, "-", "ngboost"], [230, 0, 0, "-", "random_forest"], [232, 0, 0, "-", "utils"], [236, 0, 0, "-", "validation"]], "baybe.surrogates.base": [[207, 1, 1, "", "Surrogate"]], "baybe.surrogates.base.Surrogate": [[207, 2, 1, "", "__init__"], [207, 2, 1, "", "fit"], [207, 2, 1, "", "from_dict"], [207, 2, 1, "", "from_json"], [207, 3, 1, "", "joint_posterior"], [207, 2, 1, "", "posterior"], [207, 3, 1, "", "supports_transfer_learning"], [207, 2, 1, "", "to_dict"], [207, 2, 1, "", "to_json"]], "baybe.surrogates.custom": [[209, 1, 1, "", "CustomONNXSurrogate"], [210, 4, 1, "", "register_custom_architecture"]], "baybe.surrogates.custom.CustomONNXSurrogate": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "default_model"], [209, 2, 1, "", "fit"], [209, 2, 1, "", "from_dict"], [209, 2, 1, "", "from_json"], [209, 3, 1, "", "joint_posterior"], [209, 3, 1, "", "onnx_input_name"], [209, 3, 1, "", "onnx_str"], [209, 2, 1, "", "posterior"], [209, 3, 1, "", "supports_transfer_learning"], [209, 2, 1, "", "to_dict"], [209, 2, 1, "", "to_json"], [209, 2, 1, "", "validate_compatibility"]], "baybe.surrogates.gaussian_process": [[212, 0, 0, "-", "core"], [214, 0, 0, "-", "kernel_factory"], [218, 0, 0, "-", "presets"]], "baybe.surrogates.gaussian_process.core": [[213, 1, 1, "", "GaussianProcessSurrogate"]], "baybe.surrogates.gaussian_process.core.GaussianProcessSurrogate": [[213, 2, 1, "", "__init__"], [213, 2, 1, "", "fit"], [213, 2, 1, "", "from_dict"], [213, 2, 1, "", "from_json"], [213, 2, 1, "", "from_preset"], [213, 3, 1, "", "joint_posterior"], [213, 3, 1, "", "kernel_factory"], [213, 2, 1, "", "posterior"], [213, 3, 1, "", "supports_transfer_learning"], [213, 2, 1, "", "to_dict"], [213, 2, 1, "", "to_json"]], "baybe.surrogates.gaussian_process.kernel_factory": [[215, 1, 1, "", "KernelFactory"], [216, 1, 1, "", "PlainKernelFactory"], [217, 4, 1, "", "to_kernel_factory"]], "baybe.surrogates.gaussian_process.kernel_factory.KernelFactory": [[215, 2, 1, "", "__init__"]], "baybe.surrogates.gaussian_process.kernel_factory.PlainKernelFactory": [[216, 2, 1, "", "__init__"], [216, 2, 1, "", "from_dict"], [216, 2, 1, "", "from_json"], [216, 3, 1, "", "kernel"], [216, 2, 1, "", "to_dict"], [216, 2, 1, "", "to_json"]], "baybe.surrogates.gaussian_process.presets": [[219, 0, 0, "-", "core"], [222, 0, 0, "-", "default"]], "baybe.surrogates.gaussian_process.presets.core": [[220, 1, 1, "", "GaussianProcessPreset"], [221, 4, 1, "", "make_gp_from_preset"]], "baybe.surrogates.gaussian_process.presets.core.GaussianProcessPreset": [[220, 3, 1, "", "BAYBE"]], "baybe.surrogates.gaussian_process.presets.default": [[223, 1, 1, "", "DefaultKernelFactory"]], "baybe.surrogates.gaussian_process.presets.default.DefaultKernelFactory": [[223, 2, 1, "", "__init__"]], "baybe.surrogates.linear": [[225, 1, 1, "", "BayesianLinearSurrogate"]], "baybe.surrogates.linear.BayesianLinearSurrogate": [[225, 2, 1, "", "__init__"], [225, 2, 1, "", "fit"], [225, 2, 1, "", "from_dict"], [225, 2, 1, "", "from_json"], [225, 3, 1, "", "joint_posterior"], [225, 3, 1, "", "model_params"], [225, 2, 1, "", "posterior"], [225, 3, 1, "", "supports_transfer_learning"], [225, 2, 1, "", "to_dict"], [225, 2, 1, "", "to_json"]], "baybe.surrogates.naive": [[227, 1, 1, "", "MeanPredictionSurrogate"]], "baybe.surrogates.naive.MeanPredictionSurrogate": [[227, 2, 1, "", "__init__"], [227, 2, 1, "", "fit"], [227, 2, 1, "", "from_dict"], [227, 2, 1, "", "from_json"], [227, 3, 1, "", "joint_posterior"], [227, 2, 1, "", "posterior"], [227, 3, 1, "", "supports_transfer_learning"], [227, 2, 1, "", "to_dict"], [227, 2, 1, "", "to_json"]], "baybe.surrogates.ngboost": [[229, 1, 1, "", "NGBoostSurrogate"]], "baybe.surrogates.ngboost.NGBoostSurrogate": [[229, 2, 1, "", "__init__"], [229, 2, 1, "", "fit"], [229, 2, 1, "", "from_dict"], [229, 2, 1, "", "from_json"], [229, 3, 1, "", "joint_posterior"], [229, 3, 1, "", "model_params"], [229, 2, 1, "", "posterior"], [229, 3, 1, "", "supports_transfer_learning"], [229, 2, 1, "", "to_dict"], [229, 2, 1, "", "to_json"]], "baybe.surrogates.random_forest": [[231, 1, 1, "", "RandomForestSurrogate"]], "baybe.surrogates.random_forest.RandomForestSurrogate": [[231, 2, 1, "", "__init__"], [231, 2, 1, "", "fit"], [231, 2, 1, "", "from_dict"], [231, 2, 1, "", "from_json"], [231, 3, 1, "", "joint_posterior"], [231, 3, 1, "", "model_params"], [231, 2, 1, "", "posterior"], [231, 3, 1, "", "supports_transfer_learning"], [231, 2, 1, "", "to_dict"], [231, 2, 1, "", "to_json"]], "baybe.surrogates.utils": [[233, 4, 1, "", "autoscale"], [234, 4, 1, "", "batchify"], [235, 4, 1, "", "catch_constant_targets"]], "baybe.surrogates.validation": [[237, 4, 1, "", "get_model_params_validator"], [238, 4, 1, "", "validate_custom_architecture_cls"]], "baybe.targets": [[240, 0, 0, "-", "base"], [242, 0, 0, "-", "enum"], [245, 0, 0, "-", "numerical"], [247, 0, 0, "-", "transforms"]], "baybe.targets.base": [[241, 1, 1, "", "Target"]], "baybe.targets.base.Target": [[241, 2, 1, "", "__init__"], [241, 2, 1, "", "from_dict"], [241, 2, 1, "", "from_json"], [241, 3, 1, "", "name"], [241, 2, 1, "", "summary"], [241, 2, 1, "", "to_dict"], [241, 2, 1, "", "to_json"], [241, 2, 1, "", "to_objective"], [241, 2, 1, "", "transform"]], "baybe.targets.enum": [[243, 1, 1, "", "TargetMode"], [244, 1, 1, "", "TargetTransformation"]], "baybe.targets.enum.TargetMode": [[243, 3, 1, "", "MATCH"], [243, 3, 1, "", "MAX"], [243, 3, 1, "", "MIN"]], "baybe.targets.enum.TargetTransformation": [[244, 3, 1, "", "BELL"], [244, 3, 1, "", "LINEAR"], [244, 3, 1, "", "TRIANGULAR"]], "baybe.targets.numerical": [[246, 1, 1, "", "NumericalTarget"]], "baybe.targets.numerical.NumericalTarget": [[246, 2, 1, "", "__init__"], [246, 3, 1, "", "bounds"], [246, 2, 1, "", "from_dict"], [246, 2, 1, "", "from_json"], [246, 3, 1, "", "mode"], [246, 3, 1, "", "name"], [246, 2, 1, "", "summary"], [246, 2, 1, "", "to_dict"], [246, 2, 1, "", "to_json"], [246, 2, 1, "", "to_objective"], [246, 2, 1, "", "transform"], [246, 3, 1, "", "transformation"]], "baybe.targets.transforms": [[248, 4, 1, "", "bell_transform"], [249, 4, 1, "", "linear_transform"], [250, 4, 1, "", "triangular_transform"]], "baybe.telemetry": [[252, 4, 1, "", "get_user_details"], [253, 4, 1, "", "is_enabled"], [254, 4, 1, "", "telemetry_record_recommended_measurement_percentage"], [255, 4, 1, "", "telemetry_record_value"]], "baybe.utils": [[257, 0, 0, "-", "basic"], [268, 0, 0, "-", "boolean"], [272, 0, 0, "-", "botorch_wrapper"], [274, 0, 0, "-", "chemistry"], [282, 0, 0, "-", "conversion"], [284, 0, 0, "-", "dataframe"], [293, 0, 0, "-", "interval"], [298, 0, 0, "-", "memory"], [300, 0, 0, "-", "numerical"], [307, 0, 0, "-", "plotting"], [309, 0, 0, "-", "random"], [312, 0, 0, "-", "sampling_algorithms"], [314, 0, 0, "-", "torch"], [317, 0, 0, "-", "validation"]], "baybe.utils.basic": [[258, 1, 1, "", "Dummy"], [259, 1, 1, "", "classproperty"], [260, 4, 1, "", "filter_attributes"], [261, 4, 1, "", "find_subclass"], [262, 4, 1, "", "get_baseclasses"], [263, 4, 1, "", "get_subclasses"], [264, 4, 1, "", "group_duplicate_values"], [265, 4, 1, "", "hilberts_factory"], [266, 4, 1, "", "refers_to"], [267, 4, 1, "", "to_tuple"]], "baybe.utils.basic.Dummy": [[258, 2, 1, "", "__init__"]], "baybe.utils.basic.classproperty": [[259, 2, 1, "", "__init__"]], "baybe.utils.boolean": [[269, 4, 1, "", "check_if_in"], [270, 4, 1, "", "is_abstract"], [271, 4, 1, "", "strtobool"]], "baybe.utils.botorch_wrapper": [[273, 4, 1, "", "botorch_function_wrapper"]], "baybe.utils.chemistry": [[275, 4, 1, "", "get_canonical_smiles"], [276, 4, 1, "", "is_valid_smiles"], [277, 4, 1, "", "name_to_smiles"], [278, 4, 1, "", "smiles_to_fp_features"], [279, 4, 1, "", "smiles_to_molecules"], [280, 4, 1, "", "smiles_to_mordred_features"], [281, 4, 1, "", "smiles_to_rdkit_features"]], "baybe.utils.conversion": [[283, 4, 1, "", "fraction_to_float"]], "baybe.utils.dataframe": [[285, 4, 1, "", "add_fake_results"], [286, 4, 1, "", "add_parameter_noise"], [287, 4, 1, "", "df_drop_single_value_columns"], [288, 4, 1, "", "df_drop_string_columns"], [289, 4, 1, "", "df_uncorrelated_features"], [290, 4, 1, "", "fuzzy_row_match"], [291, 4, 1, "", "pretty_print_df"], [292, 4, 1, "", "to_tensor"]], "baybe.utils.interval": [[294, 6, 1, "", "InfiniteIntervalError"], [295, 1, 1, "", "Interval"], [296, 4, 1, "", "convert_bounds"], [297, 4, 1, "", "use_fallback_constructor_hook"]], "baybe.utils.interval.InfiniteIntervalError": [[294, 2, 1, "", "__init__"], [294, 2, 1, "", "__new__"]], "baybe.utils.interval.Interval": [[295, 2, 1, "", "__init__"], [295, 5, 1, "", "center"], [295, 2, 1, "", "contains"], [295, 2, 1, "", "create"], [295, 2, 1, "", "from_dict"], [295, 2, 1, "", "from_json"], [295, 5, 1, "", "is_bounded"], [295, 5, 1, "", "is_finite"], [295, 5, 1, "", "is_fully_unbounded"], [295, 5, 1, "", "is_half_bounded"], [295, 5, 1, "", "is_left_bounded"], [295, 5, 1, "", "is_right_bounded"], [295, 3, 1, "", "lower"], [295, 2, 1, "", "to_dict"], [295, 2, 1, "", "to_json"], [295, 2, 1, "", "to_ndarray"], [295, 2, 1, "", "to_tensor"], [295, 2, 1, "", "to_tuple"], [295, 3, 1, "", "upper"]], "baybe.utils.memory": [[299, 4, 1, "", "bytes_to_human_readable"]], "baybe.utils.numerical": [[301, 3, 1, "", "DTypeFloatNumpy"], [302, 3, 1, "", "DTypeFloatONNX"], [303, 7, 1, "", "VARNAME_NUMPY_USE_SINGLE_PRECISION"], [304, 4, 1, "", "closer_element"], [305, 4, 1, "", "closest_element"], [306, 4, 1, "", "geom_mean"]], "baybe.utils.plotting": [[308, 4, 1, "", "create_example_plots"]], "baybe.utils.random": [[310, 4, 1, "", "set_random_seed"], [311, 4, 1, "", "temporary_seed"]], "baybe.utils.sampling_algorithms": [[313, 4, 1, "", "farthest_point_sampling"]], "baybe.utils.torch": [[315, 7, 1, "", "DTypeFloatTorch"], [316, 7, 1, "", "VARNAME_TORCH_USE_SINGLE_PRECISION"]], "baybe.utils.validation": [[318, 4, 1, "", "finite_float"], [319, 4, 1, "", "non_inf_float"], [320, 4, 1, "", "non_nan_float"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property", "6": "py:exception", "7": "py:data"}, "terms": {"": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 265, 292, 295, 321, 325, 334, 342, 343, 344, 345, 346, 349, 353, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378], "0": [7, 14, 27, 34, 35, 65, 100, 108, 111, 127, 149, 173, 194, 248, 249, 250, 271, 286, 289, 302, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 366, 368, 370, 371, 373, 374, 377], "00": [338, 352, 373], "0000": 345, "000000": [336, 338, 354], "001": 368, "005": [324, 325, 327, 330, 331], "006364": 347, "01": [127, 322, 323, 326, 328, 333, 334, 340, 351, 352, 359], "010299": 331, "02": 359, "020386": 339, "021": [223, 289], "028294": 347, "029665": 349, "03213": [223, 289], "036765": 350, "044178": 352, "049987": 347, "05": 359, "053253": 351, "053579": [336, 338], "054832": 350, "055847": 352, "057": [324, 325, 327, 330, 331], "059140": 350, "06": [173, 235, 338], "064922": 352, "068262": 340, "0724": 345, "075729": 349, "08": 359, "082308": 349, "086036": 347, "093378": 330, "095909": 347, "0m": [336, 337, 338, 339, 340, 347, 354], "0mdesirabilityobject": 347, "0mdiscret": [336, 337, 338, 339, 340, 347, 354], "0min": [339, 343], "0mmean": 347, "0msingletargetobject": [336, 337, 338, 339, 340, 354], "1": [18, 23, 35, 65, 86, 100, 111, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 194, 197, 199, 248, 249, 250, 255, 264, 271, 286, 302, 306, 313, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 366, 367, 368, 370, 371, 373, 374, 375, 377], "10": [223, 289, 322, 323, 325, 328, 336, 337, 338, 342, 343, 344, 345, 347, 354, 355, 356, 358, 359, 361, 371], "100": [328, 330, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 359, 370, 371, 377], "102": 351, "1024": [278, 371], "1038": [223, 289], "104021": 349, "105": [324, 325, 327, 330, 331, 347, 373], "107": 351, "11": [259, 362], "111": [344, 345, 354], "111111": [344, 345, 354], "114276": 347, "1147": 338, "1148": 338, "1149": 338, "1150": 338, "11750": [224, 228, 230], "12": [328, 331, 339, 351, 352, 364, 373], "120": [324, 325, 327, 330, 331, 336, 338, 371], "120000": 351, "122": [344, 345, 354], "123": 342, "1268824": [324, 325, 327], "127": 328, "128": 343, "13": [358, 373], "1337": 328, "1338": 328, "136110": 347, "14": [325, 336, 337, 340, 373], "1454": 363, "146367": 350, "15": [322, 338, 358, 359, 361, 367, 373], "150": [336, 340, 368], "1500": 371, "151": 338, "153": [324, 325, 327, 330, 331], "154": 352, "155627": 352, "16": [302, 328], "171": 347, "175268": 347, "176738": 350, "177": 354, "178": 331, "18": [330, 339, 355, 356, 367], "180": 336, "185": 338, "188": 354, "192": 338, "196257": 349, "198": [343, 347], "199": 347, "1e": [173, 235, 343], "1mcampaign": [336, 337, 338, 339, 340, 347, 354], "1mcomput": [336, 337, 338, 339, 340, 347, 354], "1mconstraint": [336, 337, 338, 339, 340, 347, 354], "1mdiscret": [336, 337, 338, 339, 340, 347, 354], "1mexperiment": [336, 337, 338, 339, 340, 347, 354], "1mmeta": [336, 337, 338, 339, 340, 347, 354], "1mmetadata": [336, 337, 338, 339, 340, 347, 354], "1mobject": [336, 337, 338, 339, 340, 347, 354], "1mscalar": 347, "1msearch": [336, 337, 338, 339, 340, 347, 354], "1mtarget": [336, 337, 338, 339, 340, 347, 354], "1mtype": [336, 337, 338, 339, 340, 347, 354], "2": [7, 14, 65, 67, 86, 264, 285, 306, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 366, 367, 368, 370, 371, 373, 374, 375, 377], "20": [111, 324, 325, 327, 328, 347, 363, 371], "200": [325, 336, 338, 342, 343, 344, 345, 354], "2004": 366, "2021": 325, "2022": 361, "2024": 361, "203": 342, "207": 347, "208466": 347, "21": 355, "211179": 330, "213941": 352, "22": [347, 352], "220086": 347, "222222": [344, 345, 354], "227": 347, "231806": [336, 338], "239": [342, 343, 345], "24": [323, 326, 331, 337, 373], "241": 371, "25": [331, 339, 358, 373], "254898": 349, "255109": 347, "26": [352, 373], "27": [347, 373], "271": 347, "277": 347, "278": [343, 347], "279": 347, "280": 347, "287": 328, "287908": 352, "29": [344, 347, 361], "297": 330, "2d": [313, 371], "3": [259, 264, 322, 323, 324, 325, 326, 327, 328, 331, 334, 336, 337, 338, 339, 340, 343, 345, 347, 349, 350, 351, 352, 354, 355, 358, 359, 361, 362, 364, 366, 367, 368, 371, 373, 374, 377, 378], "30": [322, 328, 340, 371], "31": [339, 355], "32": [330, 337, 339, 343, 371], "325790": 347, "33": [337, 339, 347], "337644": 347, "34": [337, 339, 347], "35": [337, 347], "351774": 350, "356727": 349, "36": 339, "365603": 349, "371658": 347, "376076": 351, "381": 331, "383613": 347, "39": [336, 349, 351, 371], "4": [278, 291, 322, 323, 326, 328, 333, 334, 336, 337, 338, 339, 340, 347, 349, 350, 351, 352, 361, 366, 367, 368, 371, 373], "40": [370, 371], "403": 331, "411510": [336, 338, 340], "426564": 347, "429405": 350, "43": 347, "430": 330, "447": 336, "448": 336, "449": 336, "45": [347, 377], "450": 336, "453686": 352, "47": 325, "470835": 349, "499786": 352, "5": [23, 65, 111, 323, 324, 326, 327, 328, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 351, 352, 354, 355, 356, 358, 359, 361, 366, 367, 368, 371, 373, 378], "50": [339, 340, 345, 347, 358, 359, 366, 371, 373, 377], "500": 371, "501977": 350, "51": 347, "511": 328, "518211": 347, "518387": 352, "52": 347, "522380": 352, "53": [340, 347], "5313": 267, "54": 361, "543836": 339, "546025": 347, "55": [347, 377], "56": [337, 347], "563050": 331, "564656": 347, "57": [325, 347, 355, 356], "574002": 350, "584854": 350, "584863": 347, "59": [336, 340, 347, 354, 361], "590": 325, "6": [291, 324, 325, 326, 327, 337, 339, 340, 345, 347, 352, 366, 368, 373], "60": [347, 370], "602904": 347, "609138": 347, "61": 347, "613267": 347, "626523": 347, "631785": 350, "642317": 347, "642896": 352, "65": 347, "678604": 347, "689048": 350, "69": [324, 325, 327], "7": [111, 289, 337, 340, 347, 358, 366, 371, 373], "702477": 347, "706667": 351, "7071": 345, "707173": 347, "708916": 347, "71": 371, "714286": 338, "73": 349, "730423": 351, "732983": 347, "75": [339, 347, 351, 373], "764030": 347, "766479": 347, "777778": 354, "78": 347, "785376": 347, "785735": 349, "79": 361, "7gz": 371, "7hf": 371, "8": [323, 324, 326, 327, 328, 336, 338, 340, 343, 347, 361, 366, 368], "80": 368, "805007": 350, "81": [347, 349], "818054": 349, "822662": 347, "822865": 347, "827686": 350, "834957": 331, "8389": 267, "84": 347, "8417": 267, "857143": 338, "860748": 352, "861": 340, "862": 340, "863": 340, "864": 340, "87": 354, "88": 354, "8859": 344, "888889": 354, "89": [325, 347, 351, 354], "890268": 349, "891405": 347, "8jq": 371, "9": [336, 338, 340, 347, 366, 367, 373, 374], "90": [324, 325, 327, 330, 331, 354, 373], "900304": 349, "91": 347, "92": 352, "921743": 350, "922960": 349, "94": 352, "95": 347, "96": 325, "960779": 349, "99": 347, "999": 368, "A": [0, 7, 14, 18, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 52, 53, 54, 57, 59, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 83, 85, 86, 90, 100, 108, 111, 113, 121, 122, 123, 124, 125, 126, 127, 130, 132, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 166, 168, 173, 174, 188, 189, 194, 197, 199, 202, 203, 204, 209, 210, 213, 215, 216, 223, 225, 227, 229, 231, 237, 241, 246, 248, 249, 250, 259, 260, 262, 263, 264, 272, 273, 285, 289, 292, 299, 306, 312, 313, 337, 342, 343, 345, 347, 355, 356, 362, 363, 364, 366, 368, 371, 372, 373, 374, 375, 377], "AND": [39, 338, 366, 368], "AS": [361, 366], "And": 344, "As": [323, 324, 325, 327, 347, 358, 359, 361, 368, 372, 373, 375], "At": 377, "But": 377, "By": [85, 98, 113, 173, 270, 364, 369, 372, 373], "FOR": 366, "For": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 118, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 199, 207, 209, 213, 216, 223, 225, 227, 229, 231, 241, 246, 251, 290, 295, 308, 322, 323, 324, 325, 326, 327, 328, 330, 331, 337, 347, 350, 352, 358, 359, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "If": [23, 35, 46, 86, 113, 116, 117, 137, 138, 141, 162, 163, 166, 168, 173, 177, 178, 194, 199, 207, 209, 213, 225, 227, 229, 231, 233, 235, 249, 254, 262, 263, 269, 271, 279, 280, 281, 283, 285, 286, 289, 290, 308, 313, 331, 333, 351, 352, 355, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 377, 378], "In": [23, 27, 34, 35, 42, 149, 168, 192, 291, 323, 324, 325, 327, 328, 330, 344, 347, 350, 351, 352, 355, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "It": [18, 149, 192, 208, 227, 285, 324, 328, 330, 331, 337, 345, 347, 350, 351, 352, 354, 355, 356, 358, 361, 367, 368, 369, 371, 372, 373, 375], "Its": 344, "No": [339, 342, 363], "Not": [366, 368], "OF": [361, 366], "OR": [361, 366], "Of": [331, 374], "On": 344, "One": [102, 324, 327, 361], "Or": 369, "Such": [331, 368, 375], "That": [168, 249, 323, 331, 336, 350, 364, 373, 375], "The": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 51, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 86, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 118, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 172, 173, 183, 184, 186, 188, 192, 194, 197, 207, 209, 213, 216, 223, 225, 227, 229, 231, 233, 234, 235, 237, 238, 241, 243, 246, 248, 249, 250, 252, 254, 255, 259, 260, 262, 263, 264, 269, 270, 271, 273, 283, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 304, 305, 306, 308, 310, 311, 313, 323, 324, 325, 326, 327, 328, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 350, 351, 352, 356, 358, 359, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 379], "Their": 331, "There": [56, 194, 235, 302, 361, 364, 373], "These": [252, 321, 323, 325, 326, 327, 328, 329, 332, 335, 341, 346, 348, 350, 353, 357, 364, 368, 369, 371, 373], "To": [323, 324, 331, 354, 358, 359, 361, 362, 364, 367, 369, 371, 375], "With": [285, 358, 359, 361, 368, 371, 374], "_": [116, 117, 132, 170, 175, 181, 308, 343, 359], "________________________________________________________________________________": [339, 343], "_______________________________________smiles_to_mordred_featur": [339, 343], "__excepthook__": 362, "__init__": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 172, 173, 207, 209, 213, 215, 216, 223, 225, 227, 229, 231, 241, 246, 258, 259, 294, 295, 342, 343, 373, 374], "__new__": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 102, 103, 105, 294], "__str__": 363, "__version__": 363, "_botorch_acqf": [331, 336, 337, 338, 339, 340, 347, 354], "_c": 263, "_create_hidden_lay": 343, "_create_linear_block": 343, "_cumbest": 194, "_default_my_attribut": 364, "_fit": [238, 342, 343], "_iterbest": 194, "_measur": 194, "_measurements_targets_comp": 347, "_model": [331, 336, 337, 338, 339, 340, 347, 354], "_n_last_measur": 137, "_nbase": [278, 280, 281], "_nestedsequ": [86, 248, 249, 250, 305], "_no_tl": 358, "_posterior": [238, 342, 343], "_smiles_to_mordred_featur": [339, 343], "_step": 137, "_supportsarrai": [86, 248, 249, 250, 305], "_t": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 184, 185, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 264, 265, 295], "_target": 363, "_tparamet": 113, "_u": 264, "_validate_my_attribut": 364, "ab": [339, 340], "abbrevi": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 261, 266, 363, 379], "abc": [16, 26, 27, 28, 30, 62, 80, 94, 95, 120, 135, 144, 147, 152, 157, 163, 207, 241, 270], "abl": [234, 368, 371, 374], "about": [18, 23, 95, 111, 207, 209, 213, 225, 227, 229, 231, 241, 255, 324, 325, 327, 349, 350, 351, 352, 361, 363, 364, 371, 373], "abov": [235, 250, 270, 289, 331, 338, 340, 361, 364, 366, 367, 368, 369, 371, 374, 378], "absenc": 370, "absolut": [108, 286, 361], "abstract": [16, 26, 27, 28, 30, 62, 80, 93, 94, 95, 120, 135, 144, 147, 152, 163, 207, 241, 262, 263, 270, 368, 378], "acceler": [361, 363, 365, 378], "accept": [23, 137, 194, 213, 273, 290, 350, 366, 370, 371, 375, 377], "access": [166, 173, 324, 325, 327, 336, 359, 363, 368, 374], "accord": [133, 276, 313, 368, 369, 372], "accordingli": [367, 374], "accur": 367, "acet": [324, 325, 327, 330, 331], "achiev": [173, 361, 364, 367, 368], "acq_funct": 331, "acqf": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21], "acqf1": 374, "acqf2": 374, "acquisit": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 53, 147, 149, 363, 372, 374], "acquisition_funct": [147, 149, 323, 331, 336, 337, 338, 339, 340, 347, 354, 355, 356, 363], "acquisition_function_cl": [147, 149, 331, 336, 337, 338, 339, 340, 347, 354, 363], "acquisitionfunct": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 20, 21, 147, 149, 374], "across": [210, 358, 372], "act": [366, 368, 378], "action": [363, 379], "activ": [98, 139, 343, 361, 363, 364, 368, 369, 370], "active_dim": [62, 65, 67, 69, 70, 71], "active_valu": [98, 358, 359, 378], "actual": [137, 168, 192, 326, 339, 350, 351, 363, 373, 375], "ad": [23, 173, 233, 235, 254, 313, 364, 369, 370, 371, 377, 379], "adam": 343, "adapt": [223, 271, 289], "add": [23, 186, 285, 331, 342, 343, 344, 345, 347, 349, 350, 351, 352, 358, 361, 366, 367, 368, 373], "add_fake_result": [330, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 363], "add_measur": [23, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 361, 363, 367, 369], "addendum": 366, "addit": [23, 80, 85, 90, 137, 149, 173, 186, 197, 233, 235, 286, 323, 324, 325, 326, 327, 328, 331, 349, 350, 351, 352, 359, 361, 363, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378], "addition": 361, "additivekernel": 363, "adher": [363, 364], "adjust": [323, 325, 331, 351, 363], "adopt": 331, "adrian": [361, 365], "advanc": [363, 374], "advantag": 364, "advic": 364, "advis": [366, 373, 375], "affect": [38, 354, 368], "affected_paramet": [38, 336, 337, 338, 339, 340, 368], "affili": [361, 369], "afford": 367, "aforement": 168, "after": [139, 173, 330, 361, 367, 374], "afterward": 374, "again": [368, 372], "against": [254, 260, 366], "agraw": 365, "agre": [326, 361, 366], "agreement": 366, "ai": [60, 118, 302], "aim": 367, "al": [325, 361, 371], "aldrich": 365, "alex": 365, "alexand": [361, 365], "algorithm": [142, 149, 285, 312, 313, 347, 361, 372], "alia": [110, 154, 155, 156, 202, 203, 204], "alias": [47, 363], "align": [166, 373], "all": [15, 16, 25, 26, 30, 38, 40, 61, 62, 79, 80, 85, 90, 92, 95, 98, 100, 104, 111, 119, 120, 129, 134, 135, 137, 143, 144, 146, 149, 151, 152, 162, 163, 168, 173, 174, 206, 207, 240, 241, 285, 292, 324, 325, 327, 331, 333, 334, 336, 337, 343, 347, 349, 351, 358, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "allclos": [333, 334], "alleg": 366, "allow": [40, 108, 113, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 197, 255, 269, 290, 324, 325, 327, 331, 358, 359, 361, 363, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377], "allow_recommending_already_measur": [135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 331, 336, 337, 338, 339, 340, 347, 354, 355, 356, 363, 372], "allow_repeated_recommend": [135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 331, 336, 337, 338, 339, 340, 347, 354, 355, 356, 363, 372], "almost": 325, "alon": [363, 366], "along": [306, 366, 371], "alongsid": 366, "alreadi": [23, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 233, 235, 331, 352, 361, 372, 373], "also": [42, 113, 255, 323, 324, 333, 334, 339, 344, 345, 347, 349, 351, 352, 354, 358, 359, 361, 363, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378], "alter": [363, 367], "altern": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 235, 306, 361, 363, 379], "although": [352, 355, 373, 375], "alwai": [30, 181, 182, 344, 361, 367, 368, 375], "ambigu": [108, 373], "amend": 368, "amount": [350, 358, 359, 371], "an": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 53, 58, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 81, 83, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 184, 186, 188, 192, 194, 207, 209, 213, 216, 225, 227, 229, 231, 233, 235, 241, 246, 260, 265, 269, 277, 289, 290, 294, 295, 296, 305, 308, 313, 324, 327, 329, 331, 338, 339, 340, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "analog": [168, 285, 373, 374], "analogi": [133, 372], "analyt": [3, 4, 6, 7, 53, 321, 350, 360, 375, 378], "analyz": 364, "ani": [46, 86, 93, 94, 95, 97, 98, 100, 111, 113, 115, 116, 117, 168, 173, 181, 182, 186, 190, 191, 197, 225, 229, 231, 248, 249, 250, 255, 260, 267, 269, 270, 290, 295, 297, 305, 318, 319, 320, 358, 359, 361, 362, 363, 364, 366, 367, 369, 371, 374, 375, 378], "annot": 366, "anonym": [361, 369], "anoth": [38, 296, 325, 337, 338, 342, 343, 344, 345, 352, 364, 368], "ansatz": 363, "answer": 367, "anyth": 271, "anywher": 333, "apach": [361, 366], "apart": [364, 367], "api": [27, 34, 35, 273, 361, 362, 374], "appar": 374, "appear": [260, 362, 363, 366, 374], "append": [333, 334, 349, 350, 351, 352, 359], "appendix": 366, "appli": [42, 149, 168, 192, 194, 277, 286, 331, 332, 335, 336, 338, 339, 340, 358, 359, 362, 363, 366, 368, 370, 372, 373, 374, 375, 377], "applic": [361, 364, 366, 371, 372, 375], "approach": [173, 361, 367, 372, 374], "appropri": [77, 173, 364, 366], "ar": [10, 11, 23, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 54, 55, 56, 85, 86, 98, 111, 113, 117, 137, 138, 139, 166, 168, 173, 194, 197, 199, 207, 209, 213, 225, 227, 229, 231, 234, 250, 252, 254, 255, 260, 262, 263, 264, 270, 271, 285, 287, 290, 308, 313, 323, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 345, 347, 349, 351, 354, 355, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "arang": [333, 371], "arbitrari": [138, 168, 194, 297, 350, 363, 368, 371, 372, 375], "arbitrarili": [370, 374], "architectur": [210, 238, 341, 360, 363, 376, 378], "ard_num_dim": [62, 65, 67, 69, 70, 71], "arg": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 68, 73, 74, 75, 120, 122, 123, 124, 125, 126, 127, 130, 202, 203, 204, 215, 260, 294, 364], "argument": [60, 113, 118, 166, 173, 331, 345, 347, 363, 368, 373, 374, 375, 378], "aris": [41, 366, 368, 374], "arithmet": [88, 370], "arizona": 365, "around": [156, 197, 199, 210, 347, 363, 372, 374], "arr": [248, 249, 250, 306], "arrai": [86, 166, 248, 249, 250, 258, 301, 305, 306, 313, 363, 372, 376], "arriv": 361, "aryl": [324, 325, 327, 330, 361, 371], "ascend": 347, "ask": [361, 364, 367], "aspect": [329, 333, 334, 349, 352, 369], "assembl": 374, "assembli": 379, "assert": [46, 336, 337, 338, 339, 340, 344, 345, 354, 363, 366, 367, 368, 374], "assess": 375, "assign": [285, 371], "associ": [366, 367, 369, 370], "assum": [18, 194, 208, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 361, 366, 368, 371, 374, 377], "assumpt": 375, "assur": 368, "atol": [333, 334], "attach": [18, 366], "attempt": [58, 208, 308, 362, 368, 372], "attent": 139, "attr": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 207, 209, 213, 216, 223, 225, 227, 229, 231, 241, 246, 267, 295, 363], "attribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 105, 107, 108, 109, 111, 113, 115, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 172, 173, 180, 184, 186, 207, 209, 213, 216, 220, 223, 225, 227, 229, 231, 233, 235, 238, 241, 243, 244, 246, 260, 295, 300, 308, 314, 317, 318, 319, 320, 363, 364, 366, 372, 374, 376, 377], "audit": [361, 363, 364], "augment": [233, 235, 367], "author": 366, "authorship": 366, "auto": [10, 11, 365], "auto_tutori": 302, "autodoc": 363, "automat": [23, 83, 213, 233, 290, 351, 363, 364, 370, 373, 379], "avail": [2, 88, 100, 102, 103, 105, 111, 137, 138, 173, 194, 220, 224, 228, 230, 243, 244, 255, 313, 326, 327, 330, 333, 334, 347, 349, 351, 352, 361, 363, 364, 366, 367, 371, 372, 373, 374, 375, 378, 379], "available_acq_funct": 331, "averag": [227, 359, 371, 375], "avoid": [168, 267, 306, 363, 364, 367, 371, 373], "awai": 377, "awar": [358, 359, 374], "ax": [308, 322, 325, 358, 359], "axi": [166, 194, 306, 339, 340, 342, 358, 359, 373], "azur": 363, "b": [41, 127, 223, 264, 289, 325, 337, 342, 343, 345, 355, 356, 361, 364, 366, 367, 371, 374], "back": [0, 162, 163, 354, 364], "backend": 255, "backport": 362, "backtest": [192, 193, 198, 324, 325, 327, 331, 357, 360, 361, 363, 372, 375], "backtick": 364, "backward": [47, 76, 82, 131, 201, 202, 203, 204, 343, 363], "bad": [347, 367, 369, 377], "bad_interv": 285, "badg": 363, "baird": 365, "balanc": [85, 361], "banana": 364, "banner": 363, "bar": [342, 343, 344, 345, 354, 355, 356, 361, 363], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 136, 137, 138, 139, 141, 144, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 168, 169, 172, 173, 184, 186, 188, 207, 208, 209, 210, 213, 215, 216, 220, 223, 225, 227, 229, 231, 233, 235, 237, 241, 243, 244, 246, 258, 259, 261, 262, 263, 295, 308, 330, 331, 342, 344, 361, 363, 366, 369, 371, 372, 374, 376], "base_kernel": [73, 74, 75], "base_nam": [308, 322, 325, 358, 359], "baseestim": 342, "baselin": [325, 358, 361, 371], "bashrc": 369, "basi": [69, 361, 366], "basic": [64, 65, 66, 67, 68, 69, 70, 71, 122, 123, 124, 125, 126, 127, 194, 258, 259, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 357, 360, 363, 364, 370, 371, 375, 379], "basic_transfer_learn": 359, "batch": [23, 130, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 196, 207, 209, 210, 213, 225, 227, 229, 231, 234, 331, 336, 337, 338, 339, 340, 347, 349, 350, 351, 352, 354, 358, 359, 363, 372, 375], "batch_quant": [23, 363], "batch_shap": [62, 65, 67, 69, 70, 71], "batch_siz": [23, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 194, 197, 199, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 358, 359, 361, 363, 367, 369, 375], "batchifi": 210, "batchify_posterior": [210, 342, 343], "bayb": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 172, 173, 188, 207, 209, 213, 215, 216, 220, 223, 225, 227, 229, 231, 241, 243, 244, 246, 258, 259, 295, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 339, 340, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "baybe_cach": 369, "baybe_cache_dir": [363, 369], "baybe_debug_fake_hosthash": 363, "baybe_debug_fake_userhash": 363, "baybe_dev": [355, 356], "baybe_numpy_use_single_precis": [303, 363, 369], "baybe_telemetry_en": [361, 369], "baybe_telemetry_endpoint": [363, 369], "baybe_telemetry_host": 363, "baybe_telemetry_hostnam": [363, 369], "baybe_telemetry_usernam": [363, 369], "baybe_telemetry_vpn_check": [363, 369], "baybe_telemetry_vpn_check_timeout": [363, 369], "baybe_torch_use_single_precis": [316, 363, 369], "bayesian": [0, 141, 147, 149, 192, 194, 197, 199, 208, 223, 225, 363, 367, 379], "bayesianlinearmodel": 345, "bayesianlinearsurrog": [331, 376], "bayesianrecommend": [141, 149, 208, 363, 372], "bayesianridg": 344, "becaus": [56, 108, 168, 173, 199, 270, 359, 364, 367, 368, 369, 370, 371, 374], "becom": [135, 137, 138, 139, 168, 234, 367, 368, 374, 377], "been": [18, 53, 137, 173, 290, 324, 325, 331, 355, 356, 361, 362, 363, 366, 372, 375], "befor": [139, 194, 233, 327, 331, 337, 361, 364, 369, 371, 373, 375], "begin": [137, 336, 338, 354, 372], "behalf": 366, "behav": [354, 374], "behavior": [149, 326, 355, 356, 363, 369, 370, 372, 373, 375, 378], "behind": [370, 374, 377], "being": [75, 285, 308, 362, 368, 369, 371, 373], "bell": [244, 248, 347, 377], "belong": [173, 374], "below": [235, 250, 338, 364, 366, 367, 368, 370, 374, 377], "benchmark": 361, "benefici": 366, "benefit": 368, "benzo": 378, "besid": [361, 370, 377], "best": [10, 11, 194, 197, 327, 361, 369, 372, 375], "bet": 367, "beta": [7, 14, 331, 363], "better": [285, 325, 363, 367, 368, 371], "between": [38, 108, 138, 166, 173, 326, 347, 352, 358, 359, 361, 363, 367, 368, 369, 371, 372, 373, 374, 377], "beyond": 361, "bias": 371, "binar": 363, "binari": [354, 363, 374], "bind": 366, "bit": [278, 371], "black": [192, 375], "blank": 364, "block": [343, 361, 362, 363, 369, 374], "bool": [10, 11, 18, 23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 86, 93, 94, 95, 97, 98, 100, 107, 108, 111, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 207, 209, 210, 213, 225, 227, 229, 231, 248, 249, 250, 253, 254, 262, 263, 266, 270, 271, 276, 280, 281, 290, 295, 305], "boolean": [26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 210, 331, 369], "boost": [229, 359], "both": [113, 173, 199, 250, 337, 344, 347, 358, 359, 361, 368, 371, 373, 374, 377], "botorch": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 27, 34, 35, 149, 207, 209, 213, 225, 227, 229, 231, 272, 273, 321, 323, 333, 334, 348, 352, 358, 359, 360, 363, 369, 372], "botorch_acqf": 18, "botorch_analyt": 322, "botorch_function_wrapp": [322, 333, 334, 349, 351, 352, 358, 359], "botorch_wrapp": [322, 333, 334, 349, 351, 352, 358, 359], "bottom": 367, "bound": [7, 14, 107, 113, 127, 166, 168, 173, 246, 247, 263, 295, 296, 322, 323, 326, 328, 331, 333, 334, 347, 349, 350, 351, 352, 358, 359, 363, 371, 374, 377, 379], "boundari": [173, 248, 249, 347], "boundary_onli": 173, "bounded": 363, "bounds_transform_func": 363, "box": [127, 192, 375], "brain": [375, 378], "branch": [361, 364], "break": [208, 374], "brettpho": [324, 325, 327, 330, 331], "briefli": [375, 378], "bring": [361, 363], "broad": 374, "brute": [149, 372], "bu": [324, 325, 327, 330, 331], "budget": 367, "bug": [224, 228, 230, 363, 364], "build": [166, 173, 208, 362, 363, 364, 368, 374, 379], "built": [173, 344, 361, 364, 367, 372], "builtin": 259, "bump": 363, "button": 363, "butyl": [324, 325, 327, 330, 331], "butylphenylphosphin": [324, 325, 327, 330, 331], "butyornitril": [324, 325, 327, 330, 331], "bypass": 113, "byte": [86, 172, 209, 248, 249, 250, 299, 305, 363], "c": [41, 264, 324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 342, 343, 345, 355, 356, 361, 366, 367, 371, 374], "c1": [324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 371], "c1c2": [324, 325, 327, 330, 331], "c1ccccc1": [324, 325, 327, 336, 338], "c1ccoc1": 368, "c2": [324, 325, 327, 330, 331, 336, 338, 339, 340], "c2ccccc2": [324, 325, 327], "c2oc": [324, 325, 327, 330, 331], "c2p": [324, 325, 327, 330, 331], "c3": [324, 325, 327, 330, 331, 336, 338, 339], "c3c": [324, 325, 327], "c3ccccc3": [324, 325, 327, 330, 331], "c4": [324, 325, 327, 336, 338], "c4ccccc4": [324, 325, 327, 330, 331], "c5": [336, 338], "c6": [336, 338], "c_i": [34, 35, 368], "cach": [254, 363, 374, 379], "cached_recommend": 254, "calcul": [207, 209, 213, 225, 227, 229, 231, 254, 306, 323, 326, 328, 333, 339, 349, 350, 351, 352, 358, 369, 371, 373], "call": [27, 34, 35, 254, 255, 323, 324, 325, 326, 327, 339, 343, 345, 355, 356, 361, 362, 363, 367, 368, 369, 371, 374, 375, 378], "callabl": [37, 113, 184, 192, 194, 197, 199, 210, 234, 237, 238, 259, 260, 265, 379], "callable_": 260, "callback": 375, "campaign": [194, 196, 197, 199, 285, 286, 329, 330, 338, 342, 343, 356, 358, 359, 360, 361, 363, 368, 370, 371, 373, 374, 375, 376, 378, 379], "campaign1": 375, "campaign2": 375, "campaign_json": 367, "campaign_oh": 325, "campaign_rand": [324, 325, 327], "campaign_recr": 354, "can": [18, 30, 41, 80, 85, 90, 94, 100, 108, 111, 141, 142, 149, 157, 166, 168, 173, 192, 194, 208, 235, 253, 255, 270, 285, 286, 290, 302, 322, 323, 324, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 343, 344, 345, 347, 349, 350, 351, 352, 355, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "canada": 365, "candid": [10, 11, 157, 159, 166, 173, 207, 209, 210, 213, 225, 227, 229, 231, 342, 343, 359, 367, 372, 373], "cannot": [59, 208, 209, 210, 235, 271, 308, 363, 366, 368, 369, 371, 372, 374, 376], "canon": [275, 374], "capabl": [321, 346, 353, 357, 359, 363, 367, 378], "captur": 371, "care": [364, 368, 370], "carefulli": 369, "carlo": [8, 9, 10, 11, 12, 13, 14, 53, 197, 322, 323, 325, 326, 327, 328, 343, 358, 359, 375], "carri": 366, "cartesian": [168, 173, 174, 361, 373], "case": [199, 235, 285, 291, 323, 351, 352, 355, 361, 364, 367, 368, 369, 371, 374, 375, 377], "cast": [27, 34, 35, 369], "cat": 343, "cat_1": 347, "cat_1_22": 347, "cat_1_33": 347, "cat_2": 347, "catch_constant_target": 210, "categor": [23, 97, 98, 102, 173, 178, 290, 361, 363, 371, 373, 377], "categori": [325, 361, 374, 377], "categorial_1": 367, "categorical_1": [347, 367], "categorical_2": [347, 367], "categorical_paramet": 374, "categorical_parameter_json": 374, "categorical_parameter_reconstruct": 374, "categoricalencod": [97, 98, 336, 337, 338, 340, 347, 354], "categoricalparamet": [98, 173, 325, 336, 337, 338, 340, 342, 343, 345, 347, 354, 355, 356, 361, 373, 374, 379], "cattr": [183, 184, 186, 356, 362, 363, 364], "cauchi": 123, "caus": [108, 259, 363, 366], "cc": [324, 325, 327, 330, 331, 336, 338, 339, 340, 371], "cc1": [324, 325, 327, 330, 331, 371], "ccc": [336, 338, 339, 342, 343, 345, 361], "cccc": [324, 325, 327, 330, 331, 336, 338], "ccccc": [336, 338, 355, 356], "cccccc": [336, 338], "cccccccco": [368, 371], "ccccoc": [324, 325, 327, 330, 331], "ccoccoccn": [355, 356], "cdot": [368, 370], "cell": [344, 371, 375, 378], "cell_lin": 378, "center": [248, 250, 295, 347, 367], "central": [363, 367], "certain": [38, 139, 184, 186, 192, 255, 285, 337, 361, 364, 368, 372, 373, 374], "cesium": [324, 325, 327, 330, 331], "chain": [26, 28, 259, 368], "challeng": [364, 374], "chanc": 362, "chang": [38, 137, 285, 331, 351, 361, 362, 364, 366, 367, 369, 373, 378], "charact": 366, "characterist": 259, "charg": 366, "check": [23, 93, 94, 95, 97, 98, 100, 107, 108, 111, 254, 266, 268, 269, 270, 271, 290, 295, 304, 351, 352, 354, 361, 363, 364, 369, 373, 374], "checkout": 364, "chem": [361, 363, 371], "chemic": [105, 277, 279, 280, 281, 325, 330, 363, 365, 368, 371, 378], "cheminformat": [111, 361, 363], "chemistri": [100, 339, 343], "child": [154, 155, 156, 157], "chocol": 364, "choic": [342, 352, 363, 368, 370, 371, 372, 373, 374, 375, 377], "choos": [133, 322, 347, 349, 351, 352, 361, 366, 367, 372, 375, 376, 377], "chose": [351, 374], "chosen": [141, 194, 199, 310, 311, 313, 331, 339, 363, 368, 371, 373], "ci": [334, 358, 359, 363, 364], "circumv": [362, 374], "cl": [83, 181, 185, 233, 235, 262, 263, 266, 270, 297], "claim": 366, "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 184, 186, 187, 188, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 257, 258, 259, 261, 262, 263, 266, 270, 272, 278, 293, 295, 331, 342, 343, 344, 355, 356, 363, 367, 368, 370, 372, 373, 374, 376], "classic": 370, "classifi": 371, "classmethod": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 259, 295, 363], "classvalidationerror": [356, 362], "classvar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 207, 209, 213, 225, 227, 229, 231], "clean": [287, 288, 289, 363, 364], "clear": 302, "clone": 364, "close": [194, 199, 243, 358, 359, 375], "closer": [304, 371], "closest": [254, 290, 305], "closest_el": 363, "closur": [192, 375], "cluster": [154, 155, 156, 157, 331, 363, 365, 379], "clustering_x": 363, "clustermixin": 157, "cn": [324, 325, 327, 330, 331], "co1": [324, 325, 327], "co2": [324, 325, 327], "co3": [324, 325, 327], "coars": [342, 343, 345, 354, 355, 356, 361], "coc": [342, 343, 345, 355, 356, 361], "cococ": [355, 356], "code": [208, 224, 228, 230, 325, 326, 345, 351, 355, 356, 361, 362, 363, 366, 368, 369, 371], "coeffici": [27, 34, 35, 333, 334, 368], "collect": [23, 46, 63, 73, 74, 113, 121, 137, 139, 177, 178, 189, 256, 257, 260, 312, 313, 328, 331, 358, 359, 361, 363, 367, 369], "column": [80, 85, 86, 90, 113, 166, 168, 173, 194, 197, 199, 280, 281, 287, 288, 289, 291, 325, 330, 336, 337, 338, 339, 340, 347, 349, 350, 351, 352, 354, 358, 359, 363, 367, 373, 374, 375], "com": [223, 224, 228, 230, 267, 289, 361, 363], "comb": 339, "combin": [28, 37, 38, 39, 40, 41, 42, 43, 44, 113, 168, 173, 174, 259, 277, 324, 325, 327, 336, 338, 339, 347, 361, 366, 368, 370, 372, 373, 375, 378], "combine_func": 77, "come": [361, 367, 374], "comment": 363, "commerci": 366, "commit": [361, 363, 364], "common": [121, 323, 344, 363, 364, 366, 367, 368, 371, 374], "commonli": 370, "commun": [366, 370, 371], "comp_df": [94, 97, 98, 100, 108, 111, 363], "comp_rep": [173, 344, 363, 373], "comp_rep_byt": 172, "comp_rep_human_read": 172, "comp_rep_shap": 172, "compar": [113, 326, 358, 361, 363, 364, 371, 377], "comparison": [358, 359, 372, 374], "compat": [47, 76, 82, 113, 131, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 169, 201, 202, 203, 204, 209, 338, 363, 372], "compil": 366, "complaint": 364, "complet": [368, 370, 374], "complex": [86, 248, 249, 250, 305, 354, 358, 359, 364, 368], "compli": 366, "complianc": 361, "compon": [364, 367, 368, 369, 374], "compos": [72, 374], "composit": [73, 74, 75], "compound": 277, "comprehens": [361, 376], "compress": 374, "compris": 343, "comput": [18, 57, 80, 85, 90, 94, 97, 98, 100, 108, 111, 168, 172, 173, 235, 241, 246, 278, 280, 281, 306, 343, 347, 363, 366, 367, 369, 373, 374], "computation": 149, "concat": [358, 359], "concaten": 326, "concentr": [122, 324, 325, 327, 330, 331, 336, 368], "concept": [370, 371, 374], "concis": 363, "concret": [363, 374], "conda": 363, "condit": [26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 285, 325, 333, 337, 338, 339, 340, 361, 363, 366, 378, 379], "conduct": [23, 197, 207, 209, 213, 225, 227, 229, 231, 322, 323, 324, 325, 326, 327, 328, 361, 364, 367, 378], "confid": [7, 14, 331], "config": [48, 344, 345, 353, 360, 363, 379], "config_json": 23, "configur": [23, 55, 56, 168, 173, 192, 194, 199, 219, 285, 308, 329, 330, 343, 348, 352, 356, 361, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 377, 379], "conflict": [361, 364, 370], "confront": 361, "connect": [42, 285, 363, 369, 377], "consequ": [138, 327, 368, 372, 373, 375], "consequenti": 366, "consid": [7, 14, 23, 31, 85, 98, 137, 173, 197, 254, 285, 290, 347, 358, 359, 361, 363, 364, 368, 370, 371, 374], "consider": 168, "consist": [133, 172, 364, 366], "consol": 362, "consolid": 372, "consortium": 365, "conspicu": 366, "constant": [210, 227, 235, 249, 347, 363, 364, 371, 373], "constant_target_catch": [210, 342, 343], "constitut": 366, "constrain": [363, 368, 377], "constraint": [27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 95, 166, 168, 173, 258, 342, 343, 344, 345, 354, 355, 356, 360, 361, 363, 371, 379], "constraint_1": 338, "constraint_2": 338, "constraint_3": 338, "constraints_lin_eq": 166, "constraints_lin_ineq": 166, "constru": 366, "construct": [23, 166, 168, 173, 209, 237, 358, 359, 361, 363, 374, 379], "constructor": [154, 155, 156, 157, 168, 185, 225, 229, 231, 355, 356, 363, 367, 370, 379], "consult": 361, "consum": 137, "cont_ind": [326, 352], "cont_indic": [326, 349, 351, 352], "cont_paramet": [326, 352], "cont_recommend": [141, 352], "contact": [361, 365], "contain": [23, 30, 31, 32, 46, 51, 52, 80, 85, 86, 90, 113, 116, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 174, 177, 192, 194, 197, 207, 209, 213, 225, 227, 229, 231, 233, 235, 241, 246, 248, 249, 250, 278, 280, 281, 285, 286, 295, 306, 308, 313, 325, 326, 327, 352, 358, 359, 363, 364, 366, 367, 368, 372, 373, 374, 375], "contains_mordr": 168, "contains_rdkit": 168, "content": [34, 35, 113, 137, 168, 363, 366, 374], "context": [135, 137, 138, 139, 192, 311, 358, 359, 363, 367, 371, 374, 375, 378], "contextu": 378, "continu": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 52, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 149, 166, 168, 169, 173, 174, 199, 207, 209, 213, 225, 227, 229, 231, 326, 333, 348, 352, 360, 361, 363, 367, 372, 374, 379], "continuous_subspac": 373, "continuousconstraint": [34, 35, 368, 369], "continuouslinearequalityconstraint": [166, 333, 334, 379], "continuouslinearinequalityconstraint": [166, 334, 379], "continuousparamet": [107, 166, 363], "contract": 366, "contrast": [173, 270], "contribut": [361, 363, 366], "contributor": [361, 366], "contributori": 366, "control": [113, 149, 166, 173, 323, 326, 347, 351, 361, 363, 366, 369, 370, 371, 372, 377], "convei": 374, "conveni": [363, 373, 374], "convent": [168, 364], "convers": [138, 344, 363, 366, 379], "convert": [20, 81, 180, 267, 271, 277, 279, 283, 291, 292, 296, 299, 302, 343, 345, 355, 356, 363, 367, 369, 374], "convert_sklearn": 344, "convert_sklearn_bayesian_ridg": 344, "cooki": 364, "copi": [361, 363, 366], "copyright": [361, 366], "core": [168, 169, 173, 197, 199, 213, 220, 331, 363, 377], "coretest": 363, "corpu": 371, "correct": [238, 342, 343, 361, 363, 364, 374], "correctli": [352, 363], "correl": [100, 111, 289, 371], "correspond": [18, 141, 166, 168, 173, 184, 192, 194, 248, 254, 269, 271, 277, 279, 285, 291, 313, 330, 331, 352, 355, 356, 358, 359, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "corrupt": 286, "cost": 325, "costli": [168, 170, 175, 367], "could": [108, 283, 331, 359, 363, 368, 371, 375, 377], "count": [255, 368], "counterclaim": 366, "counterpart": 373, "cours": [358, 359, 364, 374], "cov": [363, 364], "covari": [207, 209, 213, 225, 227, 229, 231], "cover": [270, 285], "coverag": [363, 364], "cp": [324, 325, 327], "crash": 363, "creat": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 51, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 174, 188, 207, 209, 213, 216, 221, 225, 227, 229, 231, 241, 246, 295, 308, 313, 326, 330, 342, 343, 352, 353, 360, 361, 362, 363, 364, 368, 369, 374, 375, 377, 379], "create_example_plot": [322, 325, 358, 359], "create_from_config": [344, 345], "creation": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 113, 170, 173, 175, 326, 337, 339, 340, 344, 345, 350, 373, 374, 379], "criterion": 343, "critic": 363, "cross": [358, 366], "crucial": 377, "cube": [162, 368], "cultur": 371, "current": [199, 208, 224, 228, 230, 253, 302, 367, 368, 369, 371, 375, 377, 378], "curv": [248, 347, 368, 377], "custom": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 49, 93, 94, 95, 97, 98, 100, 103, 107, 108, 111, 113, 209, 238, 241, 246, 291, 321, 331, 335, 348, 352, 360, 361, 363, 368, 371, 372, 379], "custom_analyt": [326, 328], "custom_conversion_funct": 344, "custom_filt": 368, "custom_funct": 336, "customarchitecturesurrog": [342, 343], "customari": 366, "customconstraint": 336, "customdiscreteparamet": [363, 379], "customencod": 100, "customonnxsurrog": [331, 344, 363], "customparamet": 371, "cv": 342, "cycl": [137, 361], "cyclic": 137, "d": [18, 41, 86, 207, 209, 213, 225, 227, 229, 231, 264, 306, 342, 343, 345, 355, 356, 358, 359, 361, 366, 378], "d102": 364, "d401": 336, "damag": 366, "daniel": 365, "darmstadt": [361, 365, 369], "dashboard": 363, "data": [23, 28, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 80, 85, 90, 94, 97, 98, 100, 108, 111, 139, 161, 162, 163, 166, 168, 173, 194, 197, 199, 207, 209, 213, 225, 227, 229, 231, 241, 246, 255, 258, 277, 278, 285, 286, 290, 301, 302, 315, 321, 322, 323, 326, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 345, 347, 349, 351, 354, 355, 356, 358, 359, 360, 361, 363, 367, 368, 369, 371, 372, 374, 375, 378, 379], "data_typ": 344, "databas": [23, 361, 374], "datafram": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 80, 85, 90, 94, 97, 98, 100, 108, 111, 113, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 172, 173, 174, 190, 191, 194, 197, 199, 241, 246, 254, 278, 280, 281, 324, 330, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 358, 359, 363, 367, 368, 371, 379], "datapoint": 363, "dataset": [137, 192, 375], "datatyp": 363, "date": 366, "de": [183, 353, 361, 362, 363, 364, 367, 368, 372, 379], "deactiv": [361, 363], "deal": [327, 371], "debug": 363, "decid": [108, 290, 352], "declar": [38, 42, 46, 157, 337, 364, 368], "decod": 344, "decor": [75, 210, 259, 363], "decorrel": [100, 111, 115, 355, 356, 371], "decreas": [249, 347, 374], "deduc": [333, 334, 349, 351], "dedupl": 363, "deepcopi": 363, "def": [323, 326, 328, 336, 342, 343, 350, 358, 364, 368], "default": [32, 85, 98, 100, 111, 113, 141, 154, 155, 156, 157, 162, 163, 166, 173, 183, 220, 223, 324, 327, 331, 345, 347, 352, 361, 364, 367, 369, 370, 371, 379], "default_iter": 138, "default_model": 209, "defaultkernelfactori": [331, 336, 337, 338, 339, 340, 347, 354], "defaultscal": 163, "defend": 366, "defin": [18, 23, 27, 31, 34, 35, 37, 103, 137, 173, 192, 194, 213, 215, 216, 238, 286, 289, 308, 324, 325, 327, 330, 331, 336, 337, 338, 340, 342, 343, 344, 345, 355, 364, 366, 367, 371, 372, 373, 374, 375, 377], "definit": [166, 173, 270, 361, 363, 366, 370], "degre": 374, "degree_c": [342, 343, 344, 345, 354], "deliber": 366, "delici": 364, "deliveri": 371, "demand": 359, "demo": 363, "demonstr": [321, 324, 326, 329, 332, 335, 340, 341, 342, 343, 344, 346, 348, 353, 354, 357, 358, 359, 370, 373, 374, 378], "denot": [18, 207, 209, 213, 225, 227, 229, 231, 326, 339], "depend": [38, 42, 58, 77, 168, 173, 192, 241, 246, 249, 325, 331, 335, 339, 360, 363, 364, 368, 369, 373, 375, 377, 378], "dependenciesconstraint": 363, "deprec": [23, 50, 135, 137, 138, 139, 147, 149, 259, 325, 336, 338, 340, 355, 356], "deprecationwarn": [355, 356], "depth": 373, "deriv": [154, 155, 156, 157, 173, 270, 366, 368, 373], "descend": 249, "describ": [98, 154, 155, 156, 157, 331, 336, 347, 364, 366, 367, 368, 370, 371, 374, 375], "descript": 364, "descriptor": [105, 111, 278, 280, 281, 363, 371], "deseri": [181, 185, 190, 354, 362, 363, 367, 379], "deserialize_datafram": 374, "design": [0, 18, 194, 223, 342, 343, 344, 366, 370, 372, 374], "desir": [77, 85, 88, 328, 346, 347, 360, 361, 363, 367, 369, 370, 372, 374, 377], "desirabilityobject": [328, 347, 361, 363, 374, 379], "desktop": 363, "despit": 363, "detail": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 118, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 194, 197, 207, 209, 213, 216, 223, 225, 227, 229, 231, 241, 246, 251, 252, 273, 295, 322, 323, 324, 326, 327, 328, 331, 333, 334, 342, 343, 347, 349, 352, 361, 362, 363, 367, 368, 369, 371, 372, 373, 374, 375, 376], "detect": [258, 290, 364], "determin": [23, 83, 173, 270, 299, 304, 313, 324, 366, 369, 372], "detriment": 371, "dev": [361, 363, 364], "develop": [361, 363, 371], "deviat": [235, 344], "df": [113, 166, 168, 173, 191, 277, 287, 288, 289, 291, 292, 336, 361, 368, 373, 374], "di": [324, 325, 327, 330, 331], "dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 83, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 154, 155, 156, 157, 162, 163, 166, 168, 170, 173, 175, 184, 185, 186, 188, 197, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 252, 260, 264, 285, 295, 344, 358, 359, 363], "dict_bas": [324, 325, 327, 330, 331], "dict_ligand": [324, 325, 327, 330, 331], "dict_solv": [324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 368], "dictat": [358, 359], "dictionari": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 184, 186, 188, 197, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 260, 264, 285, 295, 323, 324, 325, 326, 327, 330, 371, 375], "diff": 364, "differ": [40, 85, 166, 168, 169, 173, 192, 194, 199, 254, 285, 286, 325, 326, 328, 336, 342, 347, 351, 352, 358, 359, 361, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378], "differenti": 375, "dim": [18, 322, 333, 334, 343, 344, 349, 351, 352, 358, 359], "dimens": [18, 207, 209, 213, 225, 227, 229, 231, 313, 322, 323, 326, 328, 333, 334, 344, 349, 350, 351, 358, 359, 363, 371, 373], "dimension": [86, 326, 350, 358, 359, 363], "dimethylisoxazol": 378, "direct": [324, 325, 327, 330, 361, 366, 371], "directli": [224, 228, 230, 270, 359, 361, 363, 368, 370, 374], "directori": [308, 352, 363], "disabl": [253, 355, 356, 363, 364, 367], "disadvantag": 374, "disappear": 363, "disc_ind": [326, 352], "disc_indic": [326, 349, 351, 352], "disc_paramet": [326, 352], "disc_recommend": [141, 352], "discard": 173, "disclaim": 366, "discourag": 367, "discret": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 52, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 169, 172, 173, 199, 322, 323, 326, 328, 330, 333, 340, 344, 348, 352, 359, 360, 361, 363, 367, 374, 375, 379], "discrete_param": [358, 359], "discrete_spac": [322, 333, 334, 349, 352], "discrete_subspac": 373, "discreteconstraint": [37, 38, 39, 40, 41, 42, 43, 44, 173, 368], "discretecustomconstraint": [336, 363, 379], "discretedependenciesconstraint": [42, 46, 337, 339, 379], "discreteexcludeconstraint": [338, 379], "discretelinkedparametersconstraint": 379, "discretenolabelduplicatesconstraint": [42, 339, 379], "discreteparamet": [97, 100, 108, 111, 173], "discretepermutationinvarianceconstraint": [339, 379], "discreteproductconstraint": [340, 379], "discretesumconstraint": [333, 339, 340, 379], "discuss": [347, 366, 368, 373, 375, 378], "disk": [363, 379], "dispatch": 76, "displai": [291, 323, 366], "distanc": [108, 254, 290, 313], "distinct": [367, 372], "distinguish": [34, 35, 363, 368, 371], "distribut": [118, 121, 210, 347, 352, 361, 363, 366], "distutil": 271, "div": 344, "divers": 376, "divis": 306, "dmac": [324, 325, 327, 330, 331], "dmf": 368, "do": [168, 173, 208, 326, 339, 342, 343, 344, 345, 352, 354, 355, 356, 358, 361, 366, 368, 369, 371, 372, 374, 378, 379], "do_baybe_work": 369, "doc": [60, 118, 207, 209, 213, 224, 225, 227, 228, 229, 230, 231, 259, 355, 356, 361, 363], "doc101": 364, "doc103": 364, "docstr": 363, "document": [224, 228, 230, 302, 344, 361, 363, 364, 365, 366, 367, 375], "doe": [22, 42, 192, 194, 197, 207, 208, 209, 213, 225, 227, 229, 231, 238, 277, 279, 285, 302, 327, 331, 344, 345, 350, 355, 356, 358, 359, 363, 366, 368, 370, 375, 376], "doi": [223, 289], "domain": [162, 163, 233, 361, 373], "done": [23, 327, 330, 336, 337, 338, 339, 340, 344, 345, 347, 351, 354, 363, 368, 369, 378], "dont_recommend": [336, 337, 338, 339, 340, 347, 354, 373], "doubl": [302, 343, 364, 369], "down": 374, "downsid": 138, "draft": 363, "drastic": 371, "draw": 70, "driven": 285, "drop": [280, 281, 287, 288, 289, 292, 363, 368], "dropna": [280, 281], "dropout": 343, "dtype": [86, 248, 249, 250, 278, 305], "due": [224, 228, 230, 255, 339, 359, 361, 363, 368, 369, 371, 372, 373, 374, 377], "duplic": [42, 117, 258, 264, 339, 363, 368], "dure": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 173, 192, 313, 328, 358, 359, 361, 363, 364, 365, 367, 368, 369, 373, 374, 375], "dynam": 374, "e": [18, 23, 38, 40, 41, 52, 100, 113, 139, 168, 173, 192, 241, 246, 255, 258, 262, 263, 278, 280, 281, 285, 290, 318, 324, 325, 327, 342, 343, 345, 361, 362, 363, 364, 368, 369, 371, 372, 373, 374, 375], "each": [23, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 113, 139, 141, 168, 194, 197, 199, 208, 278, 280, 281, 285, 308, 325, 326, 327, 331, 347, 352, 358, 359, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377], "eagerli": 363, "earli": 363, "earlier": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 362], "easi": [277, 364, 374], "easier": 364, "easiest": [361, 364], "easili": [364, 367, 371, 373, 374, 378], "ecosystem": 374, "edbo": [223, 289, 363], "edit": [361, 364], "editori": 366, "effect": [40, 199, 359, 368, 371, 372, 375, 378], "effici": [173, 363, 373], "ei": [3, 322, 323, 331], "either": [18, 169, 194, 199, 213, 235, 325, 326, 338, 347, 350, 352, 361, 366, 370, 372, 373, 375], "elabor": 366, "electron": [365, 366], "eleg": [358, 374], "element": [30, 31, 32, 37, 173, 199, 254, 258, 269, 290, 304, 305, 358, 359, 368], "elif": [349, 351, 352], "els": [270, 271, 276, 322, 323, 324, 325, 326, 327, 328, 333, 334, 336, 337, 339, 340, 349, 351, 352, 358, 359], "elsewher": 344, "emd": 365, "emdgroup": [251, 361], "emelin": 365, "emerg": 367, "emploi": [23, 372], "employe": [361, 369], "empow": 376, "empti": [166, 168, 173, 178, 277, 291, 326, 347, 352, 354, 363, 373], "empty_encod": [168, 173], "emptysearchspaceerror": 178, "emul": [362, 363], "en": [60, 118], "enabl": [234, 253, 254, 323, 324, 325, 326, 327, 358, 361, 362, 363, 367, 368, 370, 372, 374, 375, 377], "encod": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 111, 162, 163, 168, 173, 207, 209, 213, 225, 227, 229, 231, 324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 342, 343, 345, 347, 354, 355, 356, 358, 359, 361, 363, 368, 373, 374], "encompass": 367, "encount": [313, 363, 364, 370], "end": [0, 250, 295, 345, 347, 354, 366, 368, 374], "endpoint": [363, 369], "enforc": [303, 316, 363, 364], "engin": [362, 374], "enhanc": 18, "enlarg": 371, "enough": [166, 374], "ensembl": 342, "ensur": [113, 324, 325, 327, 361, 368, 374], "enter": [173, 373], "entir": [254, 295, 363, 364, 369], "entiti": 366, "entri": [23, 26, 27, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 186, 254, 285, 290, 327, 336, 337, 338, 339, 340, 363, 368, 369, 377], "enum": [88, 102, 103, 104, 105, 169, 220, 243, 244, 363, 374], "enumer": [87, 101, 242, 358, 359, 370], "env": [363, 364], "envar_nam": 369, "environ": [253, 303, 316, 322, 323, 324, 325, 326, 327, 328, 334, 336, 337, 339, 340, 344, 358, 359, 361, 363, 364, 379], "envvar": 251, "envvar_nam": 369, "epoch": 343, "eq": [336, 339], "equal": [27, 34, 35, 85, 139, 166, 347, 354, 363, 370, 373, 374, 377], "equat": [368, 375], "equidist": 371, "equip": 368, "equival": [42, 334, 368], "error": [23, 137, 147, 149, 194, 197, 306, 327, 342, 343, 345, 363, 368, 370, 371, 372, 375], "especi": 364, "essenti": [367, 372], "establish": [358, 359], "ester": [324, 325, 327, 330, 331], "estim": [168, 172, 173, 342, 363, 376], "estimate_product_space_s": [168, 173], "et": [325, 361, 371], "etc": [95, 168, 241, 246, 285, 378], "ethanol": 368, "euclidean": 313, "eval_during_cr": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "eval_during_model": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "evalu": [18, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 207, 209, 213, 225, 227, 229, 231, 271, 349, 350, 351, 352, 363, 367, 378], "even": [235, 288, 358, 359, 366, 367, 371, 375, 376, 378], "event": [23, 254, 366], "everyth": [364, 368], "evolv": 364, "exact": [23, 290, 368, 371], "exactli": [363, 367, 373, 374], "exampl": [113, 264, 270, 321, 322, 329, 332, 335, 341, 346, 348, 353, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378], "example_input_nam": 344, "except": [277, 293, 294, 324, 325, 327, 342, 343, 345, 355, 356, 361, 362, 363, 364, 366], "excepthook": 362, "exceptiongroup": 363, "exclud": [41, 287, 338, 366, 368], "exclude_list": 289, "exclus": [39, 335, 360, 366, 368, 375], "execut": [23, 50, 194, 325, 362, 363, 364, 366, 369, 374, 375], "exemplari": 367, "exercis": 366, "exhaust": [137, 372], "exist": [75, 254, 259, 363, 364, 367, 368, 374], "exp": 339, "exp_rep": [173, 336, 337, 338, 339, 340, 373], "exp_rep_byt": 172, "exp_rep_human_read": 172, "exp_rep_shap": 172, "expect": [3, 4, 8, 9, 10, 11, 37, 215, 323, 331, 337, 344, 356, 363, 364, 367, 368, 370, 371, 374, 375, 377], "expens": [149, 333], "experi": [0, 23, 139, 160, 192, 194, 207, 209, 213, 225, 227, 229, 231, 322, 323, 324, 325, 326, 327, 328, 330, 331, 349, 350, 351, 352, 367, 368, 370, 371, 372, 377, 378, 379], "experiment": [23, 80, 85, 90, 94, 97, 98, 100, 108, 111, 135, 136, 137, 138, 139, 168, 172, 173, 192, 194, 223, 286, 361, 363, 368, 370, 371, 373, 374, 375, 377], "explain": [331, 363], "explan": [367, 376], "explicit": [113, 138, 339, 345, 355, 356, 363, 369, 374, 379], "explicitli": [166, 173, 352, 359, 366, 372], "exploit": [7, 14], "explor": [7, 14, 23, 326, 372, 373], "exponenti": 173, "exposur": 363, "express": [30, 361, 366, 368], "extend": 343, "extens": [363, 372], "extra": [325, 363], "extract": [342, 343, 358], "f": [271, 322, 323, 324, 325, 326, 327, 328, 333, 334, 336, 337, 338, 339, 340, 342, 343, 347, 349, 350, 351, 352, 358, 359], "f1": 375, "f2": 375, "facilit": 372, "fact": [368, 370], "factor": [113, 367], "factori": [113, 166, 213, 214, 215, 216, 217, 223, 265], "fail": [352, 356, 363], "failur": 366, "fairli": 370, "fake": [194, 285, 330, 331, 342, 343, 344, 345, 347, 363, 375], "fall": [367, 377], "fallback": [83, 132, 173, 297, 308, 344, 355, 356, 363, 373], "fals": [27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 173, 209, 210, 225, 227, 229, 231, 249, 254, 262, 263, 270, 271, 276, 290, 331, 336, 337, 338, 339, 340, 342, 343, 347, 354, 355, 356, 361, 369], "famili": 368, "familiar": [322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354], "fang": 365, "farthest": [159, 313, 326, 331, 361, 363, 365, 372], "fashion": [248, 250], "fast": [336, 338, 340, 373, 377], "faster": 173, "favicon": 363, "fc": [324, 325, 327], "feasibl": 367, "featur": [70, 111, 289, 362, 364, 368], "fed": 361, "fee": 366, "feed": [343, 361], "feedback": 365, "few": [363, 364, 374], "field": [185, 363, 373, 378, 379], "fifti": 366, "figur": 308, "file": [308, 324, 325, 327, 344, 345, 352, 361, 363, 366, 369, 374], "filenotfounderror": [324, 325, 327], "fill": 23, "filler": 368, "filter": [26, 28, 168, 173, 287, 336, 368, 373], "final": [194, 325, 330, 342, 359], "final_estim": 342, "find": [260, 305, 308, 361, 367, 368], "fine": [342, 343, 345, 354, 355, 356, 361], "finer": [113, 361], "fingerprint": [105, 278, 371], "finit": [137, 192, 199, 294, 295, 318, 371, 375], "first": [162, 163, 168, 194, 304, 313, 325, 328, 330, 331, 336, 342, 343, 344, 345, 347, 352, 356, 358, 359, 361, 362, 363, 367, 368, 370, 371, 372, 373], "fit": [23, 157, 162, 163, 207, 209, 213, 225, 227, 229, 231, 233, 324, 325, 327, 336, 337, 338, 339, 340, 342, 344, 347, 354, 363, 366, 368, 371], "fit_gpytorch_ml": 363, "fit_gpytorch_mll_torch": 363, "fit_transform": [162, 163], "fitzner": [361, 365], "fix": [192, 216, 349, 350, 351, 352, 364, 367, 371, 375], "flag": [18, 23, 38, 135, 137, 138, 139, 169, 173, 290, 363, 367, 369], "flake8": 363, "flexibl": [363, 374], "flexibli": 372, "float": [7, 14, 27, 32, 34, 35, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 85, 86, 100, 107, 108, 111, 115, 116, 122, 123, 124, 125, 126, 127, 149, 172, 173, 194, 197, 235, 248, 249, 250, 255, 278, 283, 285, 286, 289, 295, 299, 301, 302, 304, 305, 306, 315, 318, 319, 320, 323, 326, 328, 343, 344, 347, 350, 358, 363, 364, 375, 379], "float64": 315, "floattensortyp": 344, "fly": 374, "fn": 259, "focu": [7, 14, 343, 367], "focus": [90, 352, 361], "folder": [325, 361, 364, 369, 376], "follow": [168, 194, 197, 323, 324, 325, 326, 327, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 345, 347, 352, 355, 356, 358, 359, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "footprint": 168, "forc": [149, 363, 372], "forest": [230, 231], "forgiv": 377, "fork": 364, "form": [35, 173, 192, 194, 285, 361, 366, 367, 370, 371, 372, 373, 374, 375], "format": [27, 34, 35, 48, 252, 273, 291, 296, 299, 344, 345, 354, 355, 361, 362, 363, 364, 367, 369, 374], "format_except": 362, "former": 363, "formul": 378, "forrest": 363, "forward": 343, "found": [59, 113, 166, 173, 302, 305, 308, 323, 343, 347, 361, 364, 367, 368, 372, 378], "foundat": 372, "fourier": 70, "fourth": 368, "fp": 363, "fpsrecommend": [331, 342, 343, 344, 345, 354, 355, 356, 361, 372], "frac": [359, 370], "frac1": [337, 339], "frac2": 339, "frac3": 339, "frac_resolut": 337, "fraction": [65, 283, 339, 368, 369], "fraction1": [337, 339], "fraction2": 339, "fraction3": 339, "fraction_1": 368, "fraction_2": 368, "fraction_3": 368, "frame": [166, 277, 286], "frame1": 337, "frame2": 337, "frame_1": 368, "frame_2": 368, "framea": 337, "frameb": 337, "frameb_a": 337, "frameb_b": 337, "framework": [367, 371], "free": [364, 366, 369], "freedom": 374, "frequenc": 70, "frictionless": 374, "friendli": 363, "from": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 118, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 188, 197, 199, 207, 209, 213, 216, 221, 223, 225, 227, 229, 231, 235, 241, 246, 249, 250, 270, 271, 273, 277, 286, 287, 289, 295, 306, 308, 313, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 362, 364, 366, 368, 370, 371, 372, 375, 377, 378, 379], "from_bound": [166, 363, 373], "from_config": [23, 355, 356, 367], "from_datafram": [166, 168, 173, 363, 373, 374], "from_dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295, 344], "from_json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295, 344, 345, 354, 367, 374], "from_preset": 213, "from_product": [168, 173, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 363, 368, 373, 374, 375], "from_record": 374, "from_simplex": [173, 363, 373], "frozenset": 339, "fsspec": 363, "fulfil": [34, 35], "full": [18, 166, 302, 321, 360, 363, 367, 378, 379], "full_factori": 166, "full_lookup": [324, 325, 327], "fulli": [361, 363, 364, 375], "fulltest": 364, "func": 364, "func_nam": 358, "function": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 29, 34, 35, 37, 45, 47, 53, 69, 76, 79, 82, 84, 89, 112, 114, 131, 147, 149, 161, 167, 168, 171, 176, 179, 180, 188, 189, 192, 193, 196, 197, 198, 201, 206, 208, 210, 214, 219, 232, 234, 236, 237, 240, 244, 247, 248, 249, 250, 251, 254, 255, 257, 268, 272, 273, 274, 282, 284, 285, 286, 291, 293, 298, 300, 307, 308, 309, 312, 317, 330, 336, 342, 343, 348, 358, 359, 360, 361, 362, 363, 367, 368, 370, 372, 373, 376, 377, 378, 379], "function_nam": [358, 359], "fundament": [371, 374], "furo": 363, "further": [323, 326, 328, 354, 361, 373, 375, 376, 378, 379], "furthermor": [347, 349, 350, 351, 352], "furyl": [324, 325, 327], "futur": [42, 208, 224, 228, 230, 355, 356, 358, 377], "fuzzi": 254, "fuzzy_row_match": [173, 254], "g": [38, 40, 41, 52, 100, 113, 168, 173, 241, 246, 258, 278, 280, 281, 290, 361, 363, 364, 368, 369, 371, 372, 373, 375], "gain": [173, 367], "gamma": 122, "gammaprior": 363, "gather": [139, 358, 359], "gaussian": [60, 154, 211, 212, 213, 214, 218, 219, 220, 222, 223, 248, 331, 347, 363, 368, 372, 378], "gaussian_process": [62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 213, 215, 216, 220, 223, 331, 363], "gaussianmixtur": 154, "gaussianmixtureclusteringrecommend": 372, "gaussianprocesspreset": 221, "gaussianprocesssurrog": [221, 331, 336, 337, 338, 339, 340, 347, 354, 355, 356, 363, 376], "gb": 342, "gcf": [323, 324, 326, 327], "ge": 334, "gener": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 104, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 207, 209, 213, 216, 223, 225, 227, 229, 231, 241, 246, 252, 270, 295, 309, 328, 331, 361, 363, 365, 366, 367, 368, 369, 371, 374, 375, 376, 377, 379], "geom_mean": [77, 85, 88, 347, 370], "geometr": [88, 306, 347, 370], "germani": [361, 365, 369], "get": [23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 166, 213, 285, 331, 349, 350, 351, 352, 361, 363, 379], "get_candid": 173, "get_invalid": [28, 37, 38, 39, 40, 41, 42, 43, 44], "get_parameters_from_datafram": [166, 173], "get_subclass": 331, "git": [361, 364], "github": [223, 224, 228, 230, 251, 267, 289, 344, 363, 364, 365], "give": [344, 345, 359, 366, 367, 370, 374], "given": [21, 23, 30, 31, 32, 46, 59, 98, 111, 113, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 173, 177, 192, 194, 207, 209, 210, 213, 225, 227, 229, 231, 235, 243, 255, 260, 262, 263, 266, 269, 270, 275, 279, 283, 285, 292, 295, 296, 304, 306, 336, 337, 338, 339, 340, 347, 352, 358, 359, 367, 373, 375], "glass_transition_tempc": 371, "global": [310, 363], "gmean": 306, "gmm": 154, "go": 361, "goal": [326, 370], "goe": 376, "good": [285, 347, 367, 369, 377], "good_interv": 285, "good_reference_valu": 285, "goodwil": 366, "googl": [363, 364], "govern": 361, "gp": [207, 209, 213, 225, 227, 229, 231, 363], "gpytorch": [60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 118, 120, 122, 123, 124, 125, 126, 127, 363], "gradient": [229, 369], "gradientboostingregressor": 342, "grant": 366, "granular": [342, 343, 345, 354, 355, 356, 361], "granularity_coars": 354, "granularity_medium": 354, "great": 374, "greater": 139, "greatli": 364, "greedi": [148, 149, 322, 323, 326, 363, 372], "grid": [358, 359], "grid_d": [358, 359], "grossli": 366, "group": [264, 361, 363, 367], "groupbi": [197, 199], "gt": [339, 340], "gu16": 371, "guarante": [368, 372], "guid": [330, 343, 361, 363, 364, 367, 370, 373, 375, 378], "guidelin": [363, 364], "ha": [23, 34, 35, 38, 53, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 270, 290, 325, 331, 337, 347, 352, 355, 356, 361, 363, 364, 366, 367, 368, 371, 373, 374, 375, 377, 378], "had": [192, 368, 371, 375], "half": [108, 123, 124, 295, 352], "halfcauchyprior": 363, "halfnormalprior": 363, "hamster": 378, "hand": [27, 34, 35, 111, 358, 359, 361, 367, 374], "handl": [95, 194, 210, 235, 293, 328, 336, 337, 347, 363, 367, 370, 375], "happen": [137, 347, 352, 359, 362, 363, 364, 373, 374], "happili": 370, "hard": 363, "harmless": 366, "hartman": 358, "hartmann": [358, 359, 378], "hasattr": [322, 333, 334, 349, 351, 352], "hash": [252, 361, 369], "hashabledict": 363, "have": [18, 23, 30, 42, 111, 157, 173, 192, 208, 224, 228, 230, 238, 260, 264, 278, 285, 290, 302, 323, 324, 325, 330, 331, 336, 337, 339, 347, 351, 352, 355, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375], "he": 331, "head": 363, "heart": 378, "help": 374, "helper": [343, 344, 374], "henc": [277, 354, 368, 371], "here": [41, 302, 323, 324, 326, 327, 328, 330, 333, 334, 339, 342, 345, 349, 350, 351, 352, 354, 358, 359, 361, 368, 370, 371, 372, 373, 374, 375, 377, 378], "herebi": 366, "herein": [366, 367], "heurist": 313, "hidden": 343, "hierarch": 374, "hierarchi": [59, 363, 364, 367, 374], "high": [364, 367, 368, 371, 374], "higher": [7, 14, 111, 362, 368, 372], "highest": 374, "highlight": [361, 378], "hint": 364, "histogram": 255, "histori": 364, "hold": [264, 366, 374], "homepag": [361, 363], "hood": 371, "hook": [83, 132, 173, 180, 184, 362, 363, 364], "hopp": [361, 365], "host": [361, 363, 369], "hostnam": [252, 369], "hot": [102, 325, 361, 363, 371], "how": [39, 194, 313, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 341, 342, 343, 344, 345, 350, 352, 354, 355, 356, 359, 361, 367, 368, 369, 370, 375, 377], "howev": [113, 173, 208, 322, 339, 349, 351, 352, 355, 356, 362, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376], "html": [27, 34, 35, 60, 118, 251, 259, 273, 302, 344, 363], "http": [27, 34, 35, 60, 118, 207, 209, 213, 223, 224, 225, 227, 228, 229, 230, 231, 251, 259, 267, 273, 289, 302, 361, 363, 366], "hue": [322, 323, 324, 325, 326, 327, 358, 359], "human": [172, 299, 354, 363, 365, 374], "hybrid": [17, 18, 52, 140, 141, 149, 160, 168, 169, 321, 331, 332, 348, 360, 361, 363, 372, 373], "hybrid_recommend": 352, "hybrid_sampl": [149, 326, 331, 336, 337, 338, 339, 340, 347, 354, 372], "hyperparam": 343, "hyperparamet": [331, 343], "hyperrectangl": [166, 373], "hypothesi": [361, 363, 364], "i": [18, 23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 52, 53, 54, 56, 72, 75, 86, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 137, 138, 139, 141, 149, 154, 155, 156, 157, 162, 163, 166, 168, 173, 178, 192, 194, 197, 199, 207, 208, 209, 210, 213, 223, 224, 225, 227, 228, 229, 230, 231, 233, 235, 238, 243, 248, 249, 250, 253, 254, 255, 259, 262, 263, 267, 269, 270, 271, 276, 277, 285, 286, 290, 291, 294, 295, 302, 304, 305, 308, 313, 318, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 339, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "ideal": 368, "ident": [113, 371, 374], "identifi": [197, 264, 277, 290, 363, 368, 371, 374, 375], "idx_offset": [27, 34, 35], "ignor": [137, 149, 168, 173, 174, 194, 197, 260, 289, 327, 352, 363, 368, 374, 375], "ignore_exampl": 363, "ignore_list": 288, "ii": 366, "iii": 366, "imag": 363, "immedi": [308, 367], "immut": 363, "impact": [325, 359, 369], "imperfect": 286, "implement": [35, 42, 86, 130, 142, 149, 199, 268, 336, 343, 350, 358, 363, 364, 365, 372, 373, 378], "impli": [361, 366, 368, 371], "implicitli": 374, "import": [58, 85, 149, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378], "importantli": 326, "impos": [339, 368, 375], "imposs": [361, 369, 374], "improv": [3, 4, 6, 8, 9, 10, 11, 12, 331, 334, 361, 363, 366], "imput": [194, 321, 327, 360, 361, 375], "impute_mod": [194, 197, 327, 375], "in_featur": 343, "inabl": [361, 366], "inaccuraci": 361, "incident": 366, "includ": [46, 80, 85, 90, 139, 168, 194, 262, 263, 288, 324, 337, 339, 342, 343, 345, 355, 356, 359, 361, 363, 364, 366, 368], "inclus": 366, "incom": 374, "incompat": [52, 209, 210, 234, 338, 368], "incomplet": 363, "inconsist": 363, "incorpor": [366, 376], "increas": [137, 249, 250, 347, 358, 359, 363, 371], "increment": 173, "incur": 366, "indefinit": [137, 194], "indemn": 366, "indemnifi": 366, "independ": [141, 227, 344, 372, 375], "index": [28, 37, 38, 39, 40, 41, 42, 43, 44, 168, 197, 290, 313, 333, 334, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 371, 373], "indic": [23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 168, 210, 292, 313, 326, 352, 363, 366, 372, 376], "indirect": [262, 263, 366], "individu": [38, 39, 73, 74, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 194, 210, 366, 367, 370, 372, 378], "ineffici": 173, "inequ": [35, 166, 373], "inf": [336, 337, 338, 339, 340, 354], "infer": [113, 209, 358, 359, 363, 373], "inferencesess": 209, "infin": 116, "infinit": [137, 138, 265, 294, 318, 319, 363, 371], "influenc": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 373], "info": [255, 363], "inform": [18, 95, 241, 324, 325, 327, 349, 350, 351, 352, 359, 361, 363, 364, 366, 369, 371, 373, 379], "infring": 366, "ingest": [173, 194, 371, 372], "ingredi": 368, "inherit": 364, "init": 237, "initi": [64, 65, 66, 67, 68, 69, 70, 71, 75, 138, 139, 141, 154, 155, 156, 157, 159, 173, 194, 197, 254, 313, 321, 326, 336, 343, 359, 360, 363, 365, 367, 369, 371, 372, 374, 375, 378], "initial_data": [194, 197, 324, 359, 375], "initial_recommend": [139, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 355, 356, 361, 372], "initial_recommender_cl": 363, "initial_strategi": 363, "initial_typ": 344, "inject": 374, "inner": [133, 372, 374], "inplac": [325, 358, 359], "input": [86, 108, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 194, 207, 209, 213, 225, 227, 229, 231, 233, 234, 248, 264, 283, 286, 290, 295, 297, 304, 343, 344, 347, 350, 358, 359, 363, 374, 375], "input_dim": [343, 344], "insid": [344, 345, 362, 374], "inspect": 270, "instabl": 368, "instal": [362, 363, 364, 371], "instanc": [38, 41, 139, 168, 173, 337, 361, 364, 367, 368, 369, 371, 373, 374, 375], "instanti": [209, 367], "instead": [23, 137, 254, 277, 355, 356, 361, 362, 363, 367, 368, 370, 371, 374, 375, 377], "institut": [365, 366], "instruct": [361, 363, 377, 379], "instrument_nam": 255, "int": [23, 27, 34, 35, 62, 65, 67, 68, 69, 70, 71, 86, 102, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 194, 197, 199, 248, 249, 250, 255, 278, 291, 305, 310, 311, 313, 336, 338, 340, 343, 347, 359, 364, 371], "integ": [102, 352, 363, 364, 371], "integr": [364, 367], "intend": [330, 339, 358, 372, 373], "intens": 371, "intention": 366, "interact": [22, 23, 330, 361, 362, 367, 374], "interconnect": 367, "interest": 370, "interfac": [130, 215, 342, 363, 366, 367], "intermedi": [157, 313], "intern": [23, 42, 137, 347, 363, 368, 369, 371, 372, 373, 374], "internet": 361, "internship": 365, "interpol": 65, "interpret": [168, 192, 283, 345, 349, 350, 351, 352, 355, 356, 359, 369, 373, 375], "interrupt": 50, "intersect": [326, 352], "interv": [107, 246, 248, 249, 250, 347, 363, 367, 371, 374, 377], "introduc": [362, 363, 368, 371, 372, 375], "intuit": 367, "invalid": [28, 37, 38, 39, 40, 41, 42, 43, 44, 46, 173, 277, 290, 345, 355, 362, 367, 368, 373], "invalid_config": 356, "invalid_surrogate_model": 345, "invalid_typ": 356, "invari": [38, 41, 42, 339, 368], "invers": [184, 374], "investig": [192, 375], "invok": 379, "involv": [23, 173, 361, 368, 369, 370, 371, 373, 374], "io": 251, "irrelev": 368, "irrespect": [254, 290], "irrevoc": 366, "is_bound": [295, 363], "is_continu": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111], "is_discret": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111], "is_empti": [166, 173, 363], "is_finit": [295, 363], "is_fully_unbound": 295, "is_half_bound": 295, "is_in_rang": [93, 94, 95, 97, 98, 100, 107, 108, 111], "is_left_bound": 295, "is_numer": [93, 94, 95, 97, 98, 100, 107, 108, 111], "is_right_bound": 295, "iso": 344, "isoxazol": 378, "issu": [208, 224, 228, 230, 259, 267, 363, 366], "item": [31, 93, 94, 95, 97, 98, 100, 107, 108, 111, 358, 359, 371], "iter": [23, 107, 137, 138, 168, 173, 174, 194, 208, 246, 265, 286, 292, 296, 323, 324, 328, 336, 337, 338, 339, 340, 349, 350, 351, 352, 358, 359, 361, 363, 367, 371, 372, 375], "iterrow": [333, 334, 349, 350, 351, 352], "its": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 166, 168, 173, 188, 199, 207, 209, 210, 213, 216, 225, 227, 229, 231, 233, 235, 241, 246, 255, 261, 270, 285, 295, 299, 331, 359, 361, 362, 364, 366, 368, 369, 370, 373, 374, 375], "itself": [358, 362], "j": [325, 361, 371], "jackiepho": [324, 325, 327], "januari": 366, "javadi": 365, "join": [339, 362], "joint": [207, 209, 213, 225, 227, 229, 231, 367], "joint_posterior": [207, 209, 213, 225, 227, 229, 231], "joint_posterior_attr": [210, 342, 343], "jointli": [210, 367], "json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295, 308, 344, 345, 354, 355, 363, 379], "json_str": 374, "juli": 365, "jupyt": 344, "just": [364, 374], "k": [108, 155, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 349, 350, 351, 352, 363, 372], "keep": [37, 111, 166, 173, 326, 343, 363, 364, 373], "kei": [264, 285, 325, 364], "kept": 371, "kernel": [64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 213, 214, 215, 216, 217, 223, 331, 363, 368, 378], "kernel_factori": [62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 213, 215, 216, 331, 336, 337, 338, 339, 340, 347, 354], "kernel_or_factori": 213, "kernelfactori": [213, 216, 217, 223, 363], "keyword": [326, 327, 331, 352, 359, 363, 373, 375], "kgaa": [361, 365, 369], "kickstart": 374, "kind": [149, 361, 363, 366, 371, 372], "kiter": [336, 337, 338, 339, 340, 347], "kmean": [155, 331], "kmeansclusteringrecommend": [331, 372], "kmedoid": 156, "knob": 361, "know": [326, 350, 355, 361, 374], "knowledg": 361, "known": [368, 378], "kwarg": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 68, 73, 74, 75, 120, 122, 123, 124, 125, 126, 127, 130, 202, 203, 204, 215, 260, 294], "l1": 371, "label": [41, 42, 100, 111, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 207, 209, 213, 225, 227, 229, 231, 255, 339, 361, 363, 368, 371, 373, 375], "lambda": [336, 338, 339, 340, 358], "land": 363, "languag": [259, 361], "larg": [111, 173, 333, 334, 349, 363, 371], "larger": [65, 108, 331, 338, 367, 368, 374], "largest": 313, "last": [137, 343, 364, 367, 372], "latent": 371, "later": [108, 351, 362, 367, 374], "latest": [361, 364, 367], "latter": [270, 367], "law": [361, 366], "lawsuit": 366, "layer": 343, "lazi": [314, 363], "lazili": 363, "le": 334, "lead": [57, 347, 363, 374], "lean": 364, "learn": [198, 199, 207, 209, 213, 225, 227, 229, 231, 358, 360, 361, 363, 368, 371, 376, 377, 379], "least": [137, 361, 366, 367], "leav": 374, "lee": 365, "left": [54, 55, 127, 194, 290, 295, 337, 370], "left_df": 290, "legaci": 48, "legal": 366, "legend": [324, 327], "len": [337, 339], "length": [66, 137, 138], "lengthi": 367, "lengthscal": [65, 66, 67, 69, 70, 71], "lengthscale_initial_valu": [65, 66, 67, 69, 70, 71], "lengthscale_prior": [65, 66, 67, 69, 70, 71], "less": 367, "let": [325, 342, 343, 344, 345, 359, 361, 368, 370, 374], "level": [286, 363, 364, 367, 368, 372, 374], "leverag": [367, 372], "li": 371, "liabil": 366, "liabl": 366, "lib": [355, 356], "licensor": 366, "lie": [23, 285], "life": [361, 364, 365], "lifecycl": 367, "ligand": [324, 325, 327, 330, 331, 361, 371], "like": [157, 197, 258, 361, 363, 364, 367, 368, 371, 374, 375], "limit": [255, 361, 365, 366, 368, 373, 378, 379], "line": [295, 323, 324, 326, 327, 363, 364, 367, 371, 375, 378], "linear": [64, 166, 225, 244, 249, 328, 331, 332, 343, 347, 360, 363, 364, 373, 377], "linear_model": [342, 344], "linear_regressor": 344, "linearkernel": 363, "linearli": [249, 250, 347], "linearregress": 342, "lineplot": [322, 323, 324, 325, 326, 327, 358, 359], "link": [40, 363, 366, 371], "linspac": [322, 323, 326, 328, 336, 337, 338, 339, 340, 342, 343, 344, 345, 351, 352, 354, 358, 359], "lint": [361, 363, 364], "linter": [363, 364], "list": [26, 27, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 77, 98, 113, 117, 137, 138, 166, 168, 173, 174, 177, 178, 197, 199, 254, 262, 263, 264, 269, 278, 279, 280, 281, 285, 287, 288, 289, 290, 313, 322, 323, 324, 326, 328, 331, 336, 337, 338, 339, 340, 343, 347, 349, 350, 351, 352, 359, 361, 364, 366, 368, 370, 372, 373, 375], "liter": [77, 137, 194, 197, 286, 313, 364], "literatur": 363, "litig": 366, "littl": 362, "liver": [375, 378], "load": [308, 314, 344, 355, 356, 363], "loc": [125, 126, 324, 327], "local": [362, 364, 369], "locat": [125, 126, 308, 369], "log": [125, 255, 361, 369], "logarithm": [4, 9, 10, 306], "logei": [4, 363], "logic": [133, 223, 285, 363, 368, 372], "lognormalprior": 363, "logo": 363, "long": [367, 374], "longer": 363, "look": [224, 228, 230, 331, 333, 334, 367, 368, 374, 377], "lookup": [192, 194, 197, 199, 273, 290, 321, 322, 323, 326, 350, 360, 363, 379], "lookup_test_task": 359, "lookup_training_task": 359, "lookup_withmiss": 327, "loop": [192, 194, 199, 336, 337, 338, 339, 340, 343, 347, 363, 375], "loss": [343, 345, 366], "lost": 374, "lot": 378, "low": [326, 362, 363, 371, 374], "lower": [127, 248, 249, 250, 295, 324, 327, 347, 358, 359, 371, 377], "lower_bound": [336, 337, 338, 339, 340, 347, 354, 373], "lr": [342, 343], "lst_exclud": 287, "luxuri": 367, "m290244": [355, 356], "machin": [361, 364, 369, 371, 377], "machineri": [362, 364], "made": [58, 173, 194, 327, 361, 362, 366, 368, 369, 373, 375], "magnitud": 286, "mai": [23, 168, 361, 366, 367, 374], "mail": 366, "main": [22, 23, 361], "maintain": [364, 373], "major": 375, "make": [7, 14, 42, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 233, 235, 259, 324, 327, 331, 333, 361, 362, 364, 366, 367, 368, 371, 374, 375, 378], "malfunct": 366, "manag": [22, 166, 167, 168, 173, 311, 366], "mandatori": 377, "mani": [323, 326, 351, 352, 367, 371, 374, 377], "manipul": 373, "manner": 369, "manual": [352, 362, 373, 374], "map": [100, 111, 197, 248, 249, 250, 260, 323, 324, 325, 326, 327, 347, 375, 377], "margin": 363, "mark": [173, 366, 378], "mark_as_measur": 173, "markdown": [345, 355, 356, 363], "marker": [322, 324, 325, 327, 358, 359], "markers": [322, 325, 358, 359], "marketplac": 363, "martin": [361, 365], "mask_bad1": 336, "mask_bad2": 336, "mask_bad3": 336, "mask_good": [336, 368], "match": [23, 113, 166, 168, 173, 241, 243, 246, 254, 260, 290, 326, 347, 352, 361, 363, 367, 370, 374, 379], "match_targeta": 377, "match_targetb": 377, "matern": 65, "maternkernel": 363, "math": 339, "mathemat": 363, "matplotlib": [323, 324, 326, 327, 363], "matric": [207, 209, 213, 225, 227, 229, 231], "matter": [364, 370], "max": [243, 324, 325, 327, 328, 330, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 355, 356, 361, 363, 370, 374, 379], "max_column": 291, "max_nonzero": 173, "max_row": 291, "max_sum": [173, 373], "max_target": 377, "max_yield": [324, 327], "maxim": [241, 243, 246, 328, 330, 347, 361, 377], "maximum": [111, 173, 248, 291, 347, 363, 368, 373], "mc": 343, "md": 363, "me2pph": [324, 325, 327], "mean": [5, 7, 14, 42, 77, 88, 155, 162, 163, 192, 194, 197, 207, 209, 213, 225, 227, 229, 231, 235, 306, 327, 328, 331, 342, 343, 344, 347, 363, 364, 366, 367, 368, 370, 371, 372, 374, 379], "meaning": 370, "meanpredictionsurrog": [235, 331, 376], "meantim": [364, 368], "meanvarestim": 342, "measur": [23, 137, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 173, 192, 194, 254, 290, 324, 325, 327, 331, 333, 334, 347, 349, 350, 351, 352, 361, 363, 364, 369, 370, 371, 372, 373, 375, 377, 379], "mechan": [7, 14, 50, 85, 86, 88, 192, 195, 199, 297, 326, 358, 359, 363, 366, 374, 375], "media": [366, 371], "mediocr": 377, "medium": [342, 343, 345, 354, 361, 366, 371], "medoid": [156, 363, 372], "meet": [285, 366], "member": [270, 368], "memori": [168, 172, 173, 339, 343, 363], "memorys": [168, 173], "merchant": 366, "merck": [361, 365, 369], "mere": [366, 370], "merg": 364, "meshgrid": [358, 359], "messag": [342, 343], "meta": [54, 135, 137, 138, 139, 142, 361, 363, 379], "metadata": [23, 166, 173, 252, 363, 379], "metarecommend": [137, 138, 139, 363], "method": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 172, 173, 188, 207, 209, 213, 215, 216, 223, 225, 227, 229, 231, 237, 238, 241, 246, 258, 259, 270, 295, 308, 343, 345, 355, 356, 363, 364, 365, 367, 370, 371, 373, 374, 375, 378], "methyldiphenylphosphin": [324, 325, 327], "methylisoxazol": 378, "metric": [361, 369, 371], "micromamba": 363, "midpoint": 377, "might": [38, 42, 111, 168, 325, 331, 333, 337, 339, 352, 359, 362, 367, 368, 373, 375, 378], "mimic": [60, 118, 368], "min": [243, 322, 323, 326, 328, 333, 334, 347, 349, 350, 351, 352, 358, 359, 361, 363, 370, 374, 379], "min_nonzero": 173, "min_target": 377, "miniconda": 363, "minim": [241, 243, 246, 328, 347, 358, 359, 377], "minimum": [108, 173], "minor": 363, "mirror": [367, 374], "miss": [23, 194, 327, 363, 364, 375], "mix": [199, 339, 361, 368, 371, 372, 374, 378], "mixin": 188, "mixtur": [154, 335, 360, 363, 368, 371, 372, 378], "mobil": 363, "mode": [77, 100, 111, 137, 194, 241, 243, 246, 249, 285, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 370, 372, 374, 379], "model": [26, 27, 28, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 60, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 207, 208, 209, 210, 213, 225, 227, 229, 231, 234, 235, 237, 238, 302, 333, 334, 341, 358, 359, 361, 363, 365, 367, 368, 371, 372, 374, 377, 378, 379], "model_cl": 238, "model_class": [154, 155, 156, 157], "model_cluster_num_parameter_nam": [154, 155, 156, 157], "model_from_config": 344, "model_from_python": 344, "model_init": 237, "model_json": 344, "model_param": [154, 155, 156, 157, 225, 229, 231, 345, 363], "modif": [362, 366], "modifi": [23, 233, 235, 286, 366, 373], "modul": [0, 1, 24, 60, 78, 91, 109, 118, 128, 133, 142, 145, 150, 164, 179, 180, 192, 200, 205, 211, 218, 239, 256, 300, 314, 317, 343, 361, 363, 364], "modular": 364, "mol": 279, "molecul": [40, 105, 111, 277, 278, 279, 371], "molecular": 371, "moment": [199, 364, 377], "monitor": 369, "monkeypatch": 362, "mont": [8, 9, 10, 11, 12, 13, 14, 53, 197, 322, 323, 325, 326, 327, 328, 343, 358, 359, 375], "mordr": [105, 111, 168, 280, 324, 325, 327, 330, 331, 337, 339, 342, 343, 345, 355, 356, 361, 363, 368, 371], "mordredcommun": [363, 371], "more": [7, 14, 42, 46, 55, 111, 137, 138, 166, 168, 173, 178, 194, 207, 209, 213, 225, 227, 229, 231, 233, 234, 235, 251, 254, 270, 326, 327, 328, 331, 339, 342, 358, 361, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 377], "morgan": [105, 278, 371], "morgan_fp": [105, 325, 371], "morgangener": [325, 336, 338, 340], "most": [173, 194, 323, 326, 329, 361, 364, 367, 368, 370, 371, 373, 374, 375, 376, 377], "move": [363, 374], "mseloss": 343, "mu": [125, 126], "much": [325, 326, 370, 371], "multi": [321, 360, 363], "multipl": [30, 85, 196, 197, 286, 323, 324, 325, 326, 327, 337, 361, 363, 368, 370, 377, 378, 379], "multipli": [35, 74, 368], "multitask": 363, "must": [38, 80, 85, 90, 168, 173, 199, 286, 331, 342, 343, 347, 363, 364, 366, 368, 369, 370, 371], "mutual": 375, "my_attribut": 364, "my_valu": 369, "mypi": [259, 267, 361, 363, 364], "mystr": 364, "n": [18, 271, 324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 345, 347, 349, 350, 351, 352, 354], "n_batches_don": 23, "n_bit": 278, "n_cluster": [155, 156], "n_compon": 154, "n_doe_iter": [194, 197, 199, 322, 323, 324, 325, 326, 327, 328, 358, 359, 375], "n_estim": 345, "n_fits_don": 23, "n_iter": [333, 334, 336, 337, 338, 339, 340, 347], "n_mc_iter": [197, 199, 322, 323, 325, 326, 327, 328, 358, 359, 375], "n_point": 166, "n_sampl": 313, "n_task": 168, "n_task_param": 363, "naiv": [141, 227, 235, 326, 331, 363, 373], "naive_hybrid_campaign": 326, "naive_hybrid_recommend": 326, "naivehybridrecommend": 363, "naivehybridspacerecommend": [326, 352, 363, 372], "nake": [254, 369], "name": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 34, 35, 46, 47, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 154, 155, 156, 157, 166, 173, 177, 186, 197, 209, 233, 235, 241, 246, 260, 261, 266, 277, 278, 280, 281, 285, 287, 303, 308, 316, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 363, 364, 366, 368, 369, 370, 373, 374, 375, 377, 378], "name_or_abbr": [261, 266], "namespac": [363, 364], "nan": [23, 116, 280, 281, 318, 320], "nativ": [344, 363], "natur": [229, 325, 364, 368, 372, 374, 377], "navig": [361, 367], "nbase": [278, 280, 281], "nbviewer": 344, "ndarrai": [86, 166, 168, 173, 248, 249, 250, 295, 306, 313, 363], "ne": 339, "nearli": 377, "necessari": [364, 367, 368, 370, 371, 373, 375], "necessarili": [366, 367, 368, 373, 378], "need": [18, 23, 130, 199, 210, 290, 322, 323, 324, 325, 326, 327, 328, 331, 336, 339, 340, 342, 344, 347, 349, 350, 351, 352, 358, 359, 361, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 377], "negat": [359, 368, 378], "neglig": 366, "neither": [199, 286], "nest": [367, 379], "network": 343, "neural": 343, "neuralnetdropout": 343, "neuralnetdropoutsurrog": 343, "never": [338, 339], "nevertheless": [270, 362], "new": [23, 48, 77, 80, 85, 90, 137, 139, 166, 208, 248, 249, 250, 285, 286, 289, 330, 354, 361, 363, 364, 367, 368, 378], "new_rec": 367, "newli": [361, 364, 369], "next": [23, 139, 339, 354, 358, 359, 361, 367, 372, 374], "ngboost": [229, 331, 363], "ngboostmodel": 345, "ngboostsurrog": [331, 345, 376], "nice": 362, "nicknam": 277, "nintern": 347, "nn": 343, "no_duplicates_constraint": 339, "no_tl": 358, "nois": [194, 286, 359, 363], "noise_level": 286, "noise_perc": [194, 197, 375], "noise_std": [358, 359], "noise_typ": 286, "noised_hartmann": 358, "noisi": [10, 11, 358, 378], "non": [23, 141, 194, 199, 207, 209, 213, 225, 227, 229, 231, 270, 318, 319, 320, 350, 358, 363, 366, 373, 374], "none": [18, 23, 32, 42, 46, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 107, 113, 115, 116, 117, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 170, 173, 175, 177, 178, 181, 182, 184, 186, 194, 197, 199, 207, 209, 213, 225, 227, 229, 231, 237, 238, 246, 254, 255, 285, 286, 287, 288, 289, 295, 296, 308, 318, 319, 320, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 373, 375, 377], "nonpredict": [152, 154, 155, 156, 157, 159, 160], "nonpredictiverecommend": [157, 159, 160, 363], "nonzero": [173, 363], "noqa": [336, 364], "nor": 286, "norecommenderslefterror": [137, 138], "norm": 345, "normal": [124, 125, 126, 162, 336, 338, 339, 340, 347, 362, 366, 370, 373], "normaliz": 370, "normalprior": 363, "not_a_param": 345, "notabl": 363, "note": [23, 42, 149, 168, 194, 197, 199, 208, 209, 285, 286, 323, 324, 325, 326, 327, 331, 337, 339, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 361, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378], "notebook": 344, "noteworthi": 367, "noth": [23, 27, 32, 34, 35, 56, 85, 98, 139, 141, 147, 149, 154, 155, 156, 157, 166, 168, 173, 213, 225, 229, 231, 246, 366, 371], "notic": [364, 366, 374], "notimplementederror": [86, 178, 181, 182, 199, 207, 208, 209, 213, 225, 227, 229, 231], "notwithstand": 366, "now": [323, 324, 325, 326, 327, 328, 330, 331, 336, 338, 339, 347, 354, 355, 358, 359, 361, 363, 371, 378], "np": [86, 322, 323, 326, 328, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 351, 352, 354, 358, 359, 368, 371], "nrecommend": [330, 331, 347, 349, 350, 351, 352], "nu": 65, "num": 299, "num_disc_1": [347, 367], "num_disc_2": 347, "num_experi": [194, 322, 323, 324, 325, 326, 327, 328, 358, 359], "num_neuron": 343, "num_parameter_1": 340, "num_parameter_2": 340, "num_parameter_3": 340, "num_parameter_4": 340, "num_parameter_5": 340, "num_parameter_6": 340, "num_sampl": 70, "num_valu": [336, 337, 338, 339, 340, 347, 354, 373], "number": [23, 70, 111, 130, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 194, 197, 199, 278, 291, 295, 299, 309, 313, 322, 323, 324, 325, 326, 327, 328, 333, 334, 336, 337, 338, 340, 349, 350, 351, 358, 359, 361, 363, 367, 368, 369, 370, 371, 373, 374, 375], "numer": [23, 32, 34, 35, 57, 93, 94, 95, 97, 98, 100, 107, 108, 111, 166, 173, 246, 254, 286, 290, 330, 333, 339, 363, 368, 369, 370, 371, 373, 375, 377], "numerical_measurements_must_be_within_toler": [23, 173, 254, 290, 363, 367], "numericalcontinuousparamet": [27, 34, 35, 166, 326, 333, 334, 349, 350, 352, 359, 373, 379], "numericaldiscreteparamet": [173, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 351, 352, 354, 355, 356, 358, 359, 361, 373, 374, 379], "numericaltarget": [322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 370, 374, 379], "numericcontinu": [326, 352], "numparam1": 340, "numparam2": 340, "numparam3": 340, "numparam4": 340, "numparam5": 340, "numparam6": 340, "numpi": [166, 295, 301, 303, 322, 323, 326, 328, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 351, 352, 354, 358, 359, 363, 368], "nuniqu": 339, "nyou": [322, 349, 351, 352], "o": [322, 323, 324, 325, 326, 327, 328, 330, 331, 334, 336, 337, 338, 339, 340, 342, 343, 345, 358, 359, 361, 368, 369, 371], "o2": [324, 325, 327], "obj": [115, 116, 117, 182], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 85, 88, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 162, 163, 166, 168, 172, 173, 174, 182, 183, 186, 188, 207, 209, 213, 216, 225, 227, 229, 231, 233, 235, 241, 246, 258, 259, 260, 279, 286, 290, 295, 308, 326, 330, 342, 343, 344, 345, 352, 355, 356, 362, 363, 364, 366, 367, 368, 372, 373, 375, 376, 377, 379], "objective_json": 374, "oblig": 366, "observ": [192, 375, 377], "obtain": [168, 194, 325, 359, 361, 367, 374, 378], "oc": [324, 325, 327, 330, 331], "oc1": [324, 325, 327], "occur": [41, 364], "occurr": 368, "octanol": [368, 371], "off": [7, 14, 199, 271, 337, 361, 363, 368, 369, 377], "offer": [351, 366, 371, 372, 374, 375, 376, 378], "offset": [27, 34, 35, 68], "offset_initial_valu": 68, "offset_prior": 68, "often": [368, 369, 371, 374], "oftentim": 374, "oh": [97, 102, 325, 337, 342, 343, 345, 347, 354, 355, 356, 361, 373, 374], "ok": 347, "omit": [361, 374], "onc": [197, 371, 375], "one": [23, 46, 113, 133, 137, 168, 178, 213, 235, 323, 324, 325, 326, 327, 331, 333, 347, 356, 358, 359, 361, 363, 364, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378], "onehot": 325, "ones": [168, 254, 290, 325, 352, 363], "onli": [7, 14, 34, 35, 38, 65, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 199, 235, 254, 255, 267, 270, 285, 290, 313, 322, 324, 331, 336, 337, 339, 344, 345, 349, 350, 351, 352, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "onnx": [208, 209, 302, 341, 361, 363, 376], "onnx_input_nam": [209, 344], "onnx_str": [209, 344], "onto": 364, "open": [361, 364], "opentelemetri": [361, 363, 369], "oper": [32, 39, 184, 233, 235, 300, 333, 338, 339, 340, 362, 363, 368, 372, 374], "operator_convert": 344, "opposit": 368, "opt": [343, 361, 369], "optim": [23, 27, 34, 35, 141, 149, 192, 194, 197, 199, 223, 285, 325, 326, 328, 329, 330, 333, 334, 343, 347, 352, 363, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378], "optimize_acqf": [27, 34, 35, 149], "optimize_acqf_": [27, 34, 35], "optimize_acqf_discret": 149, "optimize_acqf_mix": 149, "option": [18, 23, 32, 42, 58, 64, 65, 66, 67, 68, 69, 70, 71, 75, 94, 97, 98, 100, 108, 111, 113, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 184, 186, 194, 197, 199, 225, 229, 231, 237, 246, 285, 287, 288, 289, 327, 331, 342, 343, 344, 345, 363, 364, 367, 368, 370, 373, 374, 375, 376, 377], "oracl": 375, "orchestr": [364, 367], "order": [168, 173, 339, 361, 363, 364, 367, 368, 371, 374, 378], "ordin": 377, "ore": 374, "org": [27, 34, 35, 207, 209, 213, 223, 225, 227, 229, 231, 259, 273, 289, 344, 361, 366], "organ": 364, "origin": [18, 162, 163, 234, 264, 354, 364, 366, 371, 372, 374], "orthogon": 364, "other": [38, 72, 166, 323, 324, 327, 330, 333, 334, 339, 349, 352, 358, 359, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378], "otherwis": [93, 94, 95, 97, 98, 100, 107, 108, 111, 339, 366, 370], "our": [224, 228, 230, 326, 336, 338, 345, 349, 350, 351, 352, 355, 356, 358, 359, 361, 364, 367, 368, 374, 375], "out": [173, 347, 359, 361, 366, 369, 375], "out_featur": 343, "outcom": [325, 361, 371, 377], "output": [75, 285, 286, 308, 343, 350, 358, 359, 362, 365, 372], "output_dim": 343, "outputscal": 75, "outputscale_initial_valu": 75, "outputscale_prior": 75, "outsid": [23, 249, 250, 285, 290, 347, 374], "outstand": 366, "over": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 363, 372], "overal": [168, 344, 345, 363, 364, 367, 370], "overlap": [280, 281, 333, 334, 349, 368], "overrid": [184, 186], "overview": 374, "overwritten": 352, "own": [141, 361, 362, 363, 364, 366, 368, 371], "owner": 366, "ownership": 366, "p": [324, 325, 327, 330, 331, 343, 358, 359, 364], "p1": [373, 374], "p1_json": 374, "p1_via_json": 374, "p2": [373, 374], "p2_json": 374, "p2_via_json": 374, "p3c4": [324, 325, 327], "pack": 374, "packag": [252, 355, 356, 363, 364, 371], "page": [344, 361, 363, 364], "pair": [361, 371], "pam": 156, "pamclusteringrecommend": 372, "panda": [37, 190, 191, 277, 324, 325, 327, 336, 358, 359, 363, 368, 371, 373, 374], "parallel": 364, "param": [341, 345, 360, 373], "param1": [373, 375], "param2": [373, 375], "param_bounds_comp": [166, 168, 173], "param_nam": 166, "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 55, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 86, 90, 93, 94, 97, 98, 100, 102, 103, 104, 105, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 172, 173, 174, 177, 178, 184, 186, 188, 192, 194, 197, 199, 207, 209, 210, 213, 216, 223, 225, 227, 229, 231, 233, 234, 235, 237, 238, 241, 246, 248, 249, 250, 254, 255, 260, 262, 263, 264, 269, 270, 271, 273, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 304, 305, 306, 308, 310, 311, 313, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 363, 364, 368, 369, 370, 374, 375, 378, 379], "parameter": [122, 123, 124, 125, 126, 127], "parameter_json": 374, "parameterencod": [94, 102, 103, 105, 108], "parametr": 368, "parent": 364, "pars": [297, 363], "parser": 363, "part": [18, 30, 52, 142, 224, 228, 230, 285, 345, 352, 355, 356, 358, 359, 363, 364, 366, 367, 368, 372, 373, 374], "parti": 366, "partial": 18, "particular": [23, 28, 37, 38, 39, 40, 41, 42, 43, 44, 149, 173, 192, 352, 361, 364, 366, 367, 371, 373, 374, 375], "particularli": 367, "partit": [156, 197, 199, 363, 372, 375], "pass": [23, 154, 155, 156, 157, 168, 173, 182, 213, 225, 229, 231, 354, 359, 363, 364, 370, 374], "passthrough": [20, 81, 217], "patent": 366, "path": [308, 322, 325, 358, 359, 364, 369], "pathlib": [322, 325, 358, 359], "pattern": 364, "pd": [286, 290, 324, 325, 327, 336, 358, 359, 363, 368, 371, 373, 374], "peek": 374, "pend": 18, "per": [194, 322, 323, 324, 325, 326, 327, 328, 331, 347, 351, 358, 359, 371, 373, 375], "percent": [194, 366], "percentag": [149, 254, 286, 359, 372], "perfectli": 374, "perform": [149, 194, 254, 325, 326, 336, 337, 338, 339, 340, 355, 358, 359, 361, 364, 366, 367, 371, 372, 375], "period": 66, "period_length_initial_valu": 66, "period_length_prior": 66, "periodickernel": 363, "perm_inv_constraint": 339, "permiss": [361, 366], "permut": [38, 41, 42, 339, 368], "permutation_invari": 38, "permutationinvarianceconstraint": 339, "perpetu": 366, "persist": [367, 369, 374], "perspect": 374, "pertain": 366, "phase": 139, "phcpho": [324, 325, 327, 330, 331], "phenomenon": 367, "philosophi": 374, "physic": 375, "pi": [6, 331], "pickl": 363, "pictur": 361, "piec": [361, 367, 368], "piecewis": 67, "piecewisepolynomialkernel": 363, "pin": [18, 363], "pin_discret": 18, "pinned_part": 18, "pip": [361, 363, 364], "pipelin": [358, 359, 363, 364], "pival": [324, 325, 327, 330, 331], "place": [23, 285, 286, 344, 345, 362, 364, 366, 367, 371, 374], "placehold": 258, "plai": [367, 377], "plain": 217, "plainkernelfactori": [62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 213], "plan": [208, 224, 228, 230, 371], "pleas": [224, 228, 230, 325, 336, 338, 340, 342, 343, 344, 345, 361], "plot": [194, 322, 323, 324, 325, 326, 327, 358, 359, 363, 378], "plot_abegin_convert_pipelin": 302, "plot_ebegin_float_doubl": 302, "plotting_them": 308, "plt": [323, 324, 326, 327], "plu": 361, "plugin": 363, "pm": [5, 331], "png": [323, 324, 326, 327], "po16": 371, "poetri": 363, "point": [18, 22, 108, 130, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 207, 209, 210, 213, 225, 227, 229, 231, 301, 302, 312, 313, 315, 323, 324, 326, 328, 330, 331, 339, 351, 352, 358, 359, 361, 363, 365, 367, 372, 373, 375, 379], "points_per_dim": [322, 323, 326, 328, 351, 352, 358, 359], "polym": 371, "polynomi": [67, 68], "polynomialkernel": 363, "polytop": 363, "posit": [313, 370], "possibl": [113, 173, 174, 192, 285, 326, 327, 347, 361, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378], "possibli": 138, "post": 371, "posterior": [5, 7, 14, 207, 209, 210, 213, 225, 227, 229, 231, 234, 331, 342, 343], "postprocess": 277, "potassium": [324, 325, 327, 330, 331], "potenti": [168, 290, 361, 362, 363, 364, 367, 370, 373], "power": [68, 366, 368, 372], "pph3": [324, 325, 327], "pr": 364, "practic": 372, "pre": [113, 137, 216, 341, 363, 364, 373], "precis": [42, 137, 166, 234, 254, 302, 303, 316, 363, 379], "precomput": 100, "pred": 343, "predefin": [308, 367, 372], "predict": [7, 14, 157, 342, 343, 363, 367, 375], "prefer": [23, 366, 374], "prefix": [278, 280, 281], "prepar": [364, 366], "preprocess": 363, "present": [290, 330, 368, 375], "preset": [213, 220, 223, 363], "pressur": [338, 342, 343, 344, 345, 354, 355, 356, 361, 368], "pretrain": [209, 341, 360], "pretti": 291, "pretty_print_df": 363, "prevent": [181, 182, 362, 364, 373], "previou": [367, 369, 372], "previous": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 254, 324, 325, 327, 330, 331, 338], "price": 371, "primari": 367, "print": [291, 322, 324, 325, 327, 328, 330, 331, 333, 334, 338, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 361, 363, 367], "prior": [64, 65, 66, 67, 68, 69, 70, 71, 75, 122, 123, 124, 125, 126, 127, 340, 361, 362, 363, 375], "priori": [368, 374], "privat": [363, 365], "probabl": [6, 12, 331], "problem": [358, 359, 361, 363, 364, 367, 370, 374], "problemat": [270, 362, 371], "proce": [194, 330, 369], "process": [23, 60, 211, 212, 213, 214, 218, 219, 220, 222, 223, 233, 234, 313, 328, 331, 358, 359, 363, 364, 367, 368, 371, 374, 378], "prod": [339, 340], "prod_constraint": 340, "prod_i": 370, "produc": [86, 194, 361, 364, 375], "product": [43, 74, 168, 173, 174, 265, 335, 360, 361, 363, 366, 368, 379], "product_paramet": [173, 373], "productkernel": 363, "program": [355, 356], "progress": [23, 136, 363], "project": [361, 363, 369], "promin": 366, "proper": [234, 375], "properli": [18, 347, 362, 373], "properti": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 105, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 172, 173, 207, 209, 213, 216, 220, 223, 225, 227, 229, 231, 241, 243, 244, 246, 259, 295, 364, 368], "proport": 359, "propos": 367, "protobuf": 363, "protocol": [129, 130, 215, 270, 363], "prototyp": 365, "provid": [23, 27, 34, 35, 86, 100, 111, 113, 137, 138, 142, 166, 168, 173, 184, 188, 192, 194, 197, 199, 207, 209, 213, 223, 225, 227, 229, 231, 265, 273, 276, 283, 285, 286, 289, 292, 322, 324, 325, 326, 327, 349, 350, 351, 352, 355, 356, 358, 359, 363, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378], "prune": [10, 11], "prune_baselin": [10, 11], "public": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 105, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 172, 173, 188, 207, 209, 213, 215, 216, 220, 223, 225, 227, 229, 231, 241, 243, 244, 246, 258, 259, 295, 363, 364], "publicli": 366, "publish": 363, "pull": 363, "pure": [7, 14, 133, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 199, 208, 323, 328, 342, 351, 363, 379], "purerecommend": [135, 137, 138, 139, 141, 147, 152, 363], "purpos": [34, 35, 344, 361, 362, 364, 366, 374], "push": 364, "put": [369, 371], "puzzl": 361, "py": [355, 356, 363, 369], "py310": [355, 356], "py312": 364, "pyarrow": 363, "pydant": 363, "pydoclint": [363, 364], "pydocstyl": 364, "pylint": 363, "pypi": [361, 363], "pyplot": [323, 324, 326, 327], "pyproject": 363, "pytest": [363, 364], "python": [22, 259, 267, 325, 345, 350, 355, 356, 361, 362, 363, 364, 367, 369, 374], "python3": [355, 356], "pytorch": 363, "pyupgrad": 363, "q": [67, 207, 209, 210, 213, 225, 227, 229, 231, 234, 331], "qei": [8, 323, 331, 355, 356], "qexpectedimprov": [331, 336, 337, 338, 339, 340, 347, 354], "qlogei": [9, 363], "qlognei": [10, 363], "qnei": [11, 363], "qpi": [12, 331], "qsr": [13, 363], "quadrat": 71, "qualiti": 364, "quantiti": [40, 369, 370], "quantum": 100, "qucb": [14, 331], "queri": [133, 142, 192, 194, 361, 367, 369, 375], "question": [364, 367], "qvailabl": 331, "qvarucb": 363, "r": [324, 325, 327, 330, 331], "radial": 69, "radiu": [278, 371], "rais": [23, 46, 86, 113, 116, 117, 137, 138, 147, 149, 162, 163, 166, 168, 173, 177, 178, 181, 182, 194, 199, 207, 208, 209, 213, 225, 227, 229, 231, 233, 235, 238, 269, 271, 279, 283, 285, 286, 290, 313, 326, 352, 362, 363, 364, 372], "rand": 344, "random": [70, 166, 168, 194, 197, 230, 231, 285, 313, 322, 323, 324, 325, 326, 327, 331, 344, 359, 361, 363, 371, 372, 375], "random_campaign": [322, 323, 326], "random_forest": [231, 331], "random_recommend": [323, 326], "random_se": [194, 197, 328, 375], "randomforestmodel": 345, "randomforestregressor": 342, "randomforestsurrog": [331, 376], "randomli": [160, 313, 325, 372], "randomrecommend": [322, 323, 324, 325, 326, 327, 331, 336, 337, 338, 339, 340, 347, 363, 372], "rang": [93, 94, 95, 97, 98, 100, 107, 108, 111, 241, 285, 322, 323, 326, 328, 333, 334, 336, 337, 338, 339, 340, 343, 347, 349, 350, 351, 352, 359, 361, 368, 374, 375, 377], "rank": 377, "rastrigin": [322, 333, 334, 349, 351, 352], "rate": 122, "rather": [326, 354, 362, 374], "ration": 71, "ravel": [342, 358, 359], "raw": 374, "rbf": 69, "rbfkernel": 363, "rdkit": [105, 168, 276, 281, 325, 336, 338, 340, 368, 371], "re": [323, 326, 328, 349, 350, 351, 352, 364, 372], "reach": [248, 250, 347], "reachabl": 369, "reactant": 371, "reaction": [325, 330, 361, 368, 371, 378], "reactor": 378, "reactora": 378, "reactorb": 378, "reactorc": 378, "read": [100, 168, 308, 325, 330, 361, 363, 364], "read_excel": [324, 325, 327], "readabl": [172, 291, 299, 354, 363, 365, 366, 374], "readi": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 194, 364], "readm": [363, 364], "reagent": [368, 371], "real": [34, 35, 295, 361, 367, 377], "realist": 375, "realiz": [192, 375], "reason": [32, 154, 155, 156, 157, 173, 325, 339, 351, 366, 368, 371, 375], "reassembl": 374, "rebas": 364, "rec": [336, 337, 338, 339, 340, 347, 367], "receiv": [366, 369, 374], "recip": 364, "recipi": 366, "recommend": [23, 52, 54, 55, 98, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 192, 194, 208, 254, 285, 286, 313, 322, 323, 324, 325, 326, 327, 329, 333, 334, 336, 337, 338, 339, 340, 342, 343, 347, 355, 356, 358, 359, 360, 361, 363, 364, 369, 371, 373, 375, 378, 379], "recommendation_orig": 354, "recommendation_recr": 354, "recommenderprotocol": [23, 132, 135, 137, 138, 139, 144, 363], "reconstruct": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295, 361, 367, 369, 374], "record": [23, 254, 255, 361, 369], "recreat": [220, 354, 374], "recreate_model": 345, "recurs": [262, 263], "redesign": 363, "redistribut": 366, "reduc": [111, 358, 359, 371], "ref": 361, "refactor": [224, 228, 230, 363], "refer": [192, 223, 254, 266, 285, 290, 302, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 363, 367, 370, 371, 372, 373, 374, 375, 376, 378], "referenc": 364, "refin": [361, 363, 367], "reflect": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 364, 368, 371], "regard": [30, 333, 334, 339, 349, 364, 366], "register_custom_architectur": [342, 343], "regress": 225, "regressor": [342, 344], "regressormixin": 342, "regret": 13, "regroup": 363, "regular": [235, 363], "reinstal": 361, "rel": [194, 368, 370], "relat": [40, 87, 101, 168, 183, 242, 352, 358, 359, 361, 363, 367, 368, 369], "relationship": [358, 359, 361, 370], "relative_perc": 286, "releas": [361, 363], "relev": [38, 173, 337, 363, 364, 367, 368], "reli": [362, 363], "reliabl": 371, "relu": 343, "remain": [41, 199, 249, 347, 352, 358, 359, 366, 371, 374, 375], "remind": 363, "remot": 364, "remov": [37, 40, 41, 173, 339, 364, 368, 373], "renam": [325, 358, 359, 363], "render": 344, "reorgan": 363, "repeat": [364, 367], "repetit": 331, "rephras": 368, "replac": [322, 349, 351, 352, 363, 364, 371], "replic": 374, "repo": 363, "report": 362, "repositori": [325, 361, 364], "repr": 344, "repres": [28, 37, 38, 39, 40, 41, 42, 43, 44, 73, 74, 100, 168, 199, 207, 209, 213, 225, 227, 229, 231, 283, 295, 299, 313, 339, 355, 356, 361, 363, 366, 367, 371, 373], "represent": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 172, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 271, 275, 283, 291, 295, 336, 337, 338, 339, 340, 344, 347, 354, 363, 367, 371, 374, 379], "reproduc": [363, 366], "reproduct": 366, "request": [23, 54, 55, 86, 137, 138, 139, 178, 216, 252, 313, 363, 367], "requir": [27, 34, 35, 53, 139, 173, 238, 330, 339, 342, 344, 347, 351, 355, 361, 363, 364, 366, 367, 368, 370, 371, 373, 374, 375, 377], "rerun": 344, "reserv": [361, 364], "reset_index": 358, "resolut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 339, 340, 374], "resolv": 277, "resort": [235, 364, 374], "resp": [169, 326, 327, 352], "respect": [169, 194, 197, 253, 285, 339, 364, 367, 368, 370, 374, 377], "respons": [366, 367, 372], "restart": 137, "restor": 374, "restrain": 371, "restrict": [168, 173, 192, 197, 199, 336, 375, 379], "result": [7, 14, 23, 111, 173, 194, 233, 285, 322, 323, 324, 325, 326, 327, 328, 330, 342, 343, 344, 345, 347, 358, 359, 361, 363, 366, 367, 368, 369, 371, 372, 374, 375, 378], "result_baselin": [358, 359], "result_fract": 359, "retain": [366, 368], "retrain": [208, 209, 376], "retriev": [192, 261, 262, 263, 364, 375], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 80, 81, 83, 85, 86, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 170, 173, 174, 175, 177, 178, 181, 182, 184, 185, 186, 188, 190, 191, 194, 197, 199, 202, 203, 204, 207, 209, 210, 213, 216, 217, 221, 225, 227, 229, 231, 233, 234, 235, 237, 238, 241, 246, 248, 249, 250, 252, 253, 254, 255, 260, 262, 263, 264, 265, 266, 267, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 299, 304, 305, 306, 308, 313, 318, 319, 320, 323, 326, 328, 336, 342, 343, 344, 350, 358, 363, 367, 368, 375], "return_std": 344, "reus": 139, "reuse_last": 137, "reveal": 359, "review": 364, "revis": [363, 366], "rework": 363, "rewrit": 363, "rf": 342, "rff": 70, "rffkernel": 363, "rh": [27, 34, 35, 333, 334, 368], "ridg": 342, "right": [27, 34, 35, 127, 290, 295, 324, 327, 337, 361, 364, 366, 368, 370, 371, 377], "right_df": 290, "rihana": 365, "rim": 365, "risk": [362, 366, 367, 373], "robust": 361, "robustli": 235, "role": [364, 367, 370, 377, 379], "room": 367, "root": [325, 361, 364, 368], "round": [333, 339, 342, 343, 344, 345, 368], "roundtrip": [363, 374], "rout": 374, "row": [28, 37, 38, 39, 40, 41, 42, 43, 44, 86, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 194, 254, 290, 291, 306, 324, 327, 333, 334, 336, 337, 338, 339, 340, 347, 349, 350, 351, 352, 354, 367, 373, 375], "roya": 365, "royalti": 366, "rq": 71, "rqkernel": 363, "rr": 342, "ruff": [363, 364], "run": [194, 322, 323, 324, 325, 326, 327, 328, 358, 359, 361, 362, 363, 364, 367, 374, 375], "run_analyt": [323, 326], "run_full_initial_data": 324, "run_hybrid": 326, "run_impute_mod": 327, "runtim": 302, "runtimeerror": [162, 163, 342, 343], "s41586": [223, 289], "safe": [363, 367], "sai": 368, "said": 364, "same": [40, 139, 173, 177, 233, 235, 264, 331, 344, 345, 354, 362, 368, 369, 374, 378], "sampl": [149, 159, 160, 166, 255, 312, 313, 324, 326, 331, 359, 361, 363, 365, 379], "sample_percentag": 372, "samples_full_factori": 166, "samples_random": 166, "sampling_percentag": [149, 326, 331, 336, 337, 338, 339, 340, 347, 354], "satisfi": [30, 31, 32, 173, 333, 334], "save": [308, 323, 324, 326, 327, 344, 363], "savefig": [323, 324, 326, 327], "scalar": [85, 328, 347, 370, 374], "scale": [75, 123, 124, 125, 126, 127, 161, 162, 163, 233, 345, 347, 358, 363, 370], "scalekernel": 363, "scaler": [162, 233, 363], "scenario": [199, 322, 323, 324, 325, 326, 327, 328, 358, 359, 368, 370, 378, 379], "scene": 370, "schema": 367, "schembl15068049": [324, 325, 327], "scheme": 363, "scienc": [361, 365], "scipi": [306, 363], "screen": [264, 378], "script": [277, 362, 363, 369], "seaborn": [322, 323, 324, 325, 326, 327, 358, 359], "seamlessli": 374, "search": [18, 23, 26, 28, 37, 40, 51, 52, 55, 130, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 169, 170, 173, 176, 194, 197, 199, 207, 209, 213, 225, 227, 229, 231, 254, 290, 327, 330, 332, 335, 336, 337, 338, 339, 340, 347, 348, 354, 359, 363, 365, 367, 368, 369, 374, 375, 379], "searchspac": [23, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 169, 172, 173, 207, 209, 213, 225, 227, 229, 231, 325, 330, 342, 343, 344, 345, 354, 355, 356, 358, 360, 361, 363, 367, 368, 371, 373, 374, 375], "searchspace_json": 374, "searchspacetyp": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 373], "second": [194, 304, 306, 328, 331, 342, 343, 344, 345, 347, 356, 358, 368, 369], "secondari": [361, 369], "section": [361, 363, 364, 366, 374], "see": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 118, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 172, 173, 194, 197, 199, 207, 209, 213, 216, 223, 224, 225, 227, 228, 229, 230, 231, 241, 246, 251, 270, 273, 285, 286, 295, 322, 323, 324, 325, 326, 327, 328, 333, 334, 342, 343, 345, 349, 352, 361, 364, 367, 369, 370, 371, 374, 375, 379], "seed": [194, 197, 310, 311, 361, 363], "seek": 347, "seem": [279, 302, 356], "select": [31, 53, 135, 137, 138, 139, 142, 157, 159, 207, 209, 213, 225, 227, 229, 231, 249, 313, 331, 337, 338, 352, 361, 363, 367, 368, 372, 374, 376], "select_recommend": [135, 137, 138, 139], "self": [260, 318, 319, 320, 342, 343, 364], "sell": 366, "semant": [363, 374], "sens": [42, 270, 368, 371], "sent": 366, "separ": [197, 199, 235, 314, 364, 366, 374], "seq_greedy_campaign": 326, "seq_greedy_ei_campaign": [322, 323], "seq_greedy_ei_recommend": 323, "seq_greedy_recommend": 326, "sequenc": [23, 27, 34, 35, 85, 116, 137, 166, 168, 173, 254, 267, 290, 306, 370, 372], "sequenti": [137, 138, 139, 148, 149, 322, 323, 326, 343, 372], "sequential_greedi": [141, 149], "sequential_greedy_x": 363, "sequentialgreedyrecommend": [141, 323, 326, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 352, 354, 355, 356, 361, 363, 367, 372], "sequentialmetarecommend": [138, 202, 372], "sequentialstrategi": 363, "seri": [23, 30, 31, 32, 37, 94, 97, 98, 100, 108, 111, 336, 363, 368], "serial": [138, 173, 188, 255, 344, 360, 362, 363, 364, 368, 372, 379], "serializ": [361, 368, 372], "serialize_datafram": 374, "serialized_df": 190, "serializetostr": 344, "serialmixin": [16, 23, 26, 30, 62, 80, 95, 120, 135, 166, 168, 173, 207, 216, 241, 246, 295, 363], "serv": [34, 35, 199, 290, 358, 359, 367, 368, 371], "servic": 366, "session": [209, 369, 374], "set": [32, 40, 42, 111, 139, 166, 168, 173, 194, 197, 220, 253, 285, 289, 292, 308, 310, 311, 324, 325, 326, 327, 329, 331, 336, 338, 345, 347, 352, 361, 363, 367, 368, 369, 371, 372, 373, 374, 375, 378], "set_size_inch": [323, 324, 326, 327], "set_x_pend": 18, "setpoint": 108, "setup": [194, 368, 375], "sever": [113, 133, 323, 325, 328, 331, 344, 347, 359, 361, 363, 364, 368, 369, 370, 371, 373, 374, 375, 378], "shall": [137, 286, 366, 370], "shape": [166, 172, 207, 209, 213, 225, 227, 229, 231, 244, 248, 250, 373], "share": [363, 366, 378], "shield": [223, 289, 325, 361, 371], "shift": [7, 14, 358], "shifted_hartmann": 358, "ship": [314, 369, 374], "short": 364, "shortcut": [173, 373, 374], "shorten": [363, 364], "should": [23, 38, 98, 111, 162, 163, 166, 173, 186, 197, 243, 286, 288, 289, 290, 294, 295, 296, 304, 308, 326, 336, 338, 339, 344, 350, 352, 356, 361, 363, 364, 367, 368, 373, 375, 378], "show": [322, 323, 324, 325, 326, 327, 328, 330, 331, 336, 337, 338, 342, 343, 344, 345, 350, 352, 354, 355, 356, 358, 359, 368, 373], "showcas": 372, "shown": [359, 363], "side": [27, 34, 35, 249, 368], "sigma": [124, 125, 126, 127, 248, 347, 365], "signal": [50, 370], "signatur": [238, 260, 342, 343, 363, 364, 368, 374], "significantli": [173, 358, 359], "silenc": 364, "silent": [363, 368], "similar": [138, 362, 368, 369, 371, 372, 373, 374], "similarli": [326, 350, 371], "simpl": [13, 259, 325, 350, 361, 363, 372, 375, 377], "simpler": [364, 374], "simplest": 373, "simplex": [173, 379], "simplex_paramet": [173, 373], "simpli": [270, 364, 368, 371, 372, 373, 374, 377], "simplifi": [323, 364], "simul": [56, 273, 286, 338, 339, 343, 361, 363, 379], "simulate_experi": [197, 199, 375], "simulate_scenario": [199, 322, 323, 324, 325, 326, 327, 328, 358, 359, 375], "simulate_transfer_learn": [358, 375], "simultan": 370, "sinc": [42, 168, 208, 224, 228, 230, 324, 333, 334, 339, 345, 349, 351, 354, 355, 356, 358, 364, 367, 368, 370, 371, 373, 374, 375], "singl": [23, 30, 38, 77, 90, 194, 241, 246, 303, 313, 316, 322, 323, 324, 325, 326, 327, 337, 347, 350, 355, 356, 358, 359, 361, 363, 368, 370, 371, 373, 378, 379], "singledispatch": 297, "singletargetobject": [23, 241, 246, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 363, 379], "site": [355, 356], "situat": [336, 338, 339, 362, 364, 368, 370, 371, 374, 378], "six": 194, "size": [62, 65, 67, 69, 70, 71, 137, 139, 168, 172, 173, 255, 299, 344, 349, 350, 351, 352, 358, 359, 367, 374, 375], "sk": 344, "skeleton": 363, "skicit": 363, "skin": 375, "skip": [170, 175, 363, 367], "skl2onnx": 344, "sklearn": [157, 302, 341, 344, 360], "sklearnclusteringrecommend": [154, 155, 156], "slightli": [192, 325, 375], "slot": 363, "slow": [336, 338, 340, 373], "slowest": 363, "small": [34, 35, 256, 257, 333, 358, 359, 363, 371], "smaller": [23, 367], "smallest": [166, 373], "smile": [111, 275, 276, 277, 278, 279, 280, 281, 361, 371], "smiles_list": [278, 279, 280, 281], "smoke": 363, "smoke_test": [308, 322, 323, 324, 325, 326, 327, 328, 334, 336, 337, 339, 340, 358, 359], "smooth": [65, 67, 127], "smoothedboxprior": 363, "smoother": 65, "sn": [322, 323, 324, 325, 326, 327, 358, 359], "so": [194, 208, 322, 327, 349, 351, 352, 361, 362, 368, 369, 370, 371, 372, 374, 375, 377, 378], "softwar": [361, 366], "sola": 365, "sole": 366, "solut": [367, 373, 374], "solv": [208, 337, 338], "solv1": 339, "solv1_mordred_aatsc1v": 339, "solv1_mordred_nhetero": 339, "solv2": 339, "solv3": 339, "solv_mordred_natom": 337, "solv_rdkit_maxabsestateindex": 338, "solv_rdkit_maxpartialcharg": 338, "solvent": [324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 342, 343, 345, 355, 356, 361, 368, 371], "solvent1": 339, "solvent2": 339, "solvent3": 339, "solvent_1": 368, "solvent_2": 368, "solvent_3": 368, "solvent_encoding1": 368, "solvent_encoding2": 368, "solvent_mordred_enc": 368, "solvent_rdkit_enc": 368, "solvent_rdkit_maxabsestateindex": [336, 340], "solvent_rdkit_maxpartialcharg": [336, 340], "solver": 375, "some": [38, 290, 302, 322, 323, 324, 325, 326, 327, 328, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 354, 359, 368, 369, 371, 372, 374, 375, 376], "someth": 356, "sometim": 368, "somewher": 367, "soon": [361, 367, 372], "sophist": [363, 374], "sourabh": 365, "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 80, 81, 83, 85, 86, 88, 90, 93, 94, 95, 97, 98, 100, 102, 103, 104, 105, 107, 108, 111, 113, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 170, 172, 173, 174, 175, 177, 178, 181, 182, 184, 185, 186, 188, 190, 191, 194, 197, 199, 202, 203, 204, 207, 209, 210, 213, 215, 216, 217, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 241, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 304, 305, 306, 308, 310, 311, 313, 361, 363, 366], "space": [17, 18, 23, 26, 27, 28, 34, 35, 37, 40, 51, 52, 55, 130, 140, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 169, 170, 173, 175, 176, 194, 197, 199, 207, 209, 213, 225, 227, 229, 231, 254, 290, 323, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 348, 349, 351, 354, 359, 360, 363, 365, 367, 368, 369, 371, 374, 375, 379], "span": [166, 168, 173, 254], "spec": [170, 175, 185], "special": [139, 361, 362, 366, 378], "specif": [60, 113, 118, 157, 168, 170, 181, 197, 210, 233, 235, 261, 339, 351, 361, 364, 367, 368, 371, 372, 374, 375, 376, 377], "specifi": [23, 38, 59, 100, 111, 113, 130, 139, 166, 168, 173, 184, 185, 194, 197, 248, 249, 250, 266, 278, 285, 308, 325, 326, 331, 333, 344, 345, 347, 350, 355, 356, 358, 361, 363, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378], "speed": [173, 336, 338, 340, 358, 359, 373], "speed_fast": 373, "speed_norm": 373, "speed_slow": 373, "spell": 364, "spellcheck": 363, "sphinx": [224, 228, 230, 363, 364], "split": 141, "spread": 377, "sqrt": 368, "squar": [323, 326, 328, 350, 368], "squash": 364, "stabil": 369, "stabl": [60, 118], "stack": 342, "stackingregressor": 342, "stackingregressorsurrog": 342, "stage": [367, 368, 374], "stand": 363, "standard": [162, 235, 278, 344, 371], "start": [194, 362, 363, 371, 372, 374, 375], "startup": 363, "stat": 252, "state": [139, 326, 350, 363, 366, 367], "statement": [291, 351, 361, 366], "static": [168, 173, 361, 364], "statist": [255, 359, 361, 369], "statu": 367, "std_threshold": 235, "step": [170, 175, 194, 343, 361, 364, 367, 370, 374, 376], "sterl": 365, "steven": 325, "still": [113, 173, 285, 368, 369, 371], "stop": 364, "stoppag": 366, "storag": [367, 369, 374], "store": [18, 95, 233, 235, 241, 323, 361, 363, 367, 373], "str": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 86, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 147, 149, 154, 155, 156, 157, 162, 163, 166, 168, 172, 173, 184, 188, 197, 199, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 248, 249, 250, 252, 255, 260, 261, 266, 271, 275, 276, 277, 278, 279, 280, 281, 283, 285, 288, 289, 291, 295, 299, 305, 308, 345, 355, 356, 358, 359], "straightforward": 377, "strategi": [23, 149, 168, 192, 363], "stream": 265, "streamingsequentialmetarecommend": [137, 203, 372], "streamingsequentialstrategi": 363, "streamlin": 364, "streamlit": [361, 363], "strictli": [345, 355, 356], "stride": 333, "string": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 110, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 271, 276, 277, 278, 279, 280, 281, 283, 288, 295, 344, 354, 363, 367, 368, 371, 377, 379], "strip": [194, 327, 375], "strongli": 367, "strtobool": 369, "structur": [83, 132, 184, 361, 362, 363, 367, 371, 374], "studi": [133, 361, 372], "style": [77, 358, 363, 364], "sub": [157, 363, 374], "subclass": [59, 162, 163, 184, 261, 263, 270, 363, 364, 372, 374], "subfold": 369, "subject": 366, "sublicens": 366, "submiss": [363, 366], "submit": [18, 252, 254, 361, 364, 366], "submodul": 375, "subpackag": [363, 364], "subselectioncondit": [337, 338, 363, 379], "subsequ": [168, 173, 277, 366, 367, 374], "subset": [111, 264, 313, 367, 368], "subspac": [18, 141, 149, 165, 166, 168, 171, 173, 326, 333, 352, 363, 372, 374, 379], "subspace_json": 374, "subspacecontinu": [168, 363, 373], "subspacediscret": [166, 168, 172, 363, 373, 374], "substanc": [105, 111, 325, 330, 363, 368, 371], "substance_12": 368, "substance_3": 368, "substance_43": 368, "substance_data": 363, "substance_encod": 325, "substanceencod": [111, 336, 337, 338, 339, 340], "substanceparamet": [324, 325, 327, 330, 331, 336, 337, 338, 339, 340, 342, 343, 345, 355, 356, 361, 363, 368, 369, 373, 379], "substanti": 111, "substrat": 378, "subtyp": 374, "success": [313, 374], "suffic": 364, "suffici": [373, 374], "suit": 364, "suitabl": [157, 173, 194, 271, 364, 367, 371, 375, 376], "sum": [44, 73, 173, 323, 326, 328, 335, 336, 337, 338, 339, 350, 360, 368, 370, 373], "sum_": [368, 370], "sum_constraint": 339, "sum_constraint_1": 340, "sum_constraint_2": 340, "sum_i": [34, 35], "sum_of_squar": [323, 326, 328, 350], "sum_toler": 339, "summar": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 241, 246], "summari": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 241, 246, 363, 364], "super": 343, "supersed": 366, "support": [138, 199, 207, 209, 213, 225, 227, 229, 231, 302, 342, 343, 344, 363, 364, 366, 368, 369, 371, 372, 373, 375, 376, 378], "supports_transfer_learn": [207, 209, 213, 225, 227, 229, 231, 376], "suppos": [254, 368], "sure": [361, 364, 375], "surrog": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 147, 149, 154, 155, 156, 157, 209, 213, 215, 216, 220, 223, 225, 227, 229, 231, 360, 361, 363, 365, 368, 371, 372, 378, 379], "surrogate_model": [147, 149, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 355, 356], "svg": 308, "switch": [38, 136, 138, 139, 235, 337, 361, 363, 368, 372], "switch1": 337, "switch1_on": 337, "switch2": 337, "switch_1": 368, "switch_2": 368, "switch_aft": [139, 331, 336, 337, 338, 339, 340, 347, 354, 355, 356, 372], "sy": [322, 325, 358, 359, 362], "symmetri": 368, "syntax": [361, 363], "synthet": [272, 273, 333, 334, 358, 359], "synthetictestfunct": 273, "system": [325, 361, 366, 369, 375], "t": [207, 209, 210, 213, 225, 227, 229, 231, 234, 271, 324, 325, 327, 330, 331, 358, 359, 374], "t1": 374, "t2": 374, "t3": 374, "t_1": 370, "t_2": 370, "t_3": 370, "t_i": 370, "tabl": [291, 363, 368], "tag": [361, 363, 374], "tailor": 367, "take": [65, 94, 108, 113, 173, 363, 367, 368, 370, 371, 372], "taken": [137, 367, 370], "target": [23, 77, 80, 81, 85, 89, 90, 162, 173, 192, 194, 195, 210, 227, 235, 243, 244, 246, 285, 304, 305, 309, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 363, 367, 369, 374, 375, 379], "target_1": [328, 337, 338, 339, 340, 347, 370, 377], "target_1_cumbest": 328, "target_1_iterbest": 328, "target_1_measur": 328, "target_2": [328, 347, 370, 377], "target_2_cumbest": 328, "target_2_iterbest": 328, "target_2_measur": 328, "target_3": [347, 370], "target_3a": 377, "target_3b": 377, "target_cumbest": [322, 323, 326, 358, 359], "target_max": 367, "target_transform": 347, "target_valu": [333, 334, 349, 350, 351, 352], "targetmod": [246, 374, 377], "targetnam": 194, "targettransform": [246, 377], "task": [98, 168, 199, 207, 209, 213, 225, 227, 229, 231, 241, 246, 363, 367, 372, 374, 375], "task_idx": [168, 363], "task_param": [358, 359, 375], "task_paramet": 374, "task_parameter_json": 374, "task_parameter_reconstruct": 374, "taskparamet": [178, 358, 359, 363, 374, 375, 379], "technic": [173, 375], "techniqu": [157, 372], "telemetri": [363, 365, 379], "tell": 253, "temp": [336, 338, 365], "temp_c": [324, 325, 327], "temperatur": [324, 327, 330, 331, 336, 338, 342, 343, 344, 345, 354, 368, 371, 373], "temperature_resolut": 336, "temporari": [47, 76, 82, 131, 201, 233, 235, 311, 363, 369, 374], "temporarili": 363, "tensor": [18, 27, 34, 35, 162, 163, 168, 173, 207, 209, 213, 225, 227, 229, 231, 234, 292, 295, 315, 342, 343, 363], "term": [68, 192, 364, 366, 367, 373, 374, 375, 378], "termin": [362, 366], "terminologi": 379, "tert": [324, 325, 327, 330, 331], "test": [173, 194, 209, 272, 273, 276, 285, 358, 359, 361, 362, 363, 364, 367], "test_funct": [273, 322, 333, 334, 349, 350, 351, 352, 358, 359], "test_scenario": [324, 327], "testabl": [56, 194], "testfunct": [322, 333, 334, 349, 351, 352], "testfunctionclass": [322, 333, 334, 349, 351, 352], "text": [344, 366, 368, 369, 370], "th": 368, "than": [23, 46, 55, 108, 137, 138, 139, 166, 168, 178, 270, 325, 338, 339, 368, 369, 371, 374], "thei": [113, 133, 142, 234, 249, 288, 331, 340, 363, 364, 367, 368, 371, 372, 373, 374, 377], "them": [26, 28, 233, 308, 326, 331, 339, 361, 362, 364, 368, 369, 371, 372, 374, 378], "theme": [308, 363], "theori": 366, "therebi": 173, "therefor": [139, 331, 362, 367, 374], "thereof": 366, "thf": 368, "thi": [23, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 137, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 166, 168, 173, 192, 197, 199, 208, 224, 228, 230, 234, 255, 267, 270, 277, 285, 286, 287, 289, 290, 291, 308, 322, 342, 343, 344, 345, 350, 354, 355, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378], "think": 371, "third": [347, 366], "those": [113, 139, 141, 192, 313, 331, 362, 366, 368, 375], "though": 378, "three": [325, 326, 339, 347, 361, 367, 368, 370, 372, 373, 378], "threshold": [32, 100, 111, 235, 289, 333, 338, 339, 340, 363, 368, 371], "thresholdcondit": [43, 44, 333, 338, 339, 340, 379], "through": [168, 248, 285, 343, 345, 347, 349, 350, 351, 352, 363, 364, 366, 368, 374], "throughout": 139, "throw": [277, 368, 371], "thrown": [194, 327, 355, 362, 370, 375], "thu": [149, 224, 228, 230, 322, 323, 324, 325, 326, 328, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 362, 364, 367, 371, 374, 375], "time": [255, 334, 361, 363, 367, 368, 371, 374], "timeout": [363, 369], "titl": 366, "tl": 358, "to_botorch": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 27, 34, 35], "to_dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295], "to_factori": [62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75], "to_fram": 339, "to_gpytorch": [62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 120, 122, 123, 124, 125, 126, 127], "to_json": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 295, 342, 343, 344, 345, 354, 367, 374], "to_list": [333, 334, 349, 350, 351, 352], "to_markdown": 367, "to_ndarrai": 295, "to_object": [241, 246, 370], "to_tensor": [295, 344], "to_tupl": 295, "togeth": [26, 28, 331, 352, 361], "toler": [23, 32, 34, 35, 108, 173, 254, 290, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 351, 352, 354, 355, 356, 361, 363, 368, 371], "tolist": 333, "toluen": 371, "toml": 363, "too": 333, "tool": [224, 228, 230, 274, 363, 374], "toolbox": 361, "top": [363, 364], "topic": 367, "torch": [62, 65, 67, 69, 70, 71, 295, 341, 342, 343, 344, 360, 363], "toronto": 365, "tort": 366, "total": [139, 313, 373], "toward": [7, 14, 285, 368], "tox": [355, 356, 361, 363, 364], "tracebackexcept": 362, "track": [166, 173, 366, 373], "trade": [7, 14, 366], "trademark": 366, "tradit": [325, 361], "train": [130, 137, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 199, 207, 208, 209, 213, 225, 227, 229, 231, 235, 341, 343, 358, 359, 363, 375], "train_i": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 207, 209, 213, 225, 227, 229, 231, 342, 343, 344], "train_x": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 130, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 207, 209, 213, 225, 227, 229, 231, 342, 343, 344], "training_funct": 359, "trajectori": [192, 375], "transfer": [198, 199, 207, 209, 213, 225, 227, 229, 231, 358, 360, 361, 363, 366, 371, 376, 379], "transform": [80, 85, 90, 94, 95, 97, 98, 100, 108, 111, 162, 163, 166, 168, 173, 233, 241, 244, 246, 292, 295, 296, 328, 336, 337, 338, 339, 340, 354, 363, 366, 371, 377], "transform_rep_exp2comp": [94, 97, 98, 100, 108, 111], "translat": [351, 366, 371], "transmiss": 374, "transmit": 255, "treat": [111, 325, 361, 368, 371, 377], "tremend": 325, "tri": 373, "triangl": 250, "triangular": [244, 250, 347, 377], "tricyclohexylphosphin": [324, 325, 327], "trigger": [137, 345, 364, 370, 374], "trivial": [216, 227, 370, 371], "true": [10, 11, 23, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 173, 210, 213, 249, 254, 262, 263, 270, 271, 276, 280, 281, 290, 325, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 355, 356, 358, 359, 367, 368, 369, 371, 374], "truncat": [361, 369], "trust": [344, 369], "truth": 271, "try": [285, 324, 325, 327, 342, 343, 344, 345, 356, 362, 363], "tune": 361, "tupl": [23, 27, 31, 34, 35, 62, 65, 67, 69, 70, 71, 73, 74, 80, 85, 90, 94, 97, 98, 100, 108, 111, 162, 163, 166, 168, 172, 173, 194, 207, 209, 213, 225, 227, 229, 231, 234, 267, 285, 295, 299, 326, 328, 342, 343, 350, 358, 375], "turn": [48, 273, 299, 361, 362, 363, 368, 369], "twice": [339, 370], "two": [40, 86, 139, 149, 192, 259, 304, 313, 324, 326, 327, 328, 331, 347, 350, 352, 358, 359, 361, 363, 367, 368, 370, 371, 372, 373, 374, 375, 377], "twophasemetarecommend": [132, 204, 323, 324, 326, 327, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 352, 354, 355, 356, 361, 372], "twophasestrategi": 363, "type": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 81, 83, 85, 86, 90, 93, 94, 95, 97, 98, 100, 107, 108, 110, 111, 113, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 166, 168, 169, 170, 173, 174, 175, 177, 178, 181, 182, 184, 185, 186, 188, 190, 191, 194, 197, 199, 202, 203, 204, 207, 209, 210, 213, 216, 217, 221, 225, 227, 229, 231, 233, 234, 235, 237, 238, 241, 246, 248, 249, 250, 252, 253, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 291, 292, 295, 296, 297, 299, 301, 302, 304, 305, 306, 308, 313, 315, 318, 319, 320, 325, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 355, 356, 361, 363, 364, 366, 370, 371, 372, 373, 379], "typeerror": [23, 194, 209, 285], "typevar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 80, 85, 90, 93, 94, 95, 97, 98, 100, 107, 108, 111, 113, 120, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 166, 168, 173, 184, 185, 188, 207, 209, 213, 216, 225, 227, 229, 231, 241, 246, 263, 264, 265, 295], "typic": [34, 35, 325, 361, 367, 371, 374, 375], "typo": [363, 364], "u": [324, 325, 327, 359, 361, 368, 370], "ucb": [7, 331, 363, 374], "ultim": 364, "ultra": [355, 356], "un": [162, 163, 363], "unabl": 344, "unavail": 363, "unbound": 295, "uncaught": 363, "uncertainti": 331, "uncorrel": 289, "under": [28, 37, 38, 39, 40, 41, 42, 43, 44, 255, 339, 340, 361, 362, 366, 371], "underflow": 57, "underli": [23, 40, 361, 367, 374], "underscor": 363, "undesir": [368, 371], "undo": 362, "unequ": 340, "unevenli": 371, "unhandl": 363, "uniform": 286, "uniformli": 313, "uniniti": 270, "uninstal": [58, 361], "unintend": 363, "union": [86, 100, 111, 184, 194, 197, 248, 249, 250, 255, 278, 283, 292, 296, 305, 352, 366, 373], "uniqu": [41, 113, 339, 363, 371], "unit": [162, 172, 299], "unknown": [313, 363, 376], "unless": [361, 364, 366, 369, 371, 374], "unlik": [10, 11, 373], "unmaintain": [363, 371], "unmeasur": [194, 327, 375], "unnecessari": [363, 367], "unreach": 363, "unrealist": 375, "unrecogn": 285, "unspecifi": 374, "unsqueez": 343, "unstructur": [186, 374], "unstructure_bas": 184, "until": [137, 194, 361, 375], "untransform": [162, 163, 233], "unveil": 359, "unwant": [26, 28], "unweight": 342, "up": [34, 35, 173, 194, 324, 325, 327, 329, 333, 334, 336, 338, 339, 352, 358, 359, 361, 368], "updat": [325, 330, 363, 364], "upgrad": 363, "upon": [141, 216, 362, 363, 364, 368, 373, 376, 378], "upper": [7, 14, 127, 168, 173, 248, 249, 250, 295, 331, 347, 358, 359, 377], "upper_bound": [336, 337, 338, 339, 340, 347, 354, 373], "upperconfidencebound": 374, "upstream": 364, "url": 369, "us": [23, 26, 27, 28, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 50, 52, 65, 85, 86, 100, 108, 111, 113, 132, 137, 138, 139, 141, 147, 149, 162, 163, 166, 168, 173, 185, 194, 197, 207, 209, 213, 225, 227, 229, 231, 233, 244, 254, 255, 258, 267, 277, 285, 286, 290, 297, 301, 302, 308, 313, 315, 333, 334, 341, 354, 355, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 377, 378, 379], "usa": 365, "usabl": [270, 362, 363, 371, 374], "usag": [298, 361, 363, 368, 369, 372], "user": [37, 38, 50, 53, 100, 103, 173, 238, 252, 286, 290, 330, 331, 336, 347, 355, 356, 361, 363, 364, 367, 368, 369, 370, 371, 373, 374, 375, 378], "userguid": 251, "usernam": [252, 363, 369], "usort": 363, "usual": [194, 324, 325, 327, 355, 362, 371], "util": [166, 173, 254, 258, 259, 295, 322, 325, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 351, 352, 358, 359, 361, 363, 370, 371, 372, 374, 376], "uv": 363, "val": [83, 132, 271, 358], "val_from_param1": 42, "val_from_param2": 42, "val_loss": 345, "valid": [23, 31, 37, 113, 168, 170, 173, 175, 209, 276, 279, 290, 336, 353, 355, 360, 362, 363, 364, 367, 368], "validate_compat": 209, "validate_config": [23, 356, 363, 367], "valu": [7, 14, 18, 23, 27, 30, 31, 32, 34, 35, 38, 40, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 85, 86, 90, 94, 97, 98, 100, 102, 103, 105, 108, 111, 113, 115, 116, 117, 154, 155, 156, 157, 162, 163, 168, 173, 174, 192, 194, 210, 227, 243, 248, 249, 250, 255, 260, 264, 271, 283, 285, 286, 288, 290, 291, 295, 297, 304, 305, 306, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 363, 364, 367, 368, 369, 370, 371, 375, 377, 378, 379], "valuabl": 372, "valueerror": [23, 46, 86, 113, 116, 117, 166, 168, 173, 177, 194, 207, 209, 213, 225, 227, 229, 231, 233, 235, 238, 269, 271, 279, 283, 285, 286, 290, 313, 326, 345, 352, 362], "var": [342, 343, 379], "vari": [23, 173, 325, 370], "variabl": [26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 162, 163, 207, 209, 213, 225, 227, 229, 231, 241, 253, 255, 303, 308, 316, 351, 361, 363, 364, 368, 371, 372, 374], "varianc": [7, 14, 64, 162, 163, 227, 287, 342, 343, 363], "variance_initial_valu": 64, "variance_prior": 64, "variant": [331, 358, 378], "varieti": [351, 364, 374, 375], "variou": [295, 339, 348, 363, 372], "varucb": 363, "vector": [344, 365], "vendor": 371, "verbal": 366, "verbos": 345, "veri": [336, 338, 347, 371], "verifi": [270, 326, 333, 336, 337, 338, 339, 340, 352, 354, 361, 364], "versa": 358, "versatil": 372, "version": [94, 97, 98, 100, 108, 111, 252, 273, 302, 355, 356, 358, 359, 361, 362, 363, 364, 366, 374], "via": [22, 23, 139, 159, 223, 254, 261, 285, 290, 327, 333, 334, 344, 349, 351, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378], "via_init": 374, "via_json": 374, "viabl": [55, 347], "vice": 358, "view": [166, 173, 373], "violat": [28, 37, 38, 39, 40, 41, 42, 43, 44], "virtual": 364, "visibl": 363, "visual": [325, 358, 359, 377], "vpn": [361, 369], "vulner": [363, 364], "w_i": 370, "wa": [58, 113, 139, 173, 283, 285, 325, 363, 364, 366, 369, 371, 374, 378], "wai": [168, 348, 350, 358, 361, 369, 371, 373, 374, 375, 377, 378], "want": [35, 37, 326, 331, 336, 339, 350, 352, 359, 361, 364, 368, 369, 371, 372, 374, 377, 378], "warn": [267, 325, 336, 338, 340, 351, 352, 355, 356, 363, 364], "warranti": [361, 366], "was_measur": [336, 337, 338, 339, 340, 347, 354, 373], "was_recommend": [336, 337, 338, 339, 340, 347, 354, 373], "water": [336, 337, 338, 339, 340, 368, 371], "we": [18, 192, 224, 228, 230, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 364, 367, 368, 370, 371, 373, 374, 377, 378, 379], "web": 364, "weber": 365, "weight": [77, 85, 86, 306, 328, 347, 370, 374], "weight_kdalton": 371, "welcom": 364, "well": [252, 308, 331, 364, 367, 368, 371, 375], "were": [141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 173, 285, 327, 331, 359, 362, 368, 369, 371, 373], "what": [113, 137, 168, 192, 285, 344, 347, 356, 364, 367, 371, 379], "whatsnew": 259, "when": [23, 38, 108, 137, 139, 147, 149, 173, 207, 209, 213, 225, 227, 229, 231, 238, 270, 285, 313, 328, 331, 336, 337, 340, 345, 347, 361, 363, 364, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378], "whenev": [18, 137, 285, 374], "where": [18, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 192, 199, 207, 209, 213, 225, 227, 229, 231, 285, 324, 325, 327, 331, 336, 338, 339, 361, 362, 364, 366, 367, 368, 370, 371, 373, 374, 375, 377], "wherea": 374, "wherev": 366, "whether": [18, 26, 27, 28, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 95, 97, 98, 100, 107, 108, 111, 166, 173, 207, 209, 213, 225, 227, 229, 231, 253, 278, 286, 290, 295, 326, 363, 366, 367, 369, 372, 377], "which": [23, 30, 31, 32, 98, 113, 130, 133, 139, 141, 144, 147, 149, 152, 154, 155, 156, 157, 159, 160, 168, 173, 197, 199, 207, 209, 213, 225, 227, 229, 231, 235, 254, 255, 270, 285, 286, 289, 290, 304, 305, 308, 325, 326, 331, 334, 339, 351, 352, 356, 358, 359, 361, 362, 363, 364, 366, 367, 368, 371, 373, 374, 375, 377, 378], "while": [168, 170, 175, 347, 359, 362, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378], "whilst": 285, "whole": 366, "whom": 366, "whose": [86, 113, 168, 260, 264, 313, 364], "wide": 375, "wider": 377, "willing": 367, "window": [363, 369], "wise": 306, "wish": 374, "within": [23, 93, 94, 95, 97, 98, 100, 107, 108, 111, 254, 290, 366, 368, 371, 376, 378, 379], "without": [138, 355, 356, 358, 359, 361, 363, 366, 367, 368, 369, 371], "work": [18, 232, 339, 347, 350, 354, 356, 361, 363, 364, 365, 366, 368, 369, 370, 372, 374], "workaround": [362, 363], "workflow": [342, 343, 344, 367, 374], "world": [361, 367], "worldwid": 366, "worst": [194, 197, 327, 375], "would": [41, 57, 113, 192, 194, 199, 208, 361, 364, 368, 369, 371, 372, 373, 374, 375, 378], "wrap": [23, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 210, 213, 217, 234, 273, 333, 334, 349, 351, 361, 363, 370], "wrapped_funct": [322, 333, 334, 349, 351, 352], "wrapper": [1, 17, 197, 199, 209, 267, 272, 333, 334, 361, 372], "write": [361, 362, 366, 374], "written": [349, 351, 352, 364, 366], "wrong": [356, 363], "www": [361, 366], "x": [18, 81, 162, 163, 194, 217, 267, 304, 322, 323, 324, 325, 326, 327, 328, 336, 337, 338, 339, 340, 347, 350, 354, 358, 359, 361, 363, 373], "x0": 373, "x1": 373, "x2": 373, "x_": [322, 323, 326, 328, 333, 334, 349, 350, 351, 352], "x_1": [333, 334, 349, 350, 351, 352, 368], "x_2": [333, 334, 349, 350, 351, 352, 368], "x_3": [333, 334, 349, 350, 351, 352, 368], "x_4": [333, 334, 349, 350, 351, 352], "x_5": 352, "x_6": 352, "x_i": [34, 35, 368], "x_pend": 18, "xlsx": [324, 325, 327], "xpho": [324, 325, 327], "xylen": [324, 325, 327, 330, 331], "y": [162, 163, 223, 271, 289, 304, 322, 323, 324, 325, 326, 327, 328, 344, 347, 350, 358, 359, 361], "ye": 271, "yet": [18, 363, 372], "yield": [65, 324, 325, 327, 330, 331, 336, 342, 343, 344, 345, 352, 354, 355, 356, 361, 370, 374], "yield_cumbest": [324, 325, 327], "yml": 363, "you": [35, 37, 325, 331, 333, 345, 351, 352, 355, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377], "your": [325, 326, 352, 361, 362, 363, 364, 366, 367, 369, 371, 374, 376, 377], "your_branch_nam": 364, "z": 361, "zero": [7, 14, 287], "zero_grad": 343, "zip": 343, "\u00b5fmt": 363, "\u0161o\u0161i\u0107": [361, 365]}, "titles": ["baybe", "baybe.acquisition", "baybe.acquisition.acqfs", "ExpectedImprovement", "LogExpectedImprovement", "PosteriorMean", "ProbabilityOfImprovement", "UpperConfidenceBound", "qExpectedImprovement", "qLogExpectedImprovement", "qLogNoisyExpectedImprovement", "qNoisyExpectedImprovement", "qProbabilityOfImprovement", "qSimpleRegret", "qUpperConfidenceBound", "baybe.acquisition.base", "AcquisitionFunction", "baybe.acquisition.partial", "PartialAcquisitionFunction", "baybe.acquisition.utils", "baybe.acquisition.utils.convert_acqf", "baybe.acquisition.utils.str_to_acqf", "baybe.campaign", "Campaign", "baybe.constraints", "baybe.constraints.base", "Constraint", "ContinuousConstraint", "DiscreteConstraint", "baybe.constraints.conditions", "Condition", "SubSelectionCondition", "ThresholdCondition", "baybe.constraints.continuous", "ContinuousLinearEqualityConstraint", "ContinuousLinearInequalityConstraint", "baybe.constraints.discrete", "DiscreteCustomConstraint", "DiscreteDependenciesConstraint", "DiscreteExcludeConstraint", "DiscreteLinkedParametersConstraint", "DiscreteNoLabelDuplicatesConstraint", "DiscretePermutationInvarianceConstraint", "DiscreteProductConstraint", "DiscreteSumConstraint", "baybe.constraints.validation", "baybe.constraints.validation.validate_constraints", "baybe.deprecation", "baybe.deprecation.compatibilize_config", "baybe.exceptions", "baybe.exceptions.DeprecationError", "baybe.exceptions.EmptySearchSpaceError", "baybe.exceptions.IncompatibleSearchSpaceError", "baybe.exceptions.NoMCAcquisitionFunctionError", "baybe.exceptions.NoRecommendersLeftError", "baybe.exceptions.NotEnoughPointsLeftError", "baybe.exceptions.NothingToSimulateError", "baybe.exceptions.NumericalUnderflowError", "baybe.exceptions.OptionalImportError", "baybe.exceptions.UnidentifiedSubclassError", "baybe.kernels", "baybe.kernels.base", "Kernel", "baybe.kernels.basic", "LinearKernel", "MaternKernel", "PeriodicKernel", "PiecewisePolynomialKernel", "PolynomialKernel", "RBFKernel", "RFFKernel", "RQKernel", "baybe.kernels.composite", "AdditiveKernel", "ProductKernel", "ScaleKernel", "baybe.objective", "baybe.objective.Objective", "baybe.objectives", "baybe.objectives.base", "Objective", "baybe.objectives.base.to_objective", "baybe.objectives.deprecation", "baybe.objectives.deprecation.structure_objective", "baybe.objectives.desirability", "DesirabilityObjective", "baybe.objectives.desirability.scalarize", "baybe.objectives.enum", "Scalarizer", "baybe.objectives.single", "SingleTargetObjective", "baybe.parameters", "baybe.parameters.base", "ContinuousParameter", "DiscreteParameter", "Parameter", "baybe.parameters.categorical", "CategoricalParameter", "TaskParameter", "baybe.parameters.custom", "CustomDiscreteParameter", "baybe.parameters.enum", "CategoricalEncoding", "CustomEncoding", "ParameterEncoding", "SubstanceEncoding", "baybe.parameters.numerical", "NumericalContinuousParameter", "NumericalDiscreteParameter", "baybe.parameters.substance", "baybe.parameters.substance.Smiles", "SubstanceParameter", "baybe.parameters.utils", "baybe.parameters.utils.get_parameters_from_dataframe", "baybe.parameters.validation", "baybe.parameters.validation.validate_decorrelation", "baybe.parameters.validation.validate_is_finite", "baybe.parameters.validation.validate_unique_values", "baybe.priors", "baybe.priors.base", "Prior", "baybe.priors.basic", "GammaPrior", "HalfCauchyPrior", "HalfNormalPrior", "LogNormalPrior", "NormalPrior", "SmoothedBoxPrior", "baybe.recommenders", "baybe.recommenders.base", "RecommenderProtocol", "baybe.recommenders.deprecation", "baybe.recommenders.deprecation.structure_recommender_protocol", "baybe.recommenders.meta", "baybe.recommenders.meta.base", "MetaRecommender", "baybe.recommenders.meta.sequential", "SequentialMetaRecommender", "StreamingSequentialMetaRecommender", "TwoPhaseMetaRecommender", "baybe.recommenders.naive", "NaiveHybridSpaceRecommender", "baybe.recommenders.pure", "baybe.recommenders.pure.base", "PureRecommender", "baybe.recommenders.pure.bayesian", "baybe.recommenders.pure.bayesian.base", "BayesianRecommender", "baybe.recommenders.pure.bayesian.sequential_greedy", "SequentialGreedyRecommender", "baybe.recommenders.pure.nonpredictive", "baybe.recommenders.pure.nonpredictive.base", "NonPredictiveRecommender", "baybe.recommenders.pure.nonpredictive.clustering", "GaussianMixtureClusteringRecommender", "KMeansClusteringRecommender", "PAMClusteringRecommender", "SKLearnClusteringRecommender", "baybe.recommenders.pure.nonpredictive.sampling", "FPSRecommender", "RandomRecommender", "baybe.scaler", "DefaultScaler", "Scaler", "baybe.searchspace", "baybe.searchspace.continuous", "SubspaceContinuous", "baybe.searchspace.core", "SearchSpace", "SearchSpaceType", "baybe.searchspace.core.validate_searchspace_from_config", "baybe.searchspace.discrete", "MemorySize", "SubspaceDiscrete", "baybe.searchspace.discrete.parameter_cartesian_prod_to_df", "baybe.searchspace.discrete.validate_simplex_subspace_from_config", "baybe.searchspace.validation", "baybe.searchspace.validation.validate_parameter_names", "baybe.searchspace.validation.validate_parameters", "baybe.serialization", "baybe.serialization.core", "baybe.serialization.core.block_deserialization_hook", "baybe.serialization.core.block_serialization_hook", "baybe.serialization.core.converter", "baybe.serialization.core.get_base_structure_hook", "baybe.serialization.core.select_constructor_hook", "baybe.serialization.core.unstructure_base", "baybe.serialization.mixin", "SerialMixin", "baybe.serialization.utils", "baybe.serialization.utils.deserialize_dataframe", "baybe.serialization.utils.serialize_dataframe", "baybe.simulation", "baybe.simulation.core", "baybe.simulation.core.simulate_experiment", "baybe.simulation.lookup", "baybe.simulation.scenarios", "baybe.simulation.scenarios.simulate_scenarios", "baybe.simulation.transfer_learning", "baybe.simulation.transfer_learning.simulate_transfer_learning", "baybe.strategies", "baybe.strategies.deprecation", "baybe.strategies.deprecation.SequentialStrategy", "baybe.strategies.deprecation.StreamingSequentialStrategy", "baybe.strategies.deprecation.TwoPhaseStrategy", "baybe.surrogates", "baybe.surrogates.base", "Surrogate", "baybe.surrogates.custom", "CustomONNXSurrogate", "baybe.surrogates.custom.register_custom_architecture", "baybe.surrogates.gaussian_process", "baybe.surrogates.gaussian_process.core", "GaussianProcessSurrogate", "baybe.surrogates.gaussian_process.kernel_factory", "KernelFactory", "PlainKernelFactory", "baybe.surrogates.gaussian_process.kernel_factory.to_kernel_factory", "baybe.surrogates.gaussian_process.presets", "baybe.surrogates.gaussian_process.presets.core", "GaussianProcessPreset", "baybe.surrogates.gaussian_process.presets.core.make_gp_from_preset", "baybe.surrogates.gaussian_process.presets.default", "DefaultKernelFactory", "baybe.surrogates.linear", "BayesianLinearSurrogate", "baybe.surrogates.naive", "MeanPredictionSurrogate", "baybe.surrogates.ngboost", "NGBoostSurrogate", "baybe.surrogates.random_forest", "RandomForestSurrogate", "baybe.surrogates.utils", "baybe.surrogates.utils.autoscale", "baybe.surrogates.utils.batchify", "baybe.surrogates.utils.catch_constant_targets", "baybe.surrogates.validation", "baybe.surrogates.validation.get_model_params_validator", "baybe.surrogates.validation.validate_custom_architecture_cls", "baybe.targets", "baybe.targets.base", "Target", "baybe.targets.enum", "TargetMode", "TargetTransformation", "baybe.targets.numerical", "NumericalTarget", "baybe.targets.transforms", "baybe.targets.transforms.bell_transform", "baybe.targets.transforms.linear_transform", "baybe.targets.transforms.triangular_transform", "baybe.telemetry", "baybe.telemetry.get_user_details", "baybe.telemetry.is_enabled", "baybe.telemetry.telemetry_record_recommended_measurement_percentage", "baybe.telemetry.telemetry_record_value", "baybe.utils", "baybe.utils.basic", "Dummy", "classproperty", "baybe.utils.basic.filter_attributes", "baybe.utils.basic.find_subclass", "baybe.utils.basic.get_baseclasses", "baybe.utils.basic.get_subclasses", "baybe.utils.basic.group_duplicate_values", "baybe.utils.basic.hilberts_factory", "baybe.utils.basic.refers_to", "baybe.utils.basic.to_tuple", "baybe.utils.boolean", "baybe.utils.boolean.check_if_in", "baybe.utils.boolean.is_abstract", "baybe.utils.boolean.strtobool", "baybe.utils.botorch_wrapper", "baybe.utils.botorch_wrapper.botorch_function_wrapper", "baybe.utils.chemistry", "baybe.utils.chemistry.get_canonical_smiles", "baybe.utils.chemistry.is_valid_smiles", "baybe.utils.chemistry.name_to_smiles", "baybe.utils.chemistry.smiles_to_fp_features", "baybe.utils.chemistry.smiles_to_molecules", "baybe.utils.chemistry.smiles_to_mordred_features", "baybe.utils.chemistry.smiles_to_rdkit_features", "baybe.utils.conversion", "baybe.utils.conversion.fraction_to_float", "baybe.utils.dataframe", "baybe.utils.dataframe.add_fake_results", "baybe.utils.dataframe.add_parameter_noise", "baybe.utils.dataframe.df_drop_single_value_columns", "baybe.utils.dataframe.df_drop_string_columns", "baybe.utils.dataframe.df_uncorrelated_features", "baybe.utils.dataframe.fuzzy_row_match", "baybe.utils.dataframe.pretty_print_df", "baybe.utils.dataframe.to_tensor", "baybe.utils.interval", "baybe.utils.interval.InfiniteIntervalError", "Interval", "baybe.utils.interval.convert_bounds", "baybe.utils.interval.use_fallback_constructor_hook", "baybe.utils.memory", "baybe.utils.memory.bytes_to_human_readable", "baybe.utils.numerical", "baybe.utils.numerical.DTypeFloatNumpy", "baybe.utils.numerical.DTypeFloatONNX", "baybe.utils.numerical.VARNAME_NUMPY_USE_SINGLE_PRECISION", "baybe.utils.numerical.closer_element", "baybe.utils.numerical.closest_element", "baybe.utils.numerical.geom_mean", "baybe.utils.plotting", "baybe.utils.plotting.create_example_plots", "baybe.utils.random", "baybe.utils.random.set_random_seed", "baybe.utils.random.temporary_seed", "baybe.utils.sampling_algorithms", "baybe.utils.sampling_algorithms.farthest_point_sampling", "baybe.utils.torch", "baybe.utils.torch.DTypeFloatTorch", "baybe.utils.torch.VARNAME_TORCH_USE_SINGLE_PRECISION", "baybe.utils.validation", "baybe.utils.validation.finite_float", "baybe.utils.validation.non_inf_float", "baybe.utils.validation.non_nan_float", "Backtesting", "Simulation loop using a BoTorch test function", "Example for full simulation loop using a custom analytical test function", "Example for full simulation loop using a table-based lookup mechanism with initial", "Example for full simulation loop using a table-based lookup mechanism", "Example for full simulation loop using a custom analytical test function in a hybrid", "Example for full simulation loop using a table-based lookup mechanism with incomplete", "Example for full simulation loop using the multi target mode for custom analytic", "Basics", "Basic example for using BayBE", "Example for using different strategies", "Constraints Continuous", "Example for constraints in a hybrid searchspace", "Example for linear constraints in a continuous searchspace", "Constraints Discrete", "Example for using custom constraints in discrete searchspaces", "Example for using dependency constraints in discrete searchspaces", "Example for using exclusion constraints in discrete searchspaces", "Example for using a mixture use case in a discrete searchspace", "Example for using exclusion constraints incorporating sums and products", "Custom Surrogates", "Example for surrogate model with a custom architecture using <code class=\"docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>", "Example for surrogate model with a custom architecture using <code class=\"docutils literal notranslate\"><span class=\"pre\">pytorch</span></code>", "Example for surrogate model with a custom pretrained model", "Example for custom parameter passing in surrogate models", "Multi Target", "Example for using the multi target mode for the objective", "Searchspaces", "Example for using a synthetic BoTorch test function in a continuous searchspace", "Example for using a custom BoTorch test function in a continuous searchspace", "Example for using a synthetic BoTorch test function in a discrete searchspace", "Example for using synthetic test functions in hybrid spaces", "Serialization", "Example for the serialization of a campaign", "Example for creating campaigns from configs", "Example for validation of a config file", "Transfer Learning", "Backtesting", "Transfer Learning", "Examples", "BayBE \u2014 A Bayesian Back End for Design of Experiments", "PyCharm vs. <code class=\"docutils literal notranslate\"><span class=\"pre\">exceptiongroup</span></code>", "Changelog", "Contributing to BayBE", "Contributors", "License", "Campaigns", "Constraints", "Environment Variables", "Objective", "Parameters", "Recommenders", "Search Spaces", "Serialization", "Simulation", "Surrogates", "Targets", "Transfer Learning", "User guide"], "titleterms": {"": 364, "0": 363, "01": 363, "02": 363, "03": 363, "04": 363, "05": 363, "06": 363, "07": 363, "08": 363, "09": 363, "1": 363, "10": 363, "11": 363, "12": 363, "13": 363, "14": 363, "15": 363, "16": 363, "17": 363, "19": 363, "2": 363, "2022": 363, "2023": 363, "2024": 363, "21": 363, "23": 363, "24": 363, "27": 363, "28": 363, "29": 363, "3": 363, "4": 363, "5": 363, "6": 363, "7": 363, "8": 363, "9": 363, "A": 361, "The": [355, 361, 362, 374, 375, 378], "abbrevi": 374, "acqf": 2, "acquisit": [1, 2, 15, 17, 19, 20, 21, 331], "acquisitionfunct": 16, "action": 378, "ad": [330, 363, 367], "add_fake_result": 285, "add_parameter_nois": 286, "addendum": 347, "addit": 372, "additivekernel": 73, "advanc": 361, "altern": 374, "analyt": [323, 326, 328], "architectur": [342, 343], "assembli": 374, "attr": 364, "automat": 374, "autoscal": 233, "avail": [331, 376], "avoid": 362, "back": 361, "backtest": [321, 358], "base": [15, 25, 61, 79, 81, 92, 119, 129, 134, 143, 146, 151, 206, 240, 324, 325, 327], "basic": [63, 121, 257, 260, 261, 262, 263, 264, 265, 266, 267, 329, 330, 367, 369, 374], "batch": 367, "batchifi": 234, "bayb": [0, 1, 2, 15, 17, 19, 20, 21, 22, 24, 25, 29, 33, 36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 72, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 89, 91, 92, 96, 99, 101, 106, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 128, 129, 131, 132, 133, 134, 136, 140, 142, 143, 145, 146, 148, 150, 151, 153, 158, 161, 164, 165, 167, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 214, 217, 218, 219, 221, 222, 224, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 330, 342, 343, 361, 364], "bayesian": [145, 146, 148, 361, 372], "bayesianlinearsurrog": 225, "bayesianrecommend": 147, "bell_transform": 248, "block_deserialization_hook": 181, "block_serialization_hook": 182, "boolean": [268, 269, 270, 271], "both": 354, "botorch": [322, 349, 350, 351], "botorch_function_wrapp": 273, "botorch_wrapp": [272, 273], "bound": [370, 373], "build": 373, "bytes_to_human_read": 299, "cach": [367, 369], "callabl": 375, "campaign": [22, 23, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 336, 337, 339, 340, 344, 345, 347, 349, 350, 351, 352, 354, 355, 367], "case": 339, "catch_constant_target": 235, "categor": 96, "categoricalencod": 102, "categoricalparamet": [97, 371], "chang": 363, "changelog": 363, "check_if_in": 269, "chemic": 361, "chemistri": [274, 275, 276, 277, 278, 279, 280, 281], "class": 364, "classproperti": 259, "clone": 361, "closer_el": 304, "closest_el": 305, "cluster": [153, 372], "code": 364, "compar": 354, "compatibilize_config": 48, "composit": 72, "condit": [29, 30, 368], "config": [355, 356, 367], "configur": [344, 345, 355, 374], "constraint": [24, 25, 26, 29, 33, 36, 45, 46, 332, 333, 334, 335, 336, 337, 338, 339, 340, 368, 369, 373], "construct": [322, 323, 324, 325, 326, 327, 328, 333, 334, 349, 350, 351, 352, 370, 373], "constructor": [373, 374], "continu": [33, 165, 332, 334, 349, 350, 368, 369, 371, 373], "continuousconstraint": 27, "continuouslinearequalityconstraint": [34, 368], "continuouslinearinequalityconstraint": [35, 368], "continuousparamet": 93, "contribut": 364, "contributor": 365, "conveni": 370, "convers": [282, 283, 370, 374], "convert": [183, 344], "convert_acqf": 20, "convert_bound": 296, "copi": 374, "core": [167, 170, 180, 181, 182, 183, 184, 185, 186, 193, 194, 212, 219, 221], "creat": [322, 323, 324, 325, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 344, 345, 347, 349, 350, 351, 354, 355, 358, 359, 367, 373], "create_example_plot": 308, "creation": [324, 325, 327, 367], "custom": [99, 208, 210, 323, 326, 328, 336, 341, 342, 343, 344, 345, 350, 376], "customdiscreteparamet": [100, 371], "customencod": 103, "customonnxsurrog": 209, "data": [324, 325, 327, 373], "datafram": [284, 285, 286, 287, 288, 289, 290, 291, 292, 373, 374, 375], "de": [354, 374], "default": [222, 373, 374], "defaultkernelfactori": 223, "defaultscal": 162, "defin": [322, 323, 326, 328, 333, 334, 347, 349, 350, 351, 352, 356, 358, 359, 361], "definit": [342, 343], "depend": [337, 361, 371], "deprec": [47, 48, 82, 83, 131, 132, 201, 202, 203, 204, 363], "deprecationerror": 50, "descript": 347, "deseri": 374, "deserialize_datafram": 190, "design": [361, 364], "desir": [84, 86], "desirabilityobject": [85, 370], "develop": 364, "df_drop_single_value_column": 287, "df_drop_string_column": 288, "df_uncorrelated_featur": 289, "dictionari": [355, 356], "differ": 331, "dimens": 352, "discret": [36, 171, 174, 175, 335, 336, 337, 338, 339, 351, 368, 371, 372, 373], "discreteconstraint": 28, "discretecustomconstraint": [37, 368], "discretedependenciesconstraint": [38, 368], "discreteexcludeconstraint": [39, 368], "discretelinkedparametersconstraint": [40, 368], "discretenolabelduplicatesconstraint": [41, 368], "discreteparamet": 94, "discretepermutationinvarianceconstraint": [42, 368], "discreteproductconstraint": [43, 368], "discretesumconstraint": [44, 368], "disk": 369, "do": 375, "docstr": 364, "document": 345, "doe": [342, 343], "dtypefloatnumpi": 301, "dtypefloatonnx": 302, "dtypefloattorch": 315, "dummi": 258, "emptysearchspaceerror": 51, "encod": 371, "encount": 362, "end": 361, "enum": [87, 101, 242], "environ": 369, "equival": 374, "exampl": [323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 360, 361], "except": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "exceptiongroup": 362, "exclus": [338, 340], "expectedimprov": 3, "experi": [336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354, 361, 375], "experiment": 367, "expir": 363, "explicit": 373, "extend": 364, "farthest_point_sampl": 313, "field": 374, "file": [355, 356], "filter_attribut": 260, "find_subclass": 261, "finite_float": 318, "fix": 363, "float": 369, "fpsrecommend": 159, "fraction_to_float": 283, "from": [355, 361, 363, 367, 373, 374], "full": [322, 323, 324, 325, 326, 327, 328, 373], "function": [322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 347, 349, 350, 351, 352, 364, 375], "further": 367, "fuzzy_row_match": 290, "gammaprior": 122, "gaussian_process": [211, 212, 214, 217, 218, 219, 221, 222], "gaussianmixtureclusteringrecommend": 154, "gaussianprocesspreset": 220, "gaussianprocesssurrog": 213, "gener": [358, 359, 364, 372], "geom_mean": 306, "get": [330, 367], "get_base_structure_hook": 184, "get_baseclass": 262, "get_canonical_smil": 275, "get_model_params_valid": 237, "get_parameters_from_datafram": 113, "get_subclass": 263, "get_user_detail": 252, "github": 361, "group_duplicate_valu": 264, "guid": 379, "halfcauchyprior": 123, "halfnormalprior": 124, "hilberts_factori": 265, "how": 362, "hybrid": [326, 333, 352, 368], "implicit": 370, "import": [322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359], "inclus": 324, "incompatiblesearchspaceerror": 52, "incomplet": 327, "incorpor": 340, "index": 361, "indic": 361, "inequ": 368, "infiniteintervalerror": 294, "inform": [367, 372], "initi": [324, 331], "instal": 361, "instead": [344, 345], "instruct": 369, "internet": 369, "interv": [293, 294, 295, 296, 297], "invok": 374, "is_abstract": 270, "is_en": 253, "is_valid_smil": 276, "issu": 361, "iter": [333, 334, 342, 343, 344, 345, 347], "json": [367, 374], "kernel": [60, 61, 62, 63, 72], "kernel_factori": [214, 217], "kernelfactori": 215, "kmeansclusteringrecommend": 155, "known": 361, "learn": [357, 359, 375, 378], "licens": [361, 366], "limit": 377, "linear": [224, 334], "linear_transform": 249, "linearkernel": 64, "link": 345, "local": 361, "logexpectedimprov": 4, "lognormalprior": 125, "lookup": [195, 324, 325, 327, 358, 359, 375], "loop": [322, 323, 324, 325, 326, 327, 328, 358, 359, 361], "maintain": [361, 365], "make_gp_from_preset": 221, "mandatori": 370, "manual": [336, 337, 338, 339, 340], "match": 377, "maternkernel": 65, "max": 377, "mean": 375, "meanpredictionsurrog": 227, "measur": [330, 344, 345, 367], "mechan": [324, 325, 327], "memori": [298, 299], "memorys": 172, "meta": [133, 134, 136, 372], "metadata": 373, "metarecommend": 135, "min": 377, "mixin": 187, "mixtur": 339, "mode": [328, 347, 377], "model": [331, 342, 343, 344, 345, 376], "multi": [328, 346, 347], "multipl": [328, 375], "naiv": [140, 226], "naivehybridspacerecommend": 141, "name": 371, "name_to_smil": 277, "necessari": [323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356], "nest": 374, "ngboost": 228, "ngboostsurrog": 229, "nomcacquisitionfunctionerror": 53, "non_inf_float": 319, "non_nan_float": 320, "nonpredict": [150, 151, 153, 158], "nonpredictiverecommend": 152, "norecommenderslefterror": 54, "normalprior": 126, "notenoughpointslefterror": 55, "nothingtosimulateerror": 56, "numer": [106, 245, 300, 301, 302, 303, 304, 305, 306], "numericalcontinuousparamet": [107, 371], "numericaldiscreteparamet": [108, 371], "numericaltarget": [246, 377], "numericalunderflowerror": 57, "object": [76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 322, 323, 324, 325, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 347, 349, 350, 351, 354, 358, 359, 361, 370, 374], "onnx": 344, "optim": [358, 359, 361, 367], "option": [361, 371, 372], "optionalimporterror": 58, "other": 331, "output": [344, 345], "packag": [361, 369], "pamclusteringrecommend": 156, "parallel": 367, "paramet": [91, 92, 95, 96, 99, 101, 106, 109, 110, 112, 113, 114, 115, 116, 117, 322, 323, 324, 325, 326, 327, 328, 331, 345, 367, 371, 373], "parameter_cartesian_prod_to_df": 174, "parameterencod": 104, "partial": 17, "partialacquisitionfunct": 18, "pass": 345, "perform": [322, 323, 324, 328, 347, 349, 350, 351, 352], "periodickernel": 66, "piecewisepolynomialkernel": 67, "plainkernelfactori": 216, "plot": [307, 308], "point": 369, "polynomialkernel": 68, "posteriormean": 5, "pre": 344, "precis": 369, "preset": [218, 219, 221, 222], "pretrain": 344, "pretty_print_df": 291, "print": [336, 337, 339, 340, 347], "prior": [118, 119, 120, 121], "probabilityofimprov": 6, "problem": 362, "product": [340, 373], "productkernel": 74, "pull": 364, "pure": [142, 143, 145, 146, 148, 150, 151, 153, 158, 372], "purerecommend": 144, "pycharm": 362, "pytorch": 343, "qexpectedimprov": 8, "qlogexpectedimprov": 9, "qlognoisyexpectedimprov": 10, "qnoisyexpectedimprov": 11, "qprobabilityofimprov": 12, "qsimpleregret": 13, "quick": 361, "qupperconfidencebound": 14, "random": [309, 310, 311], "random_forest": 230, "randomforestsurrog": 231, "randomrecommend": 160, "rbfkernel": 69, "recommend": [128, 129, 131, 132, 133, 134, 136, 140, 142, 143, 145, 146, 148, 150, 151, 153, 158, 330, 331, 344, 345, 349, 350, 351, 352, 354, 367, 372], "recommenderprotocol": 130, "refers_to": 266, "register_custom_architectur": 210, "registr": [342, 343], "remov": 363, "represent": 373, "request": 364, "restrict": 373, "revers": 368, "rffkernel": 70, "role": 378, "rqkernel": 71, "run": [333, 334, 342, 343], "sampl": [158, 372], "sampling_algorithm": [312, 313], "scalar": [86, 88], "scalekernel": 75, "scaler": [161, 163], "scenario": [196, 197, 375], "scope": 369, "search": [358, 361, 372, 373], "searchspac": [164, 165, 167, 168, 170, 171, 174, 175, 176, 177, 178, 322, 323, 324, 326, 327, 328, 331, 333, 334, 336, 337, 338, 339, 340, 347, 348, 349, 350, 351, 352, 359], "searchspacetyp": 169, "see": 378, "select_constructor_hook": 185, "sequenti": [136, 367], "sequential_greedi": 148, "sequentialgreedyrecommend": 149, "sequentialmetarecommend": 137, "sequentialstrategi": 202, "serial": [179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 342, 343, 353, 354, 367, 374], "serialize_datafram": 191, "serialmixin": 188, "set": [358, 359], "set_random_se": 310, "setup": [330, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 354], "simplex": 373, "simul": [192, 193, 194, 195, 196, 197, 198, 199, 322, 323, 324, 325, 326, 327, 328, 358, 359, 375], "simulate_experi": 194, "simulate_scenario": 197, "simulate_transfer_learn": 199, "singl": [89, 369, 375], "singletargetobject": [90, 370], "sklearn": 342, "sklearnclusteringrecommend": 157, "smile": 110, "smiles_to_fp_featur": 278, "smiles_to_molecul": 279, "smiles_to_mordred_featur": 280, "smiles_to_rdkit_featur": 281, "smoothedboxprior": 127, "some": [333, 334, 347], "space": [352, 358, 361, 372, 373], "stage": 344, "start": 361, "str_to_acqf": 21, "strategi": [200, 201, 202, 203, 204, 331, 361], "streamingsequentialmetarecommend": 138, "streamingsequentialstrategi": 203, "string": [355, 374], "strtobool": 271, "structure_object": 83, "structure_recommender_protocol": 132, "subselectioncondit": [31, 368], "subspac": 373, "subspacecontinu": 166, "subspacediscret": 173, "substanc": [109, 110, 361], "substanceencod": 105, "substanceparamet": [111, 371], "suitabl": 331, "sum": 340, "surrog": [205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 221, 222, 224, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 331, 341, 342, 343, 344, 345, 376], "synchron": 364, "synthet": [349, 351, 352], "tabl": [324, 325, 327, 358, 359, 361], "target": [239, 240, 241, 242, 245, 247, 248, 249, 250, 328, 346, 347, 370, 377], "targetmod": 243, "targettransform": 244, "task": [358, 359], "taskparamet": [98, 371, 378], "telemetri": [251, 252, 253, 254, 255, 361, 369], "telemetry_record_recommended_measurement_percentag": 254, "telemetry_record_valu": 255, "temporary_se": 311, "terminologi": [374, 375, 378], "test": [322, 323, 326, 328, 333, 334, 349, 350, 351, 352], "thi": [323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 347, 349, 351, 352], "thresholdcondit": [32, 368], "to_kernel_factori": 217, "to_object": 81, "to_tensor": 292, "to_tupl": 267, "toler": 367, "tool": 364, "torch": [314, 315, 316], "train": 344, "transfer": [357, 359, 375, 378], "transfer_learn": [198, 199], "transform": [247, 248, 249, 250, 347], "triangular_transform": 250, "two": 356, "twophasemetarecommend": 139, "twophasestrategi": 204, "type": 374, "unidentifiedsubclasserror": 59, "uninstal": 369, "unstructure_bas": 186, "upperconfidencebound": 7, "us": [322, 323, 324, 325, 326, 327, 328, 330, 331, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 373, 374, 375, 376], "use_fallback_constructor_hook": 297, "user": 379, "util": [19, 20, 21, 112, 113, 189, 190, 191, 232, 233, 234, 235, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "v": [362, 367], "valid": [45, 46, 114, 115, 116, 117, 176, 177, 178, 236, 237, 238, 317, 318, 319, 320, 345, 356], "validate_constraint": 46, "validate_custom_architecture_cl": 238, "validate_decorrel": 115, "validate_is_finit": 116, "validate_paramet": 178, "validate_parameter_nam": 177, "validate_searchspace_from_config": 170, "validate_simplex_subspace_from_config": 175, "validate_unique_valu": 117, "valu": [373, 374], "variabl": 369, "varname_numpy_use_single_precis": 303, "varname_torch_use_single_precis": 316, "verif": [336, 337, 338, 339, 340, 356], "verifi": 334, "we": 375, "what": 375, "when": 362, "within": 373, "workflow": 364, "write": 364}})